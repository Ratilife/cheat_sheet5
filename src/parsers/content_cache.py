import sys
import time
import threading
from typing import Optional, Dict, Any
from collections import OrderedDict
class ContentCache:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._init_cache()
        return cls._instance



    def _init_cache(self, max_size: int = 100 * 1024 * 1024):  # 100 MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LRU-–∫—ç—à–∞"""
        self._lock = threading.RLock()
        self._cache = OrderedDict()  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self._max_size = max_size
        self._current_size = 0
        self._hits = 0
        self._misses = 0

    def _evict_oldest(self):
        """–í—ã—Ç–µ—Å–Ω—è–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if not self._cache:
                return

            # LRU: –≤—ã—Ç–µ—Å–Ω—è–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π) —ç–ª–µ–º–µ–Ω—Ç
            file_path, data = self._cache.popitem(last=False)
            self._current_size -= data['size']
            print(f"–í—ã—Ç–µ—Å–Ω–µ–Ω –∏–∑ –∫—ç—à–∞: {file_path} ({data['size']} –±–∞–π—Ç)")

    def _get_size(self, obj, depth: int = 0, max_depth: int = 50, _seen: Optional[set] = None) -> int:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã.

        Args:
            obj: –û–±—ä–µ–∫—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
            max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            _seen: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä)

        Returns:
            int: –†–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö
        """
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        if _seen is None:
            _seen = set()

        obj_id = id(obj)
        if obj_id in _seen:
            return 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏
        if depth >= max_depth:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ ({max_depth}) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {type(obj)}")
            return sys.getsizeof(obj)

        _seen.add(obj_id)
        size = sys.getsizeof(obj)

        try:
            if isinstance(obj, dict):
                for key, value in obj.items():
                    size += sys.getsizeof(key) + self._get_size(value, depth + 1, max_depth, _seen)
            elif isinstance(obj, (list, tuple, set, frozenset)):
                for item in obj:
                    size += self._get_size(item, depth + 1, max_depth, _seen)
            elif hasattr(obj, '__dict__'):
                # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                size += self._get_size(obj.__dict__, depth + 1, max_depth, _seen)
        finally:
            _seen.remove(obj_id)

        return size

    def invalidate(self, file_path: str):
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        #  TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 23.08.2025 - –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ invalidate
        with self._lock:
            if file_path in self._cache:
                data = self._cache.pop(file_path)
                self._current_size -= data['size']

    def invalidate_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
        #  TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 23.08.2025 - –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ invalidate_all
        with self._lock:
            self._cache.clear()
            self._current_size = 0

    def set(self, file_path: str, content: dict, size: int = None):
        """
         –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –≤ –∫—ç—à —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º LRU-–≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ–º.

         –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è
         —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –º–µ—Ç–æ–¥–æ–≤ parse_st_file() –∏–ª–∏ parse_markdown_file().
         –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Ç–µ—Å–Ω—è–µ—Ç —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

         Args:
             file_path (str): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–∞–∫ –∫–ª—é—á –∫—ç—à–∞
             content (dict): –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è:
                 - 'structure': –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ (—Å–ø–∏—Å–∫–∏/—Å–ª–æ–≤–∞—Ä–∏)
                 - 'root_name': –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
             size (int, optional): –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

         Raises:
             TypeError: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è file_path –∏–ª–∏ content.

         Notes:
             - –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
               {
                   'content': dict,       # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + root_name)
                   'size': int,           # —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
                   'timestamp': float,    # –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (time.time())
                   'access_count': int    # —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è 0)
               }
             - –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è _evict_oldest()
             - –†–∞–∑–º–µ—Ä –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –¥–ª–∏–Ω–∞ UTF-8 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ

         Example:
             >>> cache.set('/path/to/file.st',
             ...           {'structure': [...], 'root_name': 'file'},
             ...           1024)
         """
        with self._lock:
            if size is None:
                # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
                size = self._get_size(content)

            # –í—ã—Ç–µ—Å–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞
            while self._current_size + size > self._max_size and self._cache:
                self._evict_oldest()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫—ç—à
            self._cache[file_path] = {
                'content': content,  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                'size': size,
                'timestamp': time.time(),
                'access_count': 0
            }
            self._current_size += size

    def get(self, file_path: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞.

        –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—ç—à–µ.
        –ü—Ä–∏ —ç—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ LRU-–∫–µ—à–µ (–ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü) –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π.

        Args:
            file_path (str): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞.

        Returns:
            Optional[dict]: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:
                - 'structure': –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ (—Å–ø–∏—Å–∫–∏/—Å–ª–æ–≤–∞—Ä–∏)
                - 'root_name': –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        Raises:
            TypeError: –ï—Å–ª–∏ file_path –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.

        Notes:
            - –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π (hits)
            - –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–∞—Ö–æ–≤ (misses)
            - –≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü OrderedDict (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
            - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É

        Example:
            >>> cached_data = cache.get('/path/to/file.st')
            >>> if cached_data:
            ...     print(cached_data['root_name'])  # 'my_file'
            ...     print(cached_data['structure'])  # [{'name': 'template1', 'type': 'template', ...}]
        """
        with self._lock:
            if not isinstance(file_path, str):
                raise TypeError("file_path –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

            if file_path not in self._cache:
                self._misses += 1
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ LRU (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü)
            data = self._cache.pop(file_path)
            self._cache[file_path] = data

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._hits += 1
            data['access_count'] += 1

            return data['content']

    def get_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞.

        –°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫—ç—à–∞,
        –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–∞–¥–∞–Ω–∏—è—Ö, –ø—Ä–æ–º–∞—Ö–∞—Ö, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏.

        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫—ç—à–∞:
                - 'total_items': int - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–µ
                - 'total_size': int - —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ (–±–∞–π—Ç—ã)
                - 'max_size': int - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–±–∞–π—Ç—ã)
                - 'memory_usage_percent': float - –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (0-100)
                - 'hits': int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∫—ç—à—É
                - 'misses': int - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∫—ç—à—É
                - 'total_requests': int - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫—ç—à—É
                - 'hit_ratio': float - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π (0-1)
                - 'miss_ratio': float - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–º–∞—Ö–æ–≤ (0-1)
                - 'average_item_size': float - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫—ç—à–µ (–±–∞–π—Ç—ã)
                - 'oldest_item_timestamp': Optional[float] - –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                - 'newest_item_timestamp': Optional[float] - –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                - 'cache_age_seconds': Optional[float] - –≤–æ–∑—Ä–∞—Å—Ç —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Example:
            >>> stats = cache.get_stats()
            >>> print(stats)
            {
                'total_items': 15,
                'total_size': 5242880,
                'max_size': 10485760,
                'memory_usage_percent': 50.0,
                'hits': 120,
                'misses': 30,
                'total_requests': 150,
                'hit_ratio': 0.8,
                'miss_ratio': 0.2,
                'average_item_size': 349525,
                'oldest_item_timestamp': 1690284567.123456,
                'newest_item_timestamp': 1690284599.987654,
                'cache_age_seconds': 32.863198
            }
        """
        #TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 23.08.2025 - –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ get_stats –¥—É–º–∞—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
        total_requests = self._hits + self._misses

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        oldest_timestamp = None
        newest_timestamp = None

        if self._cache:
            timestamps = [data['timestamp'] for data in self._cache.values()]
            oldest_timestamp = min(timestamps)
            newest_timestamp = max(timestamps)

        stats = {
            'total_items': len(self._cache),
            'total_size': self._current_size,
            'max_size': self._max_size,
            'memory_usage_percent': (self._current_size / self._max_size * 100) if self._max_size > 0 else 0,
            'hits': self._hits,
            'misses': self._misses,
            'total_requests': total_requests,
            'hit_ratio': self._hits / total_requests if total_requests > 0 else 0,
            'miss_ratio': self._misses / total_requests if total_requests > 0 else 0,
            'average_item_size': self._current_size / len(self._cache) if self._cache else 0,
            'oldest_item_timestamp': oldest_timestamp,
            'newest_item_timestamp': newest_timestamp,
            'cache_age_seconds': (time.time() - oldest_timestamp) if oldest_timestamp else None
        }

        return stats