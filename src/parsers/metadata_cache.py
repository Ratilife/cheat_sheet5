import os
import sys
import time
from typing import Optional, Dict, Any

class MetadataCache:
    # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 24.08.2025
    _instance = None # –≠—Ç–æ "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ" –¥–ª—è —Å–∏–Ω–≥–ª—Ç–æ–Ω-–æ–±—ä–µ–∫—Ç–∞. –ö–ª–∞—Å—Å–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª–∞—Å—Å—É, –∞ –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—É)
    _cache: Dict[str, Dict[str, Any]] = {}
    _default_ttl = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._cache = {}
        return cls._instance

    def set(self, file_path: str, metadata: dict,  file_type: str = None, ttl: int = None) -> None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            file_stats = os.stat(file_path)
            # –¢–û–õ–¨–ö–û –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞
            self._cache[file_path] = {
                'metadata': metadata,                   # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
                'timestamp': time.time(),               # –ö–æ–≥–¥–∞ –ø–æ–ª–æ–∂–∏–ª–∏ –≤ –∫—ç—à
                'file_size': file_stats.st_size,        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                'file_mtime': file_stats.st_mtime,      # –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                'ttl': ttl or self._default_ttl,        # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏
                'file_type': file_type                  # —Ç–∏–ø —Ñ–∞–π–ª–∞ st –∏–ª–∏ md
            }
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self._cache[file_path] = {
                'metadata': metadata or {
                    "name": os.path.basename(file_path),
                    "type": file_type or "unknown",
                    "size": 0,
                    "last_modified": 0
                },
                'timestamp': time.time(),
                'file_size': 0,
                'file_mtime': 0,
                'ttl': ttl or self._default_ttl,
                'file_type': file_type,
                'error': str(e)
            }


    def get(self, file_path: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏.

        Returns:
            dict: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ (—Ç–æ, —á—Ç–æ –±—ã–ª–æ –≤ `metadata`) –∏–ª–∏ None –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ
        """
        if file_path not in self._cache:
            return None

        cached_data = self._cache[file_path]

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏)
        if time.time() - cached_data['timestamp'] > cached_data['ttl']:
            self.invalidate(file_path)
            return None

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        if self._is_file_modified(file_path, cached_data):
            self.invalidate(file_path)
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
        return cached_data['metadata']

    def _is_file_modified(self, file_path: str, cached_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ"""
        if not os.path.exists(file_path):
            return True

        try:
            current_stats = os.stat(file_path)

            # –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            return (current_stats.st_size != cached_data['file_size'] or
                    current_stats.st_mtime != cached_data['file_mtime'])
        except OSError:
            return True

    def invalidate(self, file_path: str):
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        self._cache.pop(file_path, None)

    def invalidate_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
        self._cache.clear()

    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        return {
            'total_items': len(self._cache),
            'memory_usage_bytes': sum(sys.getsizeof(v) for v in self._cache.values())
        }

    #--------–¥–ª—è MD-—Ñ–∞–π–ª–æ–≤-------------

    def get_md_title(self, file_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Markdown-—Ñ–∞–π–ª–∞ –∏–∑ –∫—ç—à–∞.
        –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞.
        """
        #TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 22.08.2025 - –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥  get_md_title
        md_metadata = self.get_md_metadata(file_path)
        if md_metadata:
            return md_metadata['name']  # name —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–±–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ª–∏–±–æ –∏–º—è —Ñ–∞–π–ª–∞
        return None
