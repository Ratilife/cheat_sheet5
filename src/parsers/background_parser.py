'''
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å—ã—Ä–æ–π –∏ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—Å—è

'''
import os
from enum import Enum
from PySide6.QtCore import QObject, Signal, QThreadPool, QRunnable, Q_ARG, QMetaObject
from PySide6.QtGui import Qt

from parsers.file_parser_service import FileParserService
from parsers.content_cache import ContentCache


class Priority(Enum):
    """
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤.

        Attributes:
            VISIBLE: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ñ–∞–π–ª—ã, –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            PRELOAD: –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            DEEP: –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ñ–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    VISIBLE = 0    # –¢–æ, —á—Ç–æ –≤–∏–¥–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–º–∞–∫—Å. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    PRELOAD = 1    # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    DEEP = 2       # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)

class ParserTask(QRunnable):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞.

    –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç QRunnable –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤ Qt.
    –ö–∞–∂–¥—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    finished = Signal(str, dict)  # –î–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª
    def __init__(self,file_path: str, priority: Priority, parser_service: FileParserService):
        """
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞.

                Args:
                    file_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                    priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è Priority
                    parser_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤
        """
        super().__init__()
        self.file_path = file_path
        self.priority = priority
        self.parser_service = parser_service
        self.setAutoDelete(True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    def run(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.

        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—É–ª–æ–º –ø–æ—Ç–æ–∫–æ–≤. –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º —Å–∏–≥–Ω–∞–ª–æ–≤ Qt.

        Raises:
            Exception: –õ—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –Ω–æ –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –¥–∞–ª—å—à–µ
        """
        try:
            # 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            print(f"–ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {self.file_path} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self.priority.name})")

            # 2. –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∏ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞–¥–æ–ª–≥–æ.
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤–µ–¥—å —Ä–∞–¥–∏ —ç—Ç–æ–≥–æ –º—ã –∏ —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫!
            parsed_data = self.parser_service.parse_and_get_type(self.file_path)

            # 3. –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
            # –ú—ã –Ω–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å GUI –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
            # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º invokeMethod –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–ª–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
            self.finished.emit(self.file_path, parsed_data)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª

        except Exception as e:
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            # –õ–æ–≤–∏–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∞–≤–∞—Ä–∏–π–Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø–æ—Ç–æ–∫.
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {self.file_path}: {str(e)}")


class BackgroundParser(QObject):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.

    –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –ø–æ –ø–æ—Ç–æ–∫–∞–º –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç
    –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É —Ñ–æ–Ω–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –≥–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º GUI.

    Attributes:
        _instance: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Singleton)
    """

    # –°–∏–≥–Ω–∞–ª—ã
    task_started = Signal(str, Priority)  # –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞
    task_finished = Signal(str, dict)  # –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (file_path, data)
    task_failed = Signal(str, str)  # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (file_path, error)
    queue_empty = Signal()  # –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

    _instance = None

    @classmethod
    def instance(cls, parser_service=None, content_cache=None):
        """
                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ (Singleton pattern).

                Returns:
                    BackgroundParser: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        if cls._instance is None:
            if parser_service is None or content_cache is None:
                raise ValueError("–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ instance() –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å parser_service –∏ content_cache")
            cls._instance = BackgroundParser(parser_service, content_cache)
        return cls._instance

    def __init__(self, parser_service: FileParserService, content_cache: ContentCache):
        """
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.

                Args:
                    parser_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                    content_cache: –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        super().__init__()
        self.parser_service = parser_service
        self.content_cache = content_cache

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
        self.thread_pool = QThreadPool()
        self.thread_pool.setMaxThreadCount(2)  # –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏

        # –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self.task_queue = {priority: [] for priority in Priority}
        self.active_tasks = 0

    def add_task(self, file_path: str, priority: Priority = Priority.PRELOAD):
        """
            –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥.

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

            Args:
                file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é PRELOAD)
        """
        if not file_path or not os.path.exists(file_path):
            return

        task = ParserTask(file_path, priority, self.parser_service)
        task.finished.connect(self.on_task_finished)
        self.task_queue[priority].append(task)
        self._process_queue()

    def add_tasks(self, file_paths: list, priority: Priority = Priority.PRELOAD):
        """
            –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞.

            Args:
                file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é PRELOAD)
        """
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 24.08.2025 - –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ –º–µ—Ç–æ–¥ add_tasks,
        for file_path in file_paths:
            self.add_task(file_path, priority)

    def _process_queue(self):
        """
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏.

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            (–æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É). –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ maxThreadCount() –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        if self.active_tasks >= self.thread_pool.maxThreadCount():
            return  # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
        for priority in [Priority.VISIBLE, Priority.PRELOAD, Priority.DEEP]:
            if self.task_queue[priority]:
                task = self.task_queue[priority].pop(0)
                self.active_tasks += 1
                self.task_started.emit(task.file_path, task.priority)
                self.thread_pool.start(task)
                break
        else:
            self.queue_empty.emit()  # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞

    def on_task_finished(self, file_path: str, parsed_data: dict):
        """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.

            –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
            –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à, —É–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç
            –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.

            Args:
                file_path: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                parsed_data: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        self.active_tasks -= 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        self.content_cache.set(file_path, parsed_data)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.task_finished.emit(file_path, parsed_data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        self._process_queue()

    def clear_queue(self, priority: Priority = None):
        """
                –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥–∞.

                Args:
                    priority: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—á–µ—Ä–µ–¥—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
                             –ï—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
        """
        if priority:
            self.task_queue[priority].clear()
        else:
            for queue in self.task_queue.values():
                queue.clear()

    def get_queue_stats(self) -> dict:
        """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á.

            Returns:
                dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π:
                    - active_tasks: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
                    - queued_tasks: —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                    - max_threads: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        """
        return {
            "active_tasks": self.active_tasks,
            "queued_tasks": {p.name: len(q) for p, q in self.task_queue.items()},
            "max_threads": self.thread_pool.maxThreadCount()
        }