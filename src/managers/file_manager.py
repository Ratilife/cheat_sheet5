import json
import os
from dataclasses import dataclass
from PySide6.QtWidgets import QFileDialog
from pathlib import Path
from typing import Dict, List, Union
from src.global_var.config import get_for_program_path

@dataclass
class FolderCreationResult:
    success: bool
    root_path: str | None  # –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (–µ—Å–ª–∏ —É—Å–ø–µ—Ö)
    error: str | None      # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ failure)
    already_exists: bool   # –§–ª–∞–≥ "–ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

class FileManager:
    @staticmethod
    def get_create_folder_path(title: str) -> str | None:
        """
           –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

           –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
               title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞

           –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
               str | None: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ None, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω

           –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
               - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ñ–∞–π–ª—ã —Å–∫—Ä—ã—Ç—ã)
               - –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (DontResolveSymlinks)
               - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –û–°
               - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è Windows/macOS/Linux

           –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
                path = get_create_folder_path("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
                if path:
               ...     print(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {path}")
           """
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 02.08.2025
                #üèÜtask: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏;
        folder_path = QFileDialog.getExistingDirectory(
            None,
            title,
            "",
            options=QFileDialog.Option.ShowDirsOnly | QFileDialog.Option.DontResolveSymlinks
        )
        return folder_path if folder_path else None

    def save_path_for_program(self, path_files: list) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ for_program.
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.
        """
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 01.09.2025
        json_path = Path(os.path.join(get_for_program_path(), "saved_files.json"))

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            existing_data = self.load_json_file(json_path)
        except RuntimeError:
            existing_data = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—è

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ path_files
        new_data = []
        for path_file in path_files:
            extension_file = Path(path_file).suffix
            file_type = 'unknown'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_type, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º type()
            if extension_file.lower() == '.st':
                file_type = 'file'
            elif extension_file.lower() == '.md':
                file_type = 'markdown'

            new_data.append({
                "path": path_file,
                "type": file_type
            })

        # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏
        if existing_data:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫.
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
            merged_data = list(existing_data)
            merged_data.extend(new_data)
        else:
            merged_data = new_data

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        self.save_data_to_json(json_file=json_path, data=merged_data)




    def create_root_folder_structure(self, config_path: Union[str, Path],
                                     folder_path: Union[str, Path, None] = None) -> FolderCreationResult:
        """–°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                config_path (Union[str, Path]): –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
                    - root_folder: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (—Å—Ç—Ä–æ–∫–∞)
                    - subfolders: —Å–ª–æ–≤–∞—Ä—å —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

                folder_path (Union[str, Path, None]): –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
                    –ï—Å–ª–∏ None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
                str: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏

            –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
                FileNotFoundError: –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                json.JSONDecodeError: –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ JSON
                PermissionError: –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
                KeyError: –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'root_folder'

            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
                - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                - –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ (–±–µ–∑ –æ—à–∏–±–æ–∫)
                - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
                - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∏–º–ª–∏–Ω–∫–∏ –∏ '..')
                - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

            –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
                {
                    "root_folder": "my_project",
                    "subfolders": {
                        "docs": ["v1", "v2"],
                        "src": ["main", "test"]
                    }
                }

            –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
                 path = create_root_folder_structure("config.json")
                 print(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤: {path}")
                –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤: /absolute/path/to/my_project
            """

        #TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 03.08.2025 -
                # üèÜtask: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏;

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
        base_path = Path(folder_path) if folder_path is not None else Path.cwd()

        # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = Path(config_path) if isinstance(config_path, str) else config_path
        with config_file.open('r', encoding='utf-8') as f:
            config: Dict[str, Union[str, Dict[str, List[str]]]] = json.load(f)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_path)
        root_folder_name = config['root_folder']
        root_path = base_path / root_folder_name

        if self.is_path_already_exists(Path(root_path)):
            return FolderCreationResult(
                success=False,
                root_path= str(root_path),
                error=f"–ü–∞–ø–∫–∞ '{root_folder_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                already_exists=True
            )

        root_path.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫
        subfolders: Dict[str, List[str]] = config.get('subfolders', {})
        for folder, subfolders_list in subfolders.items():
            folder_full_path = root_path / folder
            folder_full_path.mkdir(exist_ok=True)

            for subfolder in subfolders_list:
                subfolder_full_path = folder_full_path / subfolder
                subfolder_full_path.mkdir(exist_ok=True)

        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ '{root_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ '{base_path}'!")
        return FolderCreationResult(
                success=True,
                root_path=str(root_path.resolve()),
                error=None,
                already_exists=False
            )

    def check_path_exists(self, root_path: str, target_name: str) -> Path:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            root_path (str): –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_name (str): –ò–º—è –ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "for_program")

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º—É –æ–±—ä–µ–∫—Ç—É

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            FileNotFoundError: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π root_path –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            RuntimeError: –ï—Å–ª–∏ target_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ —Ñ–∞–π–ª (–∞ –Ω–µ –ø–∞–ø–∫–∞)
        """
        # TODO 04.08.2025 - –º–µ—Ç–æ–¥ check_path_exists –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ save_path_root_folder –∏–∑ –º–æ–¥—É–ª—è file_operation —Ç–æ–∂–µ  –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–µ—Ç–æ–¥–∞ is_path_already_exists

            # üèÜtask: –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏;
        base_path = Path(root_path)
        if not base_path.exists():
            raise FileNotFoundError(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {root_path}")

        target_path = base_path / target_name

        if target_path.exists():
            if target_path.is_file():
                raise RuntimeError(f"–û–±—ä–µ–∫—Ç '{target_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ —Ñ–∞–π–ª (–æ–∂–∏–¥–∞–ª–∞—Å—å –ø–∞–ø–∫–∞)")
            return target_path

        return target_path


    def is_path_already_exists(self, path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞) –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
        Args:
            path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        Returns:
            bool: True –µ—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –ø–∞–ø–∫–∞), False –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
            if project_manager.is_path_already_exists(Path("my_folder")):
                print("–û–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        """
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 04.08.2025 - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
            # üèÜtask: –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏;
            # üèÜtask: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏;
        return path.exists()

    def load_json_file(self, file_path: Path) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        Args:
            file_path: –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
        Raises:
            RuntimeError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
                        –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        """
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 03.08.2025 - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
            # üèÜtask: –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏;
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            raise RuntimeError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except PermissionError:
            raise RuntimeError(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
        except json.JSONDecodeError as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}")

    def save_data_to_json(self, json_file: Path, data: any) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å JSON, –≤ —Ñ–∞–π–ª."""
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 01.09.2025

        with open(json_file, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

    def create_files_dict_with_paths(self, bookmarks_path: Path) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –ø–∞–ø–∫–∞–º–∏ (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ) –∏ –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º .md –∏ .st,
        –∏—Å–∫–ª—é—á–∞—è –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π.

        Args:
            bookmarks_path (Path): –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ:
                  - –∫–ª—é—á–∏: –∏–º–µ–Ω–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–Ω–µ –≤–∫–ª—é—á–∞—è –∫–æ—Ä–Ω–µ–≤—É—é)
                  - –∑–Ω–∞—á–µ–Ω–∏—è: —Å–ø–∏—Å–∫–∏ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º .md –∏–ª–∏ .st –≤ —ç—Ç–∏—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        """
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 13.08.2025
        dict_dir_files = {}

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        for root, dirs, files in os.walk(bookmarks_path):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if Path(root) == bookmarks_path:
                continue

            dir_name = os.path.basename(root)
            if dir_name not in dict_dir_files:
                dict_dir_files[dir_name] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .md –∏ .st
            for file in files:
                if file.endswith((".md", ".st")):
                    file_path = os.path.join(root, file)
                    dict_dir_files[dir_name].append(file_path)

        return dict_dir_files


    def dialog_st_md_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ST-—Ñ–∞–π–ª–æ–≤, MD-—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 31.08.2025
        files, _ = QFileDialog.getOpenFileNames(None,
                "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã", "", "ST Files (*.st);;Markdown Files (*.md)")
        return files