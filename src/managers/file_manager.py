import json

from PySide6.QtWidgets import QFileDialog
from pathlib import Path
from typing import Dict, List, Union

class FileManager:
    @staticmethod
    def get_create_folder_path(title: str) -> str | None:
        """
           –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

           –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
               title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞

           –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
               str | None: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ None, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω

           –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
               - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ñ–∞–π–ª—ã —Å–∫—Ä—ã—Ç—ã)
               - –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (DontResolveSymlinks)
               - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –û–°
               - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è Windows/macOS/Linux

           –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
                path = get_create_folder_path("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
                if path:
               ...     print(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {path}")
           """
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 02.08.2025
                #task: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
        folder_path = QFileDialog.getExistingDirectory(
            None,
            title,
            "",
            options=QFileDialog.Option.ShowDirsOnly | QFileDialog.Option.DontResolveSymlinks
        )
        return folder_path if folder_path else None

    def create_root_folder_structure(self, config_path: Union[str, Path],folder_path: Union[str, Path, None] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                config_path (Union[str, Path]): –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
                    - root_folder: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (—Å—Ç—Ä–æ–∫–∞)
                    - subfolders: —Å–ª–æ–≤–∞—Ä—å —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

                folder_path (Union[str, Path, None]): –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
                    –ï—Å–ª–∏ None (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
                str: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏

            –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
                FileNotFoundError: –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                json.JSONDecodeError: –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ JSON
                PermissionError: –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
                KeyError: –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'root_folder'

            –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
                - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                - –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ (–±–µ–∑ –æ—à–∏–±–æ–∫)
                - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
                - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∏–º–ª–∏–Ω–∫–∏ –∏ '..')
                - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ

            –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
                {
                    "root_folder": "my_project",
                    "subfolders": {
                        "docs": ["v1", "v2"],
                        "src": ["main", "test"]
                    }
                }

            –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
                 path = create_root_folder_structure("config.json")
                 print(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤: {path}")
                –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤: /absolute/path/to/my_project
            """

        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 03.08.2025
                # task: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
        base_path = Path(folder_path) if folder_path is not None else Path.cwd()

        # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = Path(config_path) if isinstance(config_path, str) else config_path
        with config_file.open('r', encoding='utf-8') as f:
            config: Dict[str, Union[str, Dict[str, List[str]]]] = json.load(f)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_path)
        root_path = base_path / config['root_folder']
        root_path.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫
        subfolders: Dict[str, List[str]] = config.get('subfolders', {})
        for folder, subfolders_list in subfolders.items():
            folder_full_path = root_path / folder
            folder_full_path.mkdir(exist_ok=True)

            for subfolder in subfolders_list:
                subfolder_full_path = folder_full_path / subfolder
                subfolder_full_path.mkdir(exist_ok=True)

        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ '{root_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ '{base_path}'!")
        return str(root_path.resolve())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ

    def check_path_exists(self, root_path: str, target_name: str) -> Path:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            root_path (str): –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            target_name (str): –ò–º—è –ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "for_program")

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º—É –æ–±—ä–µ–∫—Ç—É

        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            FileNotFoundError: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π root_path –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            RuntimeError: –ï—Å–ª–∏ target_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ —Ñ–∞–π–ª (–∞ –Ω–µ –ø–∞–ø–∫–∞)
        """
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 03.08.2025
            # task: –†–∞–±–æ—Ç–∞ —Å –æ–∫–Ω–æ–º –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        base_path = Path(root_path)
        if not base_path.exists():
            raise FileNotFoundError(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {root_path}")

        target_path = base_path / target_name

        if target_path.exists():
            if target_path.is_file():
                raise RuntimeError(f"–û–±—ä–µ–∫—Ç '{target_name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ —Ñ–∞–π–ª (–æ–∂–∏–¥–∞–ª–∞—Å—å –ø–∞–ø–∫–∞)")
            return target_path

        return target_path

    def _load_json_file(self, file_path: Path) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        Args:
            file_path: –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
        Raises:
            RuntimeError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
                        –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        """
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 03.08.2025 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω  –º–µ—Ç–æ–¥ _load_json_file –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            raise RuntimeError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except PermissionError:
            raise RuntimeError(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
        except json.JSONDecodeError as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}")
