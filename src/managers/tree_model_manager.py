from PySide6.QtCore import QAbstractItemModel, QModelIndex, QObject, Signal
from src.models.st_md_file_tree_model import STMDFileTreeModel
from src.models.st_md_file_tree_item import STMDFileTreeItem
from src.parsers.metadata_cache import MetadataCache
from src.parsers.file_parser_service import FileParserService
from src.parsers.content_cache import ContentCache
from src.controllers.selection_controller import TreeSelectionController
class TreeModelManager(QObject):
    model_updated = Signal(str, str)  # tab_name, file_path
    def __init__(self, parser_service: FileParserService, metadata_cache: MetadataCache, content_cache:ContentCache):
        super().__init__()
        self.parser_service = parser_service
        self.metadata_cache = metadata_cache
        self.content_cache = content_cache

        self.tab_models = {}    # –∫—ç—à –º–æ–¥–µ–ª–µ–π
        self.file_to_tabs = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –≤ –∫–∞–∫–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_controller = TreeSelectionController(content_cache)

    def connect_tree_views(self, trees_dict: dict):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –¥–µ—Ä–µ–≤—å—è–º"""
        for tab_name, tree_view in trees_dict.items():
            self.selection_controller.connect_tree_view(tree_view)
            print(f"DEBUG: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –¥–µ—Ä–µ–≤—É –≤–∫–ª–∞–¥–∫–∏ '{tab_name}'")

    def build_model_for_tab(self, tab_name: str, file_paths: list[str]) -> STMDFileTreeModel:
        # ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: 28.08.2025
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Ñ–∞–π–ª–æ–≤ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        print(f"DEBUG‚úÖ: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' —Å —Ñ–∞–π–ª–∞–º–∏ {len(file_paths)}")
        for file_path in file_paths:
            print(f"DEBUG‚úÖ: –ø—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–∞  {file_path} –∫ –≤–∫–ª–∞–¥–∫–µ {tab_name}")
            if file_path not in self.file_to_tabs:
                self.file_to_tabs[file_path] = []
            if tab_name not in self.file_to_tabs[file_path]:
                self.file_to_tabs[file_path].append(tab_name)

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = STMDFileTreeModel(self.content_cache)

        for file_path in file_paths:

            full_data = self.content_cache.get(file_path)
            if full_data:
                model.add_file(file_path, full_data)
            else:
                metadata = self.metadata_cache.get(file_path)
                if not metadata:
                    metadata = self._parse_metadata(file_path)
                    self.metadata_cache.set(file_path, metadata,
                                        file_type=metadata.get('type'))
                model.add_file(file_path, metadata)

        self.tab_models[tab_name] = model
        print(f"DEBUGüíæ: –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ tab_models")
        print(f"DEBUG: –¢–µ–ø–µ—Ä—å –≤ tab_models: {list(self.tab_models.keys())}")
        return model

    def add_files_to_tab(self, tab_name: str, file_paths: list[str]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        Args:
            tab_name: –∏–º—è —Ü–µ–ª–µ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
            file_paths: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        if tab_name not in self.tab_models:
            print(f"DEBUG‚ùå: –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –≤–∫–ª–∞–¥–∫–∏
        model = self.tab_models[tab_name]

        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
        parsed_data_list = self._parse_content_data(file_paths)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –º–æ–¥–µ–ª—å
        for file_path, parsed_data in zip(file_paths, parsed_data_list):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –º–æ–¥–µ–ª—å
            success = model.add_file(file_path, parsed_data)

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ñ–∞–π–ª–æ–≤ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
                if file_path not in self.file_to_tabs:
                    self.file_to_tabs[file_path] = []
                if tab_name not in self.file_to_tabs[file_path]:
                    self.file_to_tabs[file_path].append(tab_name)
                print(f"DEBUG‚úÖ: –§–∞–π–ª '{file_path}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∫–ª–∞–¥–∫—É '{tab_name}'")
            else:
                print(f"DEBUG‚ùå: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª '{file_path}'")

        return True



    def update_file_in_all_tabs(self, file_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –≥–¥–µ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
        if file_path not in self.file_to_tabs:
            return False

        print(f"DEBUG‚úÖ: update_file_in_all_tabs –¥–ª—è {file_path}")
        print(f"DEBUG‚úÖ: —Ñ–∞–π–ª –≤ file_to_tabs: {file_path in self.file_to_tabs}")

        if file_path not in self.file_to_tabs:
            print(f"DEBUG‚úÖ: –§–∞–π–ª {file_path} –Ω–µ—Ç –≤  file_to_tabs")
            print(f"DEBUG‚úÖ: –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {list(self.file_to_tabs.keys())}")
            return False

        full_data = self.content_cache.get(file_path)
        if not full_data:
            return False

        updated = False
        for tab_name in self.file_to_tabs[file_path]:
            if self.update_model(tab_name, file_path):
                updated = True
                self.model_updated.emit(tab_name, file_path)

        return updated
    def _parse_metadata(self, file_path: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç FileParserService)"""
        return self.parser_service.parse_metadata(file_path)

    def _parse_content_data(self,file_paths: list[str]) -> list:

        parser_list= []
        for file_path in file_paths:
            parser = self.parser_service.parse_and_get_type(file_path=file_path)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –¥–∞–Ω–Ω—ã–µ
            parser_list.append(parser[1])

        return parser_list
    def update_model(self, tab_name: str, file_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"""
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 28.08.2025
        print(f"DEBUGüîÑ: update_model –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_name}', —Ñ–∞–π–ª '{file_path}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if tab_name not in self.tab_models:
            print(f"DEBUG‚ùå: –í–∫–ª–∞–¥–∫–∞ '{tab_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ tab_models!")
            print(f"DEBUG: –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏: {list(self.tab_models.keys())}")
            return False

        if tab_name in self.tab_models:
            model = self.tab_models[tab_name]
            print(f"DEBUG: –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '{tab_name}' –Ω–∞–π–¥–µ–Ω–∞")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            full_data = self.content_cache.get(file_path)
            if full_data:
                print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç")
                return model.update_file_item(file_path, full_data)

        print(f"DEBUG‚ùå: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞ '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
        return False

    def refresh_tab_view(self, tab_name: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç view –¥–ª—è –≤–∫–ª–∞–¥–∫–∏"""
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 28.08.2025 –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ refresh_tab_view
        if tab_name in self.tab_models:
            model = self.tab_models[tab_name]
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –º–æ–¥–µ–ª—å
            model.beginResetModel()
            model.endResetModel()

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã(–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è)
    def refresh_file_in_tabs(self, file_path: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö"""
        # TODO üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: 28.08.2025 –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ refresh_file_in_tabs
        for tab_name, model in self.tab_models.items():
            model.refresh_item(file_path)
    # ------------(–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è)
    def debug_file_to_tabs(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ file_to_tabs –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–µ—Ç–æ–¥
        print("=" * 50)
        print("DEBUG: file_to_tabs contents:")
        if not self.file_to_tabs:
            print("  EMPTY - no files linked to tabs!")
            return

        for file_path, tabs in self.file_to_tabs.items():
            print(f"  {file_path}: {tabs}")
        print("=" * 50)