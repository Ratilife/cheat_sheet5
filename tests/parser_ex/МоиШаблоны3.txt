Root Name: МоиШаблоны
==================================================

Structure:
--------------------
[
  {
    "name": "СКД",
    "type": "folder",
    "children": [
      {
        "name": "Набор данных - Объект",
        "type": "template",
        "content": "\tСтандартнаяОбработка = Ложь;\r\n\t//1. получение схемы компоновки данных\r\n    СхемаКомпоновкиДанных = ПолучитьМакет(\"\"ОсновнаяСхемаКомпоновкиДанных\"\");\r\n\t\r\n\t//2. получение настроек компановки данных\r\n\tНастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();\r\n\t\r\n\t//3. получение макета компановки данных\r\n\tКомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;\r\n\tМакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);\r\n\t\r\n\t//4. получение результата отчета (выполнение компановки)\r\n\tВнешниеНаборыДанных = Новый Структура(\"\"ТаблицаДанных\"\",РезультатЗапроса);  //\"\"\"\"ТаблицаДанных\"\"\"\" - на уровне схемы; РезультатЗапроса - на уровне кода \r\n\t\r\n\tПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;\r\n\tПроцессорКомпановки.Инициализировать(МакетКомпановки,ВнешниеНаборыДанных);\r\n\t\r\n\t//5. вывод результата компановки\r\n\tПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;\r\n\tПроцессорВывода.УстановитьДокумент(ДокументРезультат);\r\n\tПроцессорВывода.Вывести(ПроцессорКомпановки);\r\n"
      },
      {
        "name": "Набор данных",
        "type": "template",
        "content": "\tСтандартнаяОбработка = Ложь;\r\n\r\n\t//1. получение схемы компоновки данных\r\n\tСхемаКомпоновкиДанных = ПолучитьМакет(\"\"ОсновнаяСхемаКомпанновкиДанных\"\");\r\n\t\r\n\t//2. получение настроек компановки данных\r\n\tНастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();\r\n\t\r\n\t//3. получение макета компановки данных\r\n\tКомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;\r\n\tМакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);\r\n\t\r\n\t//4. компановка данных\r\n\tПроцессорКомпановки = Новый ПроцессорКомпановкиДанных;\r\n\tПроцессорКомпановки.Инициализировать(МакетКомпановки)\r\n\t\r\n\t//5. вывод результата компановки\r\n\tПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;\r\n\tПроцессорВывода.УстановитьДокумент(ДокументРезультат);\r\n\tПроцессорВывода.Вывести(ПроцессорКомпановки);\r\n"
      },
      {
        "name": "ОтчетЖурналРегистрации",
        "type": "template",
        "content": "      СтандартнаяОбработка = Ложь;\r\n\t\t\r\n\t\t//1. получение схемы компоновки данных\r\n\t    СхемаКомпоновкиДанных = ПолучитьМакет(\"\"ОсновнаяСхемаКомпоновкиДанных\"\");\r\n\t\t\r\n\t\t//2. получение настроек компановки данных\r\n\t\tНастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();\r\n\t\t\r\n\t\tКоллекцияПараметров = НастройкиКомпановки.ПараметрыДанных;\r\n\t\tПараметр_Период = КоллекцияПараметров.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(\"\"Период\"\"));\r\n\t\tЕсли Параметр_Период<> Неопределено Тогда \r\n\t\t\t ЗначениеПараметраПериод = Параметр_Период.Значение;\r\n\t\t\t ДатаНачало = ЗначениеПараметраПериод.ДатаНачало;\r\n\t\t\t ДатаОкончания = ЗначениеПараметраПериод.ДатаОкончания;\r\n\r\n\t\tИначе\r\n\t\t\tДатаНачало = '00010101';\r\n\t\t\tДатаОкончания = '00010101';\r\n\t\tКонецЕсли;\t\r\n\t\tТаблицаЖурнала = Новый ТаблицаЗначений;\r\n\t\tСтруктураОтбора = Новый Структура;\r\n\t\tСтруктураОтбора.Вставить(\"\"ДатаНачала\"\", ДатаНачало);\r\n\t\tСтруктураОтбора.Вставить(\"\"ДатаОкончания\"\", ДатаОкончания);\r\n\t\tСтруктураОтбора.Вставить(\"\"Добавление\"\",\"\"_$Data$_.New\"\"); \r\n\t\tСтруктураОтбора.Вставить(\"\"Удаление\"\",\"\"_$Data$_.Delete\"\");\r\n\t\tСтруктураОтбора.Вставить(\"\"УдалениеПредопределенныхДанных\"\",\"\"_$Data$_.DeletePredefinedData\"\");\r\n\t\tСтруктураОтбора.Вставить(\"\"ДобавлениеПредопределенныхДанных\"\",\"\"_$Data$_.NewPredefinedData\"\");\r\n\t\tСтруктураОтбора.Вставить(\"\"Проведение\"\",\"\"_$Data$_.Post\"\");\r\n\t\tСтруктураОтбора.Вставить(\"\"ОтменаПроведения\"\",\"\"_$Data$_.Unpost\"\");\r\n\t\tСтруктураОтбора.Вставить(\"\"Метаданные\"\",Метаданные.Документы.ПоступлениеТоваров);\t\r\n\t\tКолонки = \"\"Дата,ИмяПользователя,Данные\"\";\r\n\t\tВыгрузитьЖурналРегистрации(ТаблицаЖурнала,СтруктураОтбора,Колонки);\r\n\r\n\t\t//3. получение макета компановки данных\r\n\t\tКомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;\r\n\t\tМакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);\r\n\t\t\r\n\t\t//4. получение результата отчета (выполнение компановки)\r\n\t\tВнешниеНаборыДанных = Новый Структура(\"\"ЖурналРегистрации\"\",ТаблицаЖурнала);  \r\n\t\t\r\n\t\tПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;\r\n\t\tПроцессорКомпановки.Инициализировать(МакетКомпановки,ВнешниеНаборыДанных);\r\n\t\t\r\n\t\t//5. вывод результата компановки\r\n\t\tПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;\r\n\t\tПроцессорВывода.УстановитьДокумент(ДокументРезультат);\r\n\t\tПроцессорВывода.Вывести(ПроцессорКомпановки);\r\n"
      },
      {
        "name": "ОтчетОткрытиеОтчетаИзФормыОбъекта(Пример список номенклатуры)",
        "type": "template",
        "content": "// Сформировали отчет с использованием СКД по нужным условиям\r\n//далее в форме нужного объекта (пример спр номенклатура форма списка) формируем кнопку для вывода отчета\r\n\r\n&НаКлиенте\r\nПроцедура СписокНоммменклатуры(Команда)\r\n\tРезультат = ВывестиСписокНоменклатуры();  \r\n\tРезультат.ОтображатьСетку = Ложь;\r\n\tРезультат.ОтображатьЗаголовки = Ложь;\r\n\tРезультат.Показать();\r\nКонецПроцедуры\r\n\r\n// Функция ВывестиСписокНоменклатуры() описывает логику обращения на выполнение к сосданному отчету \r\n\r\n&НаСервереБезКонтекста\r\nФункция  ВывестиСписокНоменклатуры()\r\n\t//В качестве схемы компоновки данных используем макет отчета \"\"СписокНоменклатуры\"\"\r\n\tСхемаКомпановкиДанных = Отчеты.Пример4СписокНоменклатуры.ПолучитьМакет(\"\"ОсновнаяСхемаКомпоновкиДанных\"\");\r\n\t// получим настройки по умолчанию\r\n\tНастройки = СхемаКомпановкиДанных.НастройкиПоУмолчанию;\r\n\t\r\n\t//Сформируем макет компановки данных\r\n\tКомпановщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;\r\n\tМакетКомпанови = КомпановщикМакета.Выполнить(СхемаКомпановкиДанных,Настройки);\r\n\t\r\n\t//Выводим компановку данных\r\n\tПроцессорКомпановкиДанных = Новый ПроцессорКомпоновкиДанных;\r\n\tПроцессорКомпановкиДанных.Инициализировать(МакетКомпанови);\r\n\t\r\n\t//Выведем результат компановки в табличный документ\r\n\tДокументРезультат = Новый ТабличныйДокумент;\r\n\tПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;\r\n\tПроцессорВывода.УстановитьДокумент(ДокументРезультат);  \r\n\tПроцессорВывода.Вывести(ПроцессорКомпановкиДанных);\r\n\t\r\n\tВозврат ДокументРезультат;\r\nКонецФункции\t\r\n"
      },
      {
        "name": "Автомотическое формирование отчета",
        "type": "template",
        "content": " //Создаем форму отчета \r\n //Последовательность событий на форме до компановки результата отчета\r\n //Модуль_ФОРМЫ_ОТЧЕТА\r\n // ПриСозданииНаСервере()\r\n // ПередЗагрузкойВариантаНаСервере()\r\n // ПриЗагрузкеВариантаНаСервере()\r\n // ПередЗагрузкойПользовательскихНастроекНаСервере()\r\n // ПриЗагрузкеПользовательскихНастроекНаСервере()\r\n //Модуль_ОБЪЕКТА\r\n // ПриКомпоновкеРезультата()\r\n &НаСервере\r\n Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) \r\n\t//формирование отчета сразу при открытии формы отчета \r\n\tПараметры.СформироватьПриОткрытии=Истина;  \t\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ПриЗагрузкеВариантаНаСервере(Настройки)        \r\n\t//Задаем параметры настроек перед их загрузкой в компоновщик\r\n\tНастройки.ПараметрыВывода.УстановитьЗначениеПараметра(\"\"Заголовок\"\",\"\"Приход/Расход номенклатуры\"\");\r\n\tНастройки.параметрыДанных.УстановитьЗначениеПараметра(\"\"НачалоПериода\"\",'20190101');\r\n\tНастройки.параметрыДанных.УстановитьЗначениеПараметра(\"\"КонецПериода\"\",'20231231');\t\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)\r\n\t//перехватываем пользовательские настройки параметров\r\n\tНастройки.Элементы[0].Значение = '20190101';\r\n\tНастройки.Элементы[0].Использование = Истина;\r\n\tНастройки.Элементы[1].Значение = '20231231';\r\n\tНастройки.Элементы[1].Использование = Истина;\t\r\nКонецПроцедуры\r\n"
      }
    ]
  },
  {
    "name": "Работа с внешними файлами",
    "type": "folder",
    "children": [
      {
        "name": "Работа с Excel",
        "type": "folder",
        "children": [
          {
            "name": "Чтение_данных_из_таблицы",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//открываем таблицу C:\\tmp\\1.xlsx\r\nWorkBook = Excel.WorkBooks.Open(\"\"C:\\tmp\\1.xlsx\"\");\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nВсегоСтолбцов = 2;\r\n\r\nТаб = Новый ТаблицаЗначений;\r\nТаб.Колонки.Добавить(\"\"ИмяКолонки1\"\");\r\nТаб.Колонки.Добавить(\"\"ИмяКолонки2\"\");\r\n\r\n//считываем все данные в таблицу значений\r\nНомСтроки = 1;\r\nПока Истина Цикл\r\nКод = Sheet.Cells(НомСтроки, 1).Value;\r\n//прерываемся если значение первого\r\n//столбца пустое\r\nЕсли Код = Неопределено Тогда\r\nПрервать;\r\nКонецЕсли;\r\nЗначение = Sheet.Cells(НомСтроки, 1).Value;\r\n\r\nСтрока = Таб.Добавить();\r\nСтрока.Код = ИмяКолонки1;\r\nСтрока.Значение = ИмяКолонки2;\r\n\r\nНомСтроки = НомСтроки + 1;\r\nКонецЦикла;\r\n//Закрываем Excel\r\nExcel.ActiveWorkbook.Close();\r\n//закрываем таблицу"
          },
          {
            "name": "Форматирования_текста",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nSheet.Cells(2, 2).Value = \"\"Текст\"\";\r\n//название шрифта\r\nSheet.Cells(2, 2).Font.Name = \"\"Verdana\"\";\r\n//размер шрифта\r\nSheet.Cells(2, 2).Font.Size = 16;\r\n//жирный шрифт - 1, обычный - 0\r\nSheet.Cells(2, 2).Font.Bold = 1;\r\n//курсив - 1, обычный - 0\r\nSheet.Cells(2, 2).Font.Italic = 1;\r\n//подчеркнутый - 2, обычный - 1\r\nSheet.Cells(2, 2).Font.Underline = 2;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Рамки_вокруг_ячеек",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//все рамки толкой, сплошной линией\r\nRange = Sheet.Range(\r\nSheet.Cells(2, 2),\r\nSheet.Cells(3, 3));\r\nRange.Borders.Linestyle = 1;\r\n\r\n//внешние рамки толстой, сплошной\r\nRange = Sheet.Range(\r\nSheet.Cells(2, 5),\r\nSheet.Cells(3, 6));\r\nДля Н = 1 По 4 Цикл\r\nRange.Borders(Н).Linestyle = 1;\r\nRange.Borders(Н).Weight = 4;\r\nКонецЦикла;\r\n//внутренние рамки средней прерывистой\r\nДля Н = 11 По 12 Цикл\r\nRange.Borders(Н).Linestyle = -4115;\r\nRange.Borders(Н).Weight = -4138;\r\nКонецЦикла;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Перенос_текста_по_словам",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nSheet.Cells(1, 1).Value =\r\n\"\"Очень днинный текст\"\";\r\nSheet.Cells(1, 1).RowHeight = 45;\r\nSheet.Cells(1, 1).WrapText = Истина;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Открытие_таблицы",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//открываем таблицу C:\\tmp\\1.xlsx\r\nWorkBook = Excel.WorkBooks.Open(\"\"C:\\tmp\\1.xlsx\"\");\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Определение_формата_ячейки",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//задаем значение и числовой формат ячейки\r\nSheet.Cells(1, 1).Value = 1000000;\r\nSheet.Cells(1, 1).NumberFormat = \"\"# ##0.00\"\";\r\n\r\n//задаем значение и строковый формат ячейки\r\nSheet.Cells(1, 3).NumberFormat = \"\"@\"\";\r\nSheet.Cells(1, 3).Value = \"\"112233445566778899\"\";\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Объеденение_ячеек",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nSheet.Cells(1, 1).Value =\r\n    \"\"Очень длинный заголовок\"\";\r\n\r\n//объединяем с 1-й по 3-ю ячейки\r\n//первой строки\r\nSheet.Range(\r\n    Sheet.Cells(1, 1),\r\n    Sheet.Cells(1, 3)).Merge();\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Изминение_ширины_столбцов",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//задаем ширину первых 5-ти столбцов\r\nДля Н = 1 По 5 Цикл\r\n    Sheet.Columns(Н).ColumnWidth = Н * 10;\r\nКонецЦикла;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Изменение цвета ячеек",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nSheet.Cells(2, 2).Value = \"\"Текст\"\";\r\n//желтый цвет текста\r\nSheet.Cells(2, 2).Font.Color = -16711681;\r\n//черный цвет фона\r\nSheet.Cells(2, 2).Interior.Color = 526344;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Изменение_ориентации_листа",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//1 - книжная, 2- альбомная\r\nSheet.PageSetup.Orientation = 2;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Изменение_имени_листа",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//задаем имя листа Excel\r\nSheet.Name = \"\"НовоеИмя\"\";\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Изменение_высоты_строк",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//меняем высоту первой строки\r\nSheet.Rows(1).RowHeight = 30;\r\n\r\n//меняем высоту со 2-й по 5-ю\r\nRange = Sheet.Range(\r\n    Sheet.Cells(2, 1),\r\n    Sheet.Cells(5, 1));\r\nRange.RowHeight = 10;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Задание_отступов_для_печати",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//задаем левый отспут 3 см\r\nSheet.PageSetup.LeftMargin =\r\n    Excel.CentimetersToPoints(3);\r\n//RightMargin - правый отступ\r\n//TopMargin - верхний отступ\r\n//BottomMargin - нижний отступ\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Выравнивание_текста_в_ячейке",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nSheet.Cells(2, 2).Value = \"\"Текст\"\";\r\nSheet.Columns(2).ColumnWidth = 100;\r\nSheet.Rows(2).RowHeight = 100;\r\n\r\n//по центру по вертикли\r\n//левое - 1, правое - 3\r\nSheet.Cells(2, 2).VerticalAlignment = 2;\r\n//по центру по горизонтали\r\n//верхнее - 2, нижнее - 4 \r\nSheet.Cells(2, 2).HorizontalAlignment = 3;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Выгрузка_данных_в_таблицу",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//таблица значений, выгружаемая в Excel\r\nТаб = ПолучитьТабЗначений();\r\n\r\n//переносим заголовки столбцов\r\nНомСтолбца = 1;\r\nНомСтроки = 1;\r\nДля Каждого Колонка Из Таб.Колонки Цикл\r\n    Sheet.Cells(НомСтроки, НомСтолбца).Value = Колонка.Имя;\r\n    НомСтолбца = НомСтолбца + 1;\r\nКонецЦикла;\r\n\r\n//переносим данные\r\nКоличество = Таб.Колонки.Количество();\r\nДля Каждого Строка из Таб Цикл\r\n    НомСтроки = НомСтроки + 1;\r\n    Для Н = 0 По Количество - 1 Цикл\r\n        Sheet.Cells(НомСтроки, Н + 1).Value = Строка[Н];\r\n    КонецЦикла;\r\nКонецЦикла;\r\n\r\n//сохраняем таблицу\r\nWorkBook.SaveAs(\"\"C:\\tmp\\2.xlsx\"\");\r\n\r\n//закрываем таблицу\r\nExcel.Application.Quit();\r\n\r\n\r\n&НаСервере\r\nФункция ПолучитьТабЗначений()\r\n    Таб = Новый ТаблицаЗначений;\r\n    Таб.Колонки.Добавить(\"\"Код\"\");\r\n    Таб.Колонки.Добавить(\"\"Значение\"\");\r\n\r\n    Строка = Таб.Добавить();\r\n    Строка.Код = 1;\r\n    Строка.Значение = \"\"Один\"\";\r\n\r\n    Строка = Таб.Добавить();\r\n    Строка.Код = 2;\r\n    Строка.Значение = \"\"Два\"\";\r\n\r\n    Возврат Таб;\r\nКонецФункции"
          },
          {
            "name": "Вставка_формул",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\nДля Н = 1 По 5 Цикл\r\n    Sheet.Cells(Н, 1).Value = Н * 2;\r\n    Sheet.Cells(Н, 2).Value = Н * 3;\r\nКонецЦикла;\r\n\r\n//формула с прямыми ссылками на ячейки\r\nSheet.Cells(6, 1).Formula = \"\"=sum(A1:A5)\"\";\r\n\r\n//формула с относительними ссылками на ячейки\r\nSheet.Cells(6, 2).Formula = \"\"=sum(R[-1]C:R[-5]C)\"\";\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Вставка_массива_данных",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//заполняем массив таблицей умножения   \r\ndata = Новый COMSafeArray(\"\"VT_VARIANT\"\", 9, 9);\r\nДля Н1 = 1 По 9 Цикл\r\n    Для Н2 = 1 По 9 Цикл\r\n        data.SetValue(Н1 - 1, Н2 - 1, Н1 * Н2);\r\n    КонецЦикла;\r\nКонецЦикла;\r\n\r\n//выгружаем массив в Excel\r\n//вставка массива происходит значительно\r\n//быстрее, чем заполнение отдельных ячеек\r\nRange = Sheet.Range(\r\n    Sheet.Cells(1, 1),\r\n    Sheet.Cells(9, 9));\r\nRange.Value = data;\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Автоопределение_ширины_столбцов",
            "type": "template",
            "content": "//создаем объект для работы с Excel\r\nExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\n\r\n//создаем новую таблицу\r\nWorkBook = Excel.WorkBooks.Add();\r\n\r\n//получаем доступ к первому листу таблицы\r\nSheet = WorkBook.WorkSheets(1);\r\n\r\n//заносим информацию в ячейки\r\nстрока = \"\"\"\";\r\nДля н = 1 По 9 Цикл\r\n    строка = строка + н;\r\n    Sheet.Cells(1, н).Value = строка;\r\nКонецЦикла;\r\n\r\n//автоопределение ширины первого столбца\r\nSheet.Columns(1).AutoFit();\r\n\r\n//автоопределение ширины со 2-го по 9-й\r\nRange = Sheet.Range(\r\n    Sheet.Cells(1, 2),\r\n    Sheet.Cells(1, 9));\r\nRange.EntireColumn.AutoFit();\r\n\r\n//показываем документ на экране\r\nExcel.Visible = Истина;"
          },
          {
            "name": "Получение списка имён листов",
            "type": "template",
            "content": "Эксель = новый COMОбъект(\"\"Excel.Application\"\");\r\nКнига = Эксель.WorkBooks.Open(\"\"C:\\file.xls\"\");\r\nКоличествоЛистов = Книга.Sheets.Count;\r\nМассивИмёнЛистов = новый Массив;\r\nдля сс = 1 По КоличествоЛистов Цикл\r\n    МассивИмёнЛистов.Добавить(Книга.Sheets(сс).Name);\r\nКонецЦикла;\r\nЭксель.Application.Quit();\r\n//\r\n//использование\r\nЛистЕксель = МассивИмёнЛистов[0];\r\nЛист = Книга.WorkSheets(ЛистЕксель);"
          },
          {
            "name": "Определяем количество заполненных строк и колонок",
            "type": "template",
            "content": "//Получим количество строк и колонок.\r\n//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel\r\nВерсия = Лев(Excel.Version,Найти(Excel.Version,\"\".\"\")-1);\r\nЕсли Версия = \"\"8\"\" тогда\r\nФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;\r\nФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);\r\nИначе\r\nФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;\r\nФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;\r\nКонецесли;"
          },
          {
            "name": "Закрыть Excel в 1С после считывания данных",
            "type": "template",
            "content": "  Excel.DisplayAlerts = 0; \r\n  Excel.Quit();\r\n  Excel.DisplayAlerts = 1;"
          }
        ]
      },
      {
        "name": "Работа с Word",
        "type": "folder",
        "children": [
          {
            "name": "Вставка_текста",
            "type": "template",
            "content": ""
          },
          {
            "name": "Выделение_текста",
            "type": "template",
            "content": ""
          },
          {
            "name": "Выравнивание_текста",
            "type": "template",
            "content": ""
          },
          {
            "name": "Замена_текста",
            "type": "template",
            "content": ""
          },
          {
            "name": "Открытие_документа",
            "type": "template",
            "content": ""
          },
          {
            "name": "Преобразование_в_Таблицу",
            "type": "template",
            "content": ""
          },
          {
            "name": "Создание_документа",
            "type": "template",
            "content": ""
          },
          {
            "name": "Сохранение_документа",
            "type": "template",
            "content": ""
          },
          {
            "name": "Удаление_текста",
            "type": "template",
            "content": "//создаем объект для работы с Word\r\nWord = Новый COMОбъект(\"\"Word.Application\"\");\r\n\r\n//создаем новый документ\r\nDoc = Word.Documents.Add();\r\n\r\n//добавляем параграф\r\nPar = Doc.Paragraphs.Add();\r\nPar.Range.InsertBefore(\"\"Некоторый текст\"\");\r\n\r\n//удаляем слово некоторый и пробел\r\nRange = Doc.Range(0, 10);\r\nRange.Text = \"\"\"\";\r\n\r\n//показываем документ на экране\r\nWord.Visible = Истина;"
          },
          {
            "name": "Форматирование_текста",
            "type": "template",
            "content": "//создаем объект для работы с Word\r\nWord = Новый COMОбъект(\"\"Word.Application\"\");\r\n\r\n//создаем новый документ\r\nDoc = Word.Documents.Add();\r\n\r\n//добавляем параграф\r\nPar = Doc.Paragraphs.Add();\r\nPar.Range.InsertBefore(\"\"Форматируем этот текст\"\");\r\n//меняем размер шрифта\r\nPar.Range.Font.Size = 15;\r\n//меняем название шрифта\r\nPar.Range.Font.Name = \"\"Verdana\"\";\r\n\r\n//выбираем слово \"\"этот\"\"\r\nRange = Doc.Range(12, 16);\r\n//меняем шрифт на ширный\r\nRange.Font.Bold = Истина;\r\n//курсив\r\nRange.Font.Italic = Истина;\r\n//подчеркнутый\r\nRange.Font.Underline = Истина;\r\n//красный\r\nRange.Font.Color = 13311;\r\n\r\n//показываем документ на экране\r\nWord.Visible = Истина;"
          },
          {
            "name": "Чтение_текста_документа",
            "type": "template",
            "content": "//создаем объект для работы с Word\r\nWord = Новый COMОбъект(\"\"Word.Application\"\");\r\n\r\n//открываем документ C:\\tmp\\1.docx\r\nDoc = Word.Documents.Open(\"\"C:\\tmp\\1.docx\"\");\r\n\r\n//читаем весь текст документа\r\nText = doc.Content.Text;\r\nСообщить(Text);\r\n\r\n//читаем с 6-го по 10-й символ\r\nFrom = 6;\r\nTo = 10;\r\nRange = Doc.Range(From, To);\r\nText = Range.Text;\r\nСообщить(Text);\r\n\r\n//закрыть документ\r\nDoc.Close();\r\nWord.Quit();"
          }
        ]
      },
      {
        "name": "ДиалогВыбораФайла",
        "type": "folder",
        "children": [
          {
            "name": "ДиалогВыбораФайла",
            "type": "template",
            "content": "//Открываем стандартный диалог Windows выбора каталога/файла в режиме выбора каталога\r\nДиалог = Новый \r\nДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);\r\n//Если пользователь не нажал кнопку ОТМЕНА в диалоге\r\nЕсли Диалог.Выбрать() Тогда\r\n      ИмяКаталога = Диалог.Каталог;\r\nКонецЕсли;\r\nСообщить(ИмяКаталога);\r\n"
          },
          {
            "name": "ДиалогВыбораФайла2",
            "type": "template",
            "content": " //Открываем стандартный диалог Windows выбора каталога/файла в режиме выбора файла на сохранение\r\nДиалог = Новый \r\nДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);\r\n//каталог по-умолчанию, можно не указывать\r\nДиалог.Каталог = \"\"C:\\\"\";\r\n//фильтр для одного вида файлов, для нескольких – см. следующий пример\r\nДиалог.Фильтр = \"\"Текстовый файл (*.txt)|*.txt|\"\";      //\"\"Документ Excel (*.xls, *.xlsx)|*.xls;*.xlsx|\"\"\r\n//Если пользователь не нажал кнопку ОТМЕНА в диалоге\r\nЕсли Диалог.Выбрать() Тогда\r\n//Полное имя файла – с учетом «пути к нему» (имени каталога к нему)\r\n    ИмяФайла = Диалог.ПолноеИмяФайла;\r\nКонецЕсли;\r\nСообщить(ИмяФайла);\r"
          }
        ]
      },
      {
        "name": "Работы с файлами",
        "type": "folder",
        "children": [
          {
            "name": "Операции над файлами",
            "type": "folder",
            "children": []
          },
          {
            "name": "НачатьПоискФайлов",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура АсинхронныеМетоды()\r\n \r\n ОбратныйВызов = Новый ОписаниеОповещения(\"\"ОбработкаЗавершения\"\", ЭтотОбъект, \"\"доп. параметры\"\", \"\"ОбработкаОшибки\"\", ЭтотОбъект); \r\n \r\n //поищем файлы в папке tmp\r\n НачатьПоискФайлов(ОбратныйВызов, \"\"D:\\tmp\"\", \"\"*.*\"\");\r\n \r\nКонецПроцедуры\r\n// разместить на форме где работают  \r\n&НаКлиенте\r\nПроцедура ОбработкаЗавершения(НайденныеФайлы, ДополнительныеПараметры) Экспорт\r\n \r\n //выводим список найденых файлов\r\n Для Каждого Файл Из НайденныеФайлы Цикл\r\n Сообщить(Файл.ПолноеИмя);\r\n КонецЦикла; \r\n \r\n //дополнительный параметр указанный в описании оповещения\r\n Сообщить(ДополнительныеПараметры);\r\n \r\nКонецПроцедуры\r\n \r\n&НаКлиенте\r\nПроцедура ОбработкаОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт\r\n \r\n Сообщить(\"\"Ошибка поиска файлов: \"\" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));\r\n \r\n Сообщить(ДополнительныеПараметры);\r\n \r\nКонецПроцедуры"
          }
        ]
      }
    ]
  },
  {
    "name": "Формы",
    "type": "folder",
    "children": [
      {
        "name": "Временное хранилище",
        "type": "folder",
        "children": [
          {
            "name": "Передача_с_сервера_на_форму",
            "type": "template",
            "content": "&НаКлиенте\r\n//Получаем с сервера адрес врем. хранилища\r\nАдрес = ПолучитьАдресСтруктуры();\r\n//Получаем по адреу значение\r\nМонитор = ПолучитьИзВременногоХранилища(Адрес);\r\n//Используем значение на клиенте\r\nСообщить(Монитор.Контрастность);\r\n\r\n&НаСервереБезКонтекста\r\n\r\nФункция ПолучитьАдресСтруктуры()\r\n    //Создаем структуру\r\n    Монитор = Новый Структура(\r\n        \"\"Диагональ,Контрастность,Матрица\"\",\r\n        23, \"\"1000:1\"\", \"\"IPS\"\");\r\n    //Помещаем во врем. хранилище\r\n    Адрес = ПоместитьВоВременноеХранилище(Монитор);\r\n\t//Возвращаем адрес\r\n    Возврат Адрес;\r\n\r\nКонецФункции"
          },
          {
            "name": "Между_серверными_вызовами",
            "type": "template",
            "content": "//Получаем с сервера адрес врем. хранилища\r\nАдрес = ПолучитьАдресТаблицы();\r\n//Передаем адрес в серверную процедуру\r\nОбработкаТаблицы(Адрес);\r\n\r\n&НаСервереБезКонтекста\r\n\r\nФункция ПолучитьАдресТаблицы()\r\n    //Создаем таблицу значений\r\n    Товары = Новый ТаблицаЗначений;\r\n    Товары.Колонки.Добавить(\"\"Товар\"\");\r\n    Товары.Колонки.Добавить(\"\"Цена\"\");\r\n    Товар = Товары.Добавить();\r\n    Товар.Товар = \"\"Чайник\"\";\r\n    Товар.Цена = 2500.5;\r\n    //Помещаем во врем. хранилище\r\n    Возврат ПоместитьВоВременноеХранилище(Товары);\r\nКонецФункции\r\n\r\n\r\n&НаСервереБезКонтекста\r\n\r\nПроцедура ОбработкаТаблицы(Адрес)\r\n\r\n    //Получаем по адресу значение\r\n\r\n    Товары = ПолучитьИзВременногоХранилища(Адрес);\r\n\r\n    //Работаем с таблицей значений\r\n\r\n    Сообщить(Товары.Количество());\r\n\r\nКонецПроцедуры"
          }
        ]
      },
      {
        "name": "Настройки отображения формы",
        "type": "folder",
        "children": [
          {
            "name": "Изменение_высоты_и_ширины",
            "type": "template",
            "content": "//Получаем форму создания новой записи регистра сведений \"\"Цены\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрСведений.Цены.ФормаЗаписи\"\");\r\n//Показываем форму\r\nФорма.Открыть();\r\n//Меняем высоту и ширину\r\nФорма.Высота = 15;\r\nФорма.Ширина = 15;"
          },
          {
            "name": "Изменение_группировки_элементов",
            "type": "template",
            "content": "//Получаем форму создания новой\r\n//записи регистра сведений \"\"Цены\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрСведений.Цены.ФормаЗаписи\"\");\r\n//Показываем форму\r\nФорма.Открыть();\r\n//Меняем группировку элементов формы на горизонтальную\r\nФорма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;"
          },
          {
            "name": "Изменение_доступности_формы",
            "type": "template",
            "content": "//Получаем форму создания новой\r\n//записи регистра сведений \"\"Цены\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрСведений.Цены.ФормаЗаписи\"\");\r\n//Показываем форму\r\nФорма.Открыть();\r\n//Блокируем дуступ к элементам формы\r\nФорма.Доступность = Ложь;"
          }
        ]
      },
      {
        "name": "Открытие формы",
        "type": "folder",
        "children": [
          {
            "name": "Открыть_объект_с_оповещением",
            "type": "template",
            "content": "//Получаем склад \"\"Основной\"\"\r\nСклад = ПолучитьОсновнойСклад();\r\n//Указываем процедуру, вызываемую\r\n//при изменении реквизитов склада\r\nОповещение = Новый ОписаниеОповещения(\r\n    \"\"ОбработатьРезультат\"\", ЭтотОбъект);\r\n//Отображаем форму склада\r\nПоказатьЗначение(Оповещение, Склад);\r\n//Процедура обработки изменений\r\n&НаКлиенте\r\nПроцедура ОбработатьРезультат(Склад) Экспорт\r\n       Сообщить(Склад);\r\nКонецПроцедуры"
          },
          {
            "name": "Открыть_форму",
            "type": "template",
            "content": "//Способ №1\r\nОткрытьФорму(\"\"Справочник.Сотрудники.ФормаСписка\"\");\r\n//Способ №2\r\nФорма = ПолучитьФорму(\"\"Справочник.Сотрудники.ФормаСписка\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Открыть_форму_выбора",
            "type": "template",
            "content": ""
          },
          {
            "name": "Открыть_форму_Модально",
            "type": "template",
            "content": "//Способ №1\r\nОткрытьФормуМодально(\"\"Справочник.Сотрудники.ФормаСписка\"\");\r\n//Способ №2\r\nФорма = ПолучитьФорму(\"\"Справочник.Сотрудники.ФормаСписка\"\");\r\nФорма.ОткрытьМодально();"
          },
          {
            "name": "Открыть_форму_объекта",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ПоказатьОсновнойСклад() Экспорт\r\n    //Получаем склад \"\"Основной\"\"\r\n    Склад = ПолучитьОсновнойСклад();\r\n    ПоказатьЗначение(, Склад);\r\n\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nФункция ПолучитьОсновнойСклад()\r\n    Возврат Справочники.Склады.Основной;\r\nКонецФункции"
          },
          {
            "name": "Открыть_форму_с_отбором",
            "type": "template",
            "content": "Отбор = Новый Структура;\r\nОтбор.Вставить(\"\"Должность\"\", \"\"Матрос\"\");\r\nПараметры = Новый Структура(\"\"Отбор\"\", Отбор);\r\n//Открываем форму списка справочника сотрудники\r\n//с отбором по должности \"\"Матрос\"\"\r\nОткрытьФорму(\"\"Справочник.Сотрудники.ФормаСписка\"\", Параметры);"
          },
          {
            "name": "Передача параметров в управляемые формы",
            "type": "template",
            "content": "//В месте получения формы \r\nПараметрыСтруктура = Новый Структура(\"\"НовыйПараметр\"\",ПоследнийЭлемент);\r\nФормаВыбора = ПолучитьФорму(\"\"Справочник.Номенклатура.ФормаВыбора\"\",ПараметрыСтруктура);\r\n\r\n//В модуле управляемой формы  \r\n\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n    Если Параметры.Свойство(\"\"НовыйПараметр\"\") Тогда\r\n        // здесь код обработки параметра\r\n    КонецЕсли;\r\nКонецПроцедуры"
          },
          {
            "name": "Передача параметров в обычные формы",
            "type": "template",
            "content": "Форма = Объект.ПолучитьФорму(\"\"ФормаВыбора\"\",ВладелецФормы, КлючУникальности);\r\nФорма.Параметр = ЗначениеПараметра;\r\nФорма.Открыть();"
          },
          {
            "name": "Как открыть общую форму?",
            "type": "template",
            "content": "//Здесь ОбщаяФорма - это стандартное указание на одну из общих форм, \r\n//а МояОбщаяФорма – это имя общей формы, созданной в конфигураторе. \r\nОткрытьФорму(\"\"ОбщаяФорма.МояОбщаяФорма\"\"); \r\n//ИЛИ\r\nФрм=ПолучитьФорму(\"\"ОбщаяФорма.ФормаВыбораНоменклатуры\"\",);\r\nФрм.Открыть();\r\n"
          },
          {
            "name": "Получить параметры из закрываемой формы",
            "type": "template",
            "content": "//Пишем в модуле формы в методе ПриЗакрытии()\r\n// параметры получаемые формой — родителем в структуру и передать через функцию  ОповеститьОВыборе()  \r\n&НаКлиенте\r\nПроцедура ПриЗакрытии(ЗавершениеРаботы)\r\n\tСтруктураВозврата = Новый Структура();\r\n\tСтруктураВозврата.Вставить(\"\"Глава\"\",Глава);\r\n\tСтруктураВозврата.Вставить(\"\"Счетчик\"\",Счетчик); \r\n\t\r\n\tОповеститьОВыборе(СтруктураВозврата);\r\nКонецПроцедуры     \r\n\r\n// в форме родителя пишем метод   ОбработкаВыбора()\r\n&НаКлиенте\r\nПроцедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)\r\n\tГлава = ВыбранноеЗначение.Глава;\r\n\tСчетчик = ВыбранноеЗначение.Счетчик;\r\n\t\r\nКонецПроцедуры\r\n\r\n"
          }
        ]
      },
      {
        "name": "Получить форму",
        "type": "folder",
        "children": [
          {
            "name": "Форма_документа",
            "type": "template",
            "content": "//Получаем форму списка документа \"\"ОказаниеУслуги\"\"\r\nФорма = ПолучитьФорму(\"\"Документ.ОказаниеУслуги.ФормаСписка\"\");\r\nФорма.Открыть();\r\n//Получаем форму создания нового\r\n//документа ПриходнаяНакладная\r\nФорма = ПолучитьФорму(\"\"Документ.ПриходнаяНакладная.ФормаОбъекта\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_констант",
            "type": "template",
            "content": "//Форма констант должна быть определена в\r\n//конфигурации в разделе:\r\n//Общие->Общие формы\r\nФорма = ПолучитьФорму(\"\"ОбщаяФорма.ФормаКонстант\"\");\r\nФорма.Открыть();\r\n//Форма константы \"\"Экспонента\"\"\r\nФорма = ПолучитьФорму(\"\"Константа.Экспонента.ФормаКонстант\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_отчета",
            "type": "template",
            "content": "//Форма отчета \"\"Перерасчет\"\"\r\nФорма = ПолучитьФорму(\"\"Отчет.Перерасчет.Форма\"\");\r\nФорма.Открыть();\r\n//Форма настроек отчета \"\"Перерасчет\"\"\r\nФорма = ПолучитьФорму(\"\"Отчет.Перерасчет.ФормаНастроек\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_плана-счетов",
            "type": "template",
            "content": "//Получаем форму списка плана счетов \"\"Основной\"\"\r\nФорма = ПолучитьФорму(\"\"ПланСчетов.Основной.ФормаСписка\"\");\r\nФорма.Открыть();\r\n//Получаем форму создания нового\r\n//счета плана счетов \"\"Основной\"\"\r\nФорма = ПолучитьФорму(\"\"ПланСчетов.Основной.ФормаОбъекта\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_регистра_бугалтерии",
            "type": "template",
            "content": "//Форма регистра бухгалтерии \"\"Управленческий\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрБухгалтерии.Управленческий.ФормаСписка\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_регистра_накопления",
            "type": "template",
            "content": "//Форма регистра накоплений \"\"ОстаткиМатериалов\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрНакопления.ОстаткиМатериалов.ФормаСписка\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_регистра_расчета",
            "type": "template",
            "content": "//Форма регистра расчета \"\"Начисления\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрРасчета.Начисления.ФормаСписка\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_регистра_сведений",
            "type": "template",
            "content": "//Форма регистра сведений \"\"Цены\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрСведений.Цены.ФормаСписка\"\");\r\nФорма.Открыть();\r\n//Получаем форму создания новой\r\n//записи регистра сведений \"\"Цены\"\"\r\nФорма = ПолучитьФорму(\"\"РегистрСведений.Цены.ФормаЗаписи\"\");\r\nФорма.Открыть();"
          },
          {
            "name": "Форма_справочника",
            "type": "template",
            "content": "//Получаем форму списка справочника \"\"Сотрудники\"\"\r\nФорма = ПолучитьФорму(\"\"Справочник.Сотрудники.ФормаСписка\"\");\r\nФорма.Открыть();\r\n//Получаем форму создания нового элемента\r\n//справочника Склады\r\nФорма = ПолучитьФорму(\"\"Справочник.Склады.ФормаОбъекта\"\");\r\nФорма.Открыть();\r\n//Получаем форму создания новой группы\r\n//справочника Номенклатура\r\nПараметры = Новый Структура(\"\"ЭтоГруппа\"\", Истина);\r\nФорма = ПолучитьФорму(\r\n    \"\"Справочник.Номенклатура.ФормаГруппы\"\",\r\n    Параметры);\r\nФорма.Открыть();"
          }
        ]
      },
      {
        "name": "Работа с реквезитами",
        "type": "folder",
        "children": [
          {
            "name": "Работа_с_реквезитами",
            "type": "template",
            "content": "//Стандартные реквизиты на примере\r\n//работы с формой документа\r\nДата = Объект.Дата;\r\nНомер = Объект.Номер;\r\nСообщить(Номер + \"\" от \"\" + Дата);\r\n//изменение значения дополнительного реквизита\r\nОбъект.Покупатель =  Справочники.Контрагенты.НайтиПоКоду(\"\"000000001\"\");"
          }
        ]
      },
      {
        "name": "Работа с табличной частью",
        "type": "folder",
        "children": [
          {
            "name": "Добавление_записи",
            "type": "template",
            "content": "Запись = Объект.<ИмяТаблицы>.Добавить();\r\n\r\nЗапись.<ИмяРеквезита> = Справочники.<ИмяСправочника>.НайтиПоКоду(\"\"000000008\"\");\r\n\r\nЗапись.<ИмяРеквезита> = 5;\r\n\r\nЗапись.<ИмяРеквезита> = 2;"
          },
          {
            "name": "Перебор_Записей",
            "type": "template",
            "content": "Для Каждого Строка Из Объект.Товары Цикл\r\n    Сообщить(Строка.Товар);\r\nКонецЦикла;"
          },
          {
            "name": "Поиск_строк",
            "type": "template",
            "content": "//Параметры поиска \"\"Цена = 5\"\"\r\nОтбор = Новый Структура;\r\nОтбор.Вставить(\"\"Цена\"\", 5);\r\n//Поиск строк\r\nСтроки = Объект.Товары.НайтиСтроки(Отбор);\r\n//Перебор найденных строк\r\n  Для Каждого Строка Из Строки Цикл\r\n    Сообщить(Строка.Товар);\r\nКонецЦикла;"
          },
          {
            "name": "Получить_количество_записей",
            "type": "template",
            "content": "Количество = Объект.Товары.Количество();\r\nСообщить(Количество);"
          },
          {
            "name": "Удаление-записи",
            "type": "template",
            "content": "Если Объект.Товары.Количество() > 0 Тогда\r\n    //Удаляем первую запись\r\n    Объект.Товары.Удалить(0);\r\nКонецЕсли;\r\n\r\n//Удаляем все записи\r\nОбъект.Товары.Очистить();"
          }
        ]
      },
      {
        "name": "Работа с формой на сервере",
        "type": "folder",
        "children": [
          {
            "name": "Реквезит_в_значение_и_обратно",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ОчиститьТаблицуТоваров()\r\n\r\n //Получаем объект документа\r\n ДокОбъект = РеквизитФормыВЗначение(\"\"Объект\"\");\r\n //Работаем с объектом, например,\r\n //вызывая его метод:\r\n ДокОбъект.ОчиститьТаблицуТоваров();\r\n //Если объект изменен, то передаем объект обратно на форму\r\n ЗначениеВРеквизитФормы(ДокОбъект, \"\"Объект\"\");\r\n\r\nКонецПроцедуры\r\n\r\n\r\n//модуль объекта документа\r\n\r\nПроцедура ОчиститьТаблицуТоваров() Экспорт \r\n\r\n   ЭтотОбъект.Товары.Очистить();\r\n\r\nКонецПроцедуры"
          },
          {
            "name": "Данные_формы_в_значение",
            "type": "template",
            "content": "//Модуль формы документа\r\n&НаКлиенте\r\nПроцедура Очистить(Команда)\r\n    ОбъектФормы = Объект;\r\n    ОчиститьТовары(ОбъектФормы);\r\n\tКопироватьДанныеФормы(ОбъектФормы, Объект)\r\nКонецПроцедуры\r\n\r\n\r\n&НаСервереБезКонтекста\r\n\r\nПроцедура ОчиститьТовары(ОбъектФормы)\r\n\r\n    //Получаем объект документа\r\n\t//ДанныеФормыВЗначение, в отличии от\r\n    //РеквизитФормыВЗначение может работать\r\n    //без контекста\r\n    ДокОбъект = ДанныеФормыВЗначение(ОбъектФормы,\r\n    Тип(\"\"ДокументОбъект.ТестовыйДокумент\"\"));\r\n    //Работаем с объектом, например,\r\n    //вызывая его метод:\r\n    ДокОбъект.ОчиститьТаблицуТоваров();\r\n    //Если объект изменен, то\r\n\t//передаем объект обратно на форму\r\n    ЗначениеВДанныеФормы(ДокОбъект, ОбъектФормы);\r\n\r\nКонецПроцедуры\r\n\r\n\r\n//модуль объекта документа\r\n\r\nПроцедура ОчиститьТаблицуТоваров() Экспорт\r\n\r\n    ЭтотОбъект.Товары.Очистить();\r\n\r\nКонецПроцедуры"
          }
        ]
      },
      {
        "name": "Кнопки",
        "type": "folder",
        "children": [
          {
            "name": "Множесмвенный выбор",
            "type": "template",
            "content": "//&НаКлиенте\r\n//Процедура <МножественныйВыборНазвание>(Команда)\r\n\tПараметрыФормы = Новый Структура(\"\"МножественныйВыбор\"\",Истина);\r\n\tОткрытьФорму(\"\"<Объект.НазваниеОбъекта.Форма.Название>\"\",ПараметрыФормы,Элементы.<Название>);\r\n//КонецПроцедуры\r\n//&НаКлиенте\r\n//Процедура <НазваниеОбработкаВыбора>(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)\r\n\t// обработка заполнения\r\n\tДля Каждого ВыбранныйЭлемент из ВыбранноеЗначение Цикл\r\n\t\tНоваяСтрока = Объект.<НазваниеОбъекта>.Добавить();\r\n\t\tНоваяСтрока.<НазваниеРеквезита> = ВыбранныйЭлемент;\r\n\tКонецЦикла\t\r\n//КонецПроцедуры\t\r\n"
          }
        ]
      },
      {
        "name": "Видимость реквезитов/элементов на форме",
        "type": "folder",
        "children": [
          {
            "name": "Видимость элемента",
            "type": "template",
            "content": "Элементы.ГруппаСчета.Видимость = Ложь;"
          },
          {
            "name": "Аналог F5 Обновить форму",
            "type": "template",
            "content": "  //аналог F5\r\n\tЭтаФорма.Элементы.Список.Обновить();"
          }
        ]
      },
      {
        "name": "Оформление формы",
        "type": "folder",
        "children": [
          {
            "name": "Условное оформление в управляемых формах",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура РаботаСУсловнымОформлениемУФ()\r\n\t// Для Добавления элемента УО в списке нужно обратится к списку и добавить элемент УО\r\n\tЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();\r\n\t// Для УО формы добавление происходит через прикладной объект УсловноеОформление:\r\n\tЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();\r\n\t//Для УО нам нужно задать условие отбора, задать значение свойства УО и добавить оформляемые поля.\r\n\t\r\n\t// Создаем условие отбора\r\n\tЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(\"\"ЭлементОтбораКомпоновкиДанных\"\"));\r\n\tЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля); // имя поля\r\n    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой\r\n\t//**** Значение для отбора\r\n\tЭлементОтбора.ПравоеЗначение = ЗначениеДляОтбора;\r\n\t// следует заметить что правым значением может выступать ПолеКомпоновкиДанных формы или списка\r\n\tЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);\r\n\t//****\r\n\tЭлементОтбора.Использование = Истина;\r\n\t\r\n\t// Установка значения элемента УО\r\n\t// Возможно обращение как по индексу так и установка через метод\r\n\t//1.\r\n\tЭлемент = ЭлементОформления.Оформление.Элементы[0];\r\n\tЭлемент.Значение = Цвет;\r\n\t//2.\r\n\tЭлементОформления.Оформление.УстановитьЗначениеПараметра(\"\"ЦветФона\"\", WebЦвета.СеребристоСерый);\r\n\r\n\tЭлемент.Использование = Истина;\r\n\t//Добавим поля оформления, если ничего не добавлять, то система применит оформления ко всей строке:\r\n\r\n\t// Создаем поля оформления\r\n\tПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();\r\n\tПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);\r\n\tПолеОформления.Использование = Истина;\r\nКонецПроцедуры\t"
          },
          {
            "name": "Программное добавление элементов условного оформления формы(Пример2)",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура УстановитьУсловноеОформление()         \r\n                УсловноеОформление.Элементы.Очистить();\r\n               \r\n                ЭлементОформления = УсловноеОформление.Элементы.Добавить();\r\n\r\n\r\n                ЭлементОформления.Оформление.УстановитьЗначениеПараметра(\"\"ТолькоПросмотр\"\", Истина);\r\n               \r\n               ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(\"\"ГруппаЭлементовОтбораКомпоновкиДанных\"\"));\r\n                ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;\r\n                ГруппаЭлементовОтбора.Использование = Истина;\r\n               \r\n                ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(\"\"ЭлементОтбораКомпоновкиДанных\"\"));\r\n               ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(\"\"АктивныйСчет\"\");  \r\n               ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   \r\n               ЭлементОтбора.ПравоеЗначение = Истина;   \r\n               ЭлементОтбора.Использование  = Истина;\r\n               \r\n                ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(\"\"ЭлементОтбораКомпоновкиДанных\"\"));\r\n               ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(\"\"Объект.грУсловияОплатыТаблица.Редактирование\"\");  \r\n               ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   \r\n               ЭлементОтбора.ПравоеЗначение = Ложь;      \r\n               ЭлементОтбора.Использование  = Истина;\r\n\r\n\r\n               ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();       \r\n               ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(\"\"грУсловияОплатыТаблица\"\");\r\n               ПолеОформления.Использование = Истина;\r\nКонецПроцедуры\r\nИсточник: https://career.i-neti.ru/1s-uf-programmnoe-dobavlenie-elementov-uslovnogo-oformleniya-formy"
          }
        ]
      },
      {
        "name": "Картинки",
        "type": "folder",
        "children": [
          {
            "name": "Разместить картинку на форме пропорционально",
            "type": "template",
            "content": "Элементы.НазваниеРеквезитаКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;"
          }
        ]
      },
      {
        "name": "Выбор файлов из папок(каталогов) в компьютере",
        "type": "folder",
        "children": [
          {
            "name": " Открытие диалога выбора каталога для загрузки файлов(синхронный режим)",
            "type": "template",
            "content": "//прописывается в предопределенных собыниях на форме НачалоВыбора\r\nПроцедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)\r\n\tФильтр=\"\"Все файлы(*.*)|*.*\"\";\t\r\n\tЗаголовокДиалога =\"\"Выберите путь для отображения файлов\"\";\r\n\tТекКаталог = КаталогЗагрузки;\r\n\tКаталогЗагрузки=ВыборФайловИКаталогов(\"\"Каталог\"\",Фильтр,ЗаголовокДиалога);\r\n\t\r\nКонецПроцедуры\r\n\r\nФункция ВыборФайловИКаталогов(Реж,Фильтр,Заголовок,Каталог=Неопределено) Экспорт\r\n\tРеквизитВвода = \"\"\"\";\r\n\tЕсли Реж=\"\"Файл\"\" Тогда\r\n\t\tРежим = РежимДиалогаВыбораФайла.Открытие;\r\n\tИначе\r\n\t\tРежим = РежимДиалогаВыбораФайла.ВыборКаталога;\r\n\tКонецЕсли; \r\n\tДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);\r\n\tДиалогОткрытияФайла.ПолноеИмяФайла = \"\"\"\";\r\n\t//Фильтр = НСтр(\"\"ru = 'Все файлы(*.*)'\"\");\r\n\tДиалогОткрытияФайла.Фильтр = Фильтр;\r\n\tДиалогОткрытияФайла.МножественныйВыбор = Ложь;\r\n\tЕсли Реж=\"\"Файл\"\" Тогда\r\n\t\tЕсли Каталог<>Неопределено Тогда\t\r\n\t\t\tДиалогОткрытияФайла.Каталог=Каталог;\t\r\n\t\tКонецЕсли; \r\n\tКонецЕсли; \r\n\t//ДиалогОткрытияФайла.Заголовок = НСтр(\"\"ru = 'Выберите каталог'\"\");\r\n\tЕсли ДиалогОткрытияФайла.Выбрать() Тогда\r\n\t\t\tЕсли Реж=\"\"Файл\"\" Тогда\r\n\t\t\t\tРеквизитВвода = ДиалогОткрытияФайла.ПолноеИмяФайла;\r\n\t\t\tИначе\r\n\t\t\t\tРеквизитВвода = ДиалогОткрытияФайла.Каталог;\r\n\t\t\tКонецЕсли; \r\n\tКонецЕсли;\r\n\tСтандартнаяОбработка = Ложь;\r\n\tВозврат РеквизитВвода;\r\nКонецФункции //ВыборФайловИКаталогов()\r\n"
          }
        ]
      },
      {
        "name": "Программное добавление элементов на управляемую форму",
        "type": "folder",
        "children": [
          {
            "name": "Добавление команды",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\t\r\n\t\r\n\t//Добавление команды формы\r\n\tКоманда = Команды.Добавить(\r\n\t\t\"\"ПоказатьПредупреждение\"\"); //Имя команды\r\n\tКоманда.Заголовок = \"\"Показать предупреждение\"\";\r\n\tКоманда.Действие  = \"\"КомандаПоказатьПредупреждение\"\"; //Имя связанной процедуры\r\n\t\r\n\t//Полный перечень свойств команды в синтакс-помощнике\r\n\t//\tИнтерфейс (управляемый)->Форма клиентского приложения->КомандаФормы\r\n\t\r\n\t//Добавление кнопки формы\r\n\tКнопкаФормы = Элементы.Добавить(\r\n\t\t\"\"КнопкаПоказатьПредупреждение\"\", //Имя кнопки\r\n\t\tТип(\"\"КнопкаФормы\"\"),             //Тип, всегда КнопкаФормы\r\n\t\tЭтаФорма);                      //Контейнер для кнопки (Форма, Группа, Командная панель)\r\n\t\t\r\n\tКнопкаФормы.ИмяКоманды = \"\"ПоказатьПредупреждение\"\"; //Связь с командой по имени\r\n\t\r\n\t//Возможные варианты вида кнопки:\r\n\t//\t-Гиперссылка\r\n\t//\t-ГиперссылкаКоманднойПанели\r\n\t//\t-КнопкаКоманднойПанели\r\n\t//\t-ОбычнаяКнопка\r\n\t//Если контейнер для формы - командная панель\r\n\t//то вид кнопки должен быть КнопкаКоманднойПанели\r\n\tКнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; \r\n\t\r\n\t//Полный перечень свойств кнопки формы в синтакс-помощнике\r\n\t//\tИнтерфейс (управляемый)->Кнопка формы\r\n\t\t\r\nКонецПроцедуры\r\n\r\n//Процедура вызываемая командой \"\"ПоказатьПредупреждение\"\"\r\n&НаКлиенте\r\nПроцедура КомандаПоказатьПредупреждение(Команда)\r\n\t\r\n\tПоказатьПредупреждение(, \"\"ОК!\"\");\r\n\t\r\nКонецПроцедуры"
          },
          {
            "name": "Добавление поля ввода",
            "type": "template",
            "content": "//Пример:\r\n//Добавление поля ввода для реквизита объекта \"\"Комментарий\"\"\r\n&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\t\t\r\n\tПолеВвода = Элементы.Добавить(\r\n\t\t\"\"Комментарий\"\",    //Имя элемента формы\r\n\t\tТип(\"\"ПолеФормы\"\"), //Тип, всегда ПолеФормы\r\n\t\tЭтаФорма);\t      //Контейнер для поля ввода (Форма,Группа,Страница)\r\n\t\t\r\n\tПолеВвода.Заголовок = \"\"Комментарий\"\";\r\n\tПолеВвода.Вид = ВидПоляФормы.ПолеВвода;\r\n\t\r\n\t//Установка связи элемента с данными\r\n\tПолеВвода.ПутьКДанным = \"\"Объект.Комментарий\"\";\r\n\t\r\n\t//Можно добавить обработчик события\r\n\t//См. синтакс-помощник чтобы узнать список событий\r\n\t// Интерфейс (управляемый) -> Поле формы -> ПолеФормы -> События\r\n\t// а так же остальные варианты расширения поля формы в зависимости от вида кнопки\r\n\t// Интерфейс (управляемый) -> Поле формы -> Расширение поля ввода -> События\r\n\t// и прочее\r\n\tПолеВвода.УстановитьДействие(\r\n\t\t\"\"ПриИзменении\"\", \t\t    //Имя события\r\n\t\t\"\"ПриИзмененииКомментария\"\"); //Имя процедуры обработчика\r\n\t\t\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ПриИзмененииКомментария(Элемент)\r\n\t\r\n\tСообщить(\"\"Поле \"\"\"\"Комментарий\"\"\"\" изменено!\"\");\r\n\t\r\nКонецПроцедуры"
          },
          {
            "name": "Добавление реквезита формы",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\t\r\n\t//Пример:\r\n\t//Добавление реквизита с именем \"\"АдресДоставки\"\", тип Строка\r\n\t\r\n\tДобавляемыеРеквизиты = Новый Массив;\r\n\t\r\n\tТипРеквизита = Новый ОписаниеТипов(\"\"Строка\"\");\r\n\t\r\n\tРеквизитФормы = Новый РеквизитФормы(\r\n\t\t\"\"АдресДоставки\"\",  //Имя реквизита формы\r\n\t\tТипРеквизита,     //Тип\r\n\t\t\"\"\"\",               //Путь  (Пусто, \"\"Объект\"\", ИмяТЧ)\r\n\t\t\t\t\t\t  // например \"\"Объект.Товары\"\"\t\r\n\t\t\"\"Адрес доставки\"\");//Заголовок\r\n\t\t\t\t\t\t  \t\t\t\t\t\t\t \r\n\tДобавляемыеРеквизиты.Добавить(РеквизитФормы);\r\n\t\r\n\t//Заставляем форму создать новые реквизиты\r\n\tИзменитьРеквизиты(ДобавляемыеРеквизиты);\r\n\t\r\n\t//Обращение к реквизиту формы из кода\r\n\tЭтаФорма.АдресДоставки = \"\"ул. Пушкина\"\";\r\n\t\r\n\t//Вывод реквизита на форму (при необходимости)\r\n\tПолеВвода = Элементы.Добавить(\"\"ФормаАдресДоставки\"\", Тип(\"\"ПолеФормы\"\"), ЭтаФорма);\r\n\tПолеВвода.Вид = ВидПоляФормы.ПолеВвода;\r\n\tПолеВвода.ПутьКДанным = \"\"АдресДоставки\"\";\r\n\t\r\nКонецПроцедуры"
          },
          {
            "name": "Добавление группы формы",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\t\r\n\t//Пример:\r\n\t//Добавление группы формы\r\n\t//Добавление элементов в группу формы\r\n\t\r\n\tГруппа = Элементы.Добавить(\r\n\t\t\"\"ГруппаШапка\"\",\r\n\t\tТип(\"\"ГруппаФормы\"\"),\r\n\t\tЭтаФорма);\r\n\t\t\r\n\tГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;\r\n\t\r\n\tГруппа.Заголовок = \"\"Реквизиты объекта:\"\";\r\n\t\r\n\t//Добавить поле ввода в группу\r\n\tПолеВвода = Элементы.Добавить(\"\"ФормаКомментарий\"\", Тип(\"\"ПолеФормы\"\"), Группа);\r\n\tПолеВвода.Вид = ВидПоляФормы.ПолеВвода;\r\n\tПолеВвода.ПутьКДанным = \"\"Объект.Комментарий\"\";\r\n\r\n\t\r\nКонецПроцедуры"
          },
          {
            "name": "Добавление страниц формы",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\r\n\t\r\n\t//Пример:\r\n\t//Добавление группы страниц\r\n\t//Добавление страниц\r\n\t//Добавление элементов на страницы\r\n\t\r\n\tСтраницыФормы = Элементы.Добавить(\r\n\t\t\"\"СтраницыФормы\"\",\r\n\t\tТип(\"\"ГруппаФормы\"\"),\r\n\t\tЭтаФорма);\r\n\t\t\r\n\tСтраницыФормы.Вид = ВидГруппыФормы.Страницы;\r\n\t\r\n\t//Подключить обработчик при смене страницы\r\n\tСтраницыФормы.УстановитьДействие(\"\"ПриСменеСтраницы\"\", \"\"ДействиеПриСменеСтраницы\"\");\r\n\t\r\n\t//Добавление 1-й страницы\r\n\tСтраницаФормы1 = Элементы.Добавить(\r\n\t\t\"\"Страница1\"\",\r\n\t\tТип(\"\"ГруппаФормы\"\"),\r\n\t\tСтраницыФормы);\r\n\t\t\r\n\tСтраницаФормы1.Вид = ВидГруппыФормы.Страница;\r\n\tСтраницаФормы1.Заголовок = \"\"Первая страница\"\";\r\n\t\r\n\t//Добавление 2-й страницы\r\n\tСтраницаФормы2 = Элементы.Добавить(\r\n\t\t\"\"Страница2\"\",\r\n\t\tТип(\"\"ГруппаФормы\"\"),\r\n\t\tСтраницыФормы);\r\n\t\t\r\n\tСтраницаФормы2.Вид = ВидГруппыФормы.Страница;\r\n\tСтраницаФормы2.Заголовок = \"\"Вторая страница\"\";\r\n\t\r\n\t//Добавить поле ввода на страницу 1\r\n\tПолеВвода = Элементы.Добавить(\"\"ФормаКомментарий\"\", Тип(\"\"ПолеФормы\"\"), СтраницаФормы1);\r\n\tПолеВвода.Вид = ВидПоляФормы.ПолеВвода;\r\n\tПолеВвода.ПутьКДанным = \"\"Объект.Комментарий\"\";\r\n\t\r\n\t//Добавить поле ввода на страницу 2\r\n\tПолеВвода = Элементы.Добавить(\"\"ФормаКомментарий2\"\", Тип(\"\"ПолеФормы\"\"), СтраницаФормы2);\r\n\tПолеВвода.Вид = ВидПоляФормы.ПолеВвода;\r\n\tПолеВвода.ПутьКДанным = \"\"Объект.Комментарий\"\";\r\n\t\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ДействиеПриСменеСтраницы(Элемент)\r\n\t\r\n\tСообщить(\"\"Изменена страница\"\");\r\n\t\r\nКонецПроцедуры"
          }
        ]
      },
      {
        "name": "Диалоги",
        "type": "folder",
        "children": [
          {
            "name": "Диалог выбора файла Управляемые формы (УФ)",
            "type": "template",
            "content": "//В синтакс – помощнике есть пример использования диалога выбора файлов, но этот пример уже давно устарел, ведь во всех современных конфигурациях давно нельзя использовать модально, вот пример работы с диалогом без модальности.  \r\n &НаКлиенте\r\nПроцедура ЗагрузитьФайл(Команда)\r\n\t\r\n\tДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);\r\n\tДиалог.Заголовок = \"\"Выберите файл\"\";\r\n\tДиалог.ПолноеИмяФайла = \"\"\"\"; \r\n\tФильтр = \"\"xlsx (*.xlsx)|*.xlsx\"\"; \r\n\tДиалог.Фильтр = Фильтр; \r\n\tДиалог.МножественныйВыбор = Ложь;\t\r\n\tДиалог.Показать(Новый ОписаниеОповещения(\"\"ЗагрузитьФайлЗавершение\"\", ЭтаФорма, Новый Структура(\"\"Диалог\"\", Диалог)));\t\t\r\n\t\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ЗагрузитьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт\r\n\t\r\n\tДиалог = ДополнительныеПараметры.Диалог; \r\n\t\r\n\tЕсли (ВыбранныеФайлы <> Неопределено) Тогда\t\t\t\t\r\n\t\t\r\n\t\tАдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла));\t\t\r\n\t\tОбработатьФайлНаСервере(АдресВХ);\r\n\t\t\t\t\r\n\tКонецЕсли;\r\n\t\r\nКонецПроцедуры\r\n"
          }
        ]
      },
      {
        "name": "Передача данных между формами",
        "type": "folder",
        "children": [
          {
            "name": "Передать параметры уже открытой форме",
            "type": "template",
            "content": "//На открытой форме из которой нужно передать параметры ари закрытии формы (Произвольная форма)\r\n&НаКлиенте\r\nПроцедура ПриЗакрытии(ЗавершениеРаботы)\r\n\t//Передать параметры уже открытой форме\r\n\tОткрытьФорму(\"\"РегистрСведений.ВыбранныеВопросы.ФормаСписка\"\");\r\n\tСтруктураВозврата = Новый Структура();\r\n\tСтруктураВозврата.Вставить(\"\"Глава\"\", Глава);\r\n\tСтруктураВозврата.Вставить(\"\"Счетчик\"\", Счетчик);\r\n\t\r\n\tОповестить(\"\"ДобавлениеСчетчика\"\",СтруктураВозврата,ЭтаФорма);\r\nКонецПроцедуры\r\n\r\n// На форме куда передать параметры на открытую форму ОбработкаОповещения() - это предопределенное событие  \r\n\r\n&НаКлиенте\r\nПроцедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)\r\n\t   УвеличитьСчетчик(Параметр.Глава,Параметр.Счетчик)\r\nКонецПроцедуры\r\n\r\n\r\n"
          },
          {
            "name": "Передать параметры форме при открытии",
            "type": "template",
            "content": "  // на форме от куда передаем\r\n  &НаКлиенте\r\n  Процедура Кнопка1(Кнопка)\r\n      //Передать параметры в форму\r\n\t  ПараметрыФормы = Новый Структура(\"\"Параметр1,Параметр2\"\", Истина,\"\"Привет\"\");\r\n  КонецПроцедуры\r\n  \r\n  //На форме куда передать параметры\r\n  &НаСервере\r\n  Процедура ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)\r\n      Сообщить(Параметры.Параметр1);\r\n\t  Сообщить(Параметры.Параметр2);\r\n  КонецПроцедуры\r\n  "
          }
        ]
      },
      {
        "name": "Открывать форму выбора (подбора) в управляемых формах",
        "type": "folder",
        "children": [
          {
            "name": "Вызов формы выбора с одним возвращаемым результатом",
            "type": "template",
            "content": "   &НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n \r\n\tПараметрыФормы = Новый Структура(\"\"РежимВыбора\"\",Истина);\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,ЭтаФорма);\r\n\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) ///Событие формы\r\n\t\r\n     РезультатСсылка =  ВыбранноеЗначение; ///Выбранное значение, вернет ссылку (документа в нашем примере)\r\n\r\nКонецПроцедуры"
          },
          {
            "name": "Выбор нескольких значений (документов или справочников) ",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n \r\n\tПараметрыФормы = Новый Структура;\r\n\tПараметрыФормы.Вставить(\"\"РежимВыбора\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"МножественныйВыбор\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"ЗакрыватьПриВыборе\"\",ложь);\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,ЭтаФорма);\r\n\r\nКонецПроцедуры\r\n\r\n\r\n&НаКлиенте\r\nПроцедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)\r\n\tМассивСсылок =  ВыбранноеЗначение; ///Вернётся массив с выбранными значениями (Даже если значение только одно )\r\nКонецПроцедуры"
          },
          {
            "name": "Выбор нескольких значений (документов или справочников) с использованием \"\"Обработки оповещения\"\" ",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n \r\n\tПараметрыФормы = Новый Структура;\r\n\tПараметрыФормы.Вставить(\"\"РежимВыбора\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"МножественныйВыбор\"\",Истина); ///Если хотим несколько значений\r\n\r\n\tОбработкаВыбора = Новый ОписаниеОповещения(\"\"ПриЗакрытииФормыВыбора\"\", ЭтаФорма,\"\"ПодборРеализации\"\");\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,\r\n\t        ЭтаФорма, , , , ОбработкаВыбора);\r\n\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт\r\n\r\n   //Дополнительные условия если необходимо\r\n   //Если ДопПараметры = \"\"ПодборРеализации\"\" тогда\r\n\r\n    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)\r\n        Возврат;\r\n    КонецЕсли;\r\n     \r\n    МассивДокументов = Значение ///Если Множественный Выбор - то вернется массив \r\n    \r\n\r\n    //КонецЕсли;\r\nКонецПроцедуры"
          },
          {
            "name": "Выбор нескольких значений (документов или справочников) с условием",
            "type": "template",
            "content": "//Допустим мы хотим выбрать из списка документы только с товаром, для этого установим отбор по \"\"Виду операции\"\".\r\n//Вид операции - это поле(реквизит) динамического списка, и отбор можно установить по всем доступным полям. \r\n&НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n\r\n    ///Создаем структуру с отбором и добавляем значения\r\n\tПараметрыОтбора = Новый Структура;\r\n\tПараметрыОтбора.Вставить(\"\"ВидОперации\"\", ПредопределенноеЗначение(\"\"Перечисление.ВидыОперацийРеализацияТоваров.Товары\"\"));\r\n\t//ПараметрыОтбора.Вставить(\"\"Дата\"\", ТекущаяДата());   ///Дополнительный отбор\r\n \r\n\tПараметрыФормы = Новый Структура;\r\n\tПараметрыФормы.Вставить(\"\"Отбор\"\", ПараметрыОтбора); ///Добавляем отбор в параметры формы\r\n\r\n\tПараметрыФормы.Вставить(\"\"РежимВыбора\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"МножественныйВыбор\"\",Истина);\r\n\r\n\tОбработкаВыбора = Новый ОписаниеОповещения(\"\"ПриЗакрытииФормыВыбора\"\", ЭтаФорма,\"\"Подбор\"\");\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,\r\n\t        ЭтаФорма, , , , ОбработкаВыбора);\r\n\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт\r\n    Если Значение = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n     \r\n    МассивДокументов = Значение; \r\n\t\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Выбор нескольких значений (документов или справочников) открыть форму выбора со списком за определенный период",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n\tНастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;\r\n\r\n    ///Если хотим несколько условий\r\n    ГруппаОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип(\"\"ГруппаЭлементовОтбораКомпоновкиДанных\"\"));\r\n    ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;\r\n\t\r\n\tЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(\"\"ЭлементОтбораКомпоновкиДанных\"\")); \r\n\tЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(\"\"ВидОперации\"\");\r\n\tЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;\r\n\tЭлементОтбора.Использование  = Истина;\r\n\tЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение(\"\"Перечисление.ВидыОперацийРеализацияТоваров.Товары\"\");\r\n\r\n\tЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(\"\"ЭлементОтбораКомпоновкиДанных\"\")); \r\n\tЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(\"\"Дата\"\");\r\n\tЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.больше;\r\n\tЭлементОтбора.Использование  = Истина;\r\n\tЭлементОтбора.ПравоеЗначение = НачалоГода(ТекущаяДата());\r\n\r\n\tПараметрыФормы = Новый Структура;\r\n\tПараметрыФормы.Вставить(\"\"ФиксированныеНастройки\"\", НастройкиКомпоновки);\r\n\tПараметрыФормы.Вставить(\"\"РежимВыбора\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"МножественныйВыбор\"\",Истина);\r\n\r\n\tОбработкаВыбора = Новый ОписаниеОповещения(\"\"ПриЗакрытииФормыВыбора\"\", ЭтаФорма,\"\"Подбор\"\");\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,\r\n\t        ЭтаФорма, , , , ОбработкаВыбора);\r\n\r\nКонецПроцедуры\r\n\r\n\r\n&НаКлиенте\r\nПроцедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт\r\n    Если Значение = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n     \r\n    МассивДокументов = Значение \r\n\t\r\nКонецПроцедуры"
          },
          {
            "name": "открыть форму выбора с Позиционированием ранее выбранного значения",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура КомандаОткрытьФормуВыбора(Команда)\r\n\r\n\tПараметрыФормы = Новый Структура;\r\n\tПараметрыФормы.Вставить(\"\"РежимВыбора\"\",Истина);\r\n\tПараметрыФормы.Вставить(\"\"МножественныйВыбор\"\",Ложь);\r\n\tПараметрыФормы.Вставить(\"\"ЗакрыватьПриВыборе\"\",ложь);\r\n\t\r\n\tЕсли РанееВыбранныйДокумент <> Неопределено Тогда    ///Реквизит формы, ранее выбранное значение из открываемой формы\t\r\n\t\t//ПараметрыФормы.Вставить(\"\"УстановитьПараметрыФункциональныхОпцийФормы\"\",Новый Структура(\"\"ТекущаяСтрока\"\",РанееВыбранныйДокумент));  /// Можно и так\r\n\t    ПараметрыВыбора.Вставить(\"\"ТекущаяСтрока\"\", РанееВыбранныйДокумент); /// Подсказка от подписчика: user1502278 \r\n    КонецЕсли;\r\n\t\r\n\tОбработкаВыбора = Новый ОписаниеОповещения(\"\"ПриЗакрытииФормыВыбора\"\", ЭтотОбъект,\"\"Подбор\"\");\r\n\r\n\tОткрытьФорму(\"\"Документ.РеализацияТоваровУслуг.ФормаВыбора\"\",ПараметрыФормы,\r\n\t        ЭтаФорма, , , , ОбработкаВыбора);\r\n\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) экспорт\r\n    Если Значение = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n     \r\n    МассивДокументов = Значение \r\n\t\r\nКонецПроцедуры"
          }
        ]
      }
    ]
  },
  {
    "name": "Массивы и колекции",
    "type": "folder",
    "children": [
      {
        "name": "Массивы",
        "type": "folder",
        "children": [
          {
            "name": "Получение уникальных значений",
            "type": "template",
            "content": "Числа1 = Новый Массив;\r\nЧисла1.Добавить(1);\r\nЧисла1.Добавить(3);\r\nЧисла1.Добавить(2);\r\nЧисла1.Добавить(1);\r\nЧисла1.Добавить(3);\r\n\r\n//Числа1 = [1, 3, 2, 1, 3]\r\nЧисла2 = Новый Массив;\r\n//первый вариант\r\nСоответствие = Новый Соответствие;\r\nДля каждого Число Из Числа1 Цикл\r\n    Соответствие.Вставить(Число);\r\nКонецЦикла;\r\nДля каждого Элемент Из Соответствие Цикл\r\n    Числа2.Добавить(Элемент.Ключ);\r\nКонецЦикла;\r\n//Числа2 = [1, 2, 3]\r\nЧисла2.Очистить();\r\n\r\n//второй вариант\r\nДля Каждого Число из Числа1 Цикл\r\n    Если (Числа2.Найти(Число) = Неопределено) Тогда\r\n        Числа2.Добавить(Число);\r\n    КонецЕсли;\r\nКонецЦикла;\r\n//Числа2 = [1, 3, 2]\r\n"
          },
          {
            "name": "Объединение массива",
            "type": "template",
            "content": "Числа1 = Новый Массив(3);\r\nЧисла1[0] = 2;\r\nЧисла1[1] = 3;\r\nЧисла1[2] = 5;\r\n\r\nЧисла2 = Новый Массив(3);\r\nЧисла2[0] = 7;\r\nЧисла2[1] = 11;\r\nЧисла2[2] = 13;\r\n\r\n//вариант первый\r\nВсеЧисла = Новый Массив;\r\nДля Каждого Число Из Числа1 Цикл\r\n    ВсеЧисла.Добавить(Число);\r\nКонецЦикла;\r\n\r\nДля Каждого Число Из Числа2 Цикл\r\n    ВсеЧисла.Добавить(Число);\r\nКонецЦикла;\r\n//ВсеЧисла = [2, 3, 5, 7, 11, 13]\r\n\r\n//вариант второй\r\n\r\nСписок = Новый СписокЗначений;\r\nСписок.ЗагрузитьЗначения(Числа1);\r\nДля Каждого Число Из Числа2 Цикл\r\n    Список.Добавить(Число);\r\nКонецЦикла;\r\nВсеЧисла = Список.ВыгрузитьЗначения();\r\n//ВсеЧисла = [2, 3, 5, 7, 11, 13]"
          },
          {
            "name": "Обход массива",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 3;\r\nЧисла[2] = 5;\r\nСтр = \"\"\"\";\r\nДля Каждого Число из Числа Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\"; \"\") + Число;\r\nКонецЦикла;\r\n//Стр = \"\"2; 3; 5\"\""
          },
          {
            "name": "Обход массивов по индексам",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 3;\r\nЧисла[2] = 5;\r\nСтр = \"\"\"\";\r\nДля Н = 0 По Числа.Количество() - 1 Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\"; \"\") + Числа[Н];\r\nКонецЦикла;\r\n//Стр = \"\"2; 3; 5\"\""
          },
          {
            "name": "Динамические массивы",
            "type": "template",
            "content": "Количество = 15;\r\nЧисла = Новый Массив(Количество);\r\nЧисла[0] = 1;"
          },
          {
            "name": "Добавление и удаление элементов",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 5;\r\nЧисла[2] = 7;\r\nЧисла.Добавить(11);\r\n//Числа = [2, 5, 7, 11]\r\nЧисла.Вставить(1, 3);\r\n//Числа = [2, 3, 5, 7, 11]\r\nЧисла.Удалить(2);\r\n//Числа = [2, 3, 7, 11]\r\nЧисла.Очистить();\r\n//Числа =  [] "
          },
          {
            "name": "Индексация массивов",
            "type": "template",
            "content": "//пустой массив\r\n\r\nМассив1 = Новый Массив;\r\n\r\n//одномерный массив\r\n\r\nМассив2 = Новый Массив(3);\r\nМассив2[0] = 2;\r\nМассив2[1] = 3;\r\nМассив2[2] = 1;\r\n\r\n//двумерный массив\r\nМассив3 = Новый Массив(2);\r\nМассив3[0] = Новый Массив(2);\r\nМассив3[1] = Новый Массив(2);\r\nМассив3[0][1] = 5;\r\n"
          },
          {
            "name": "Копирование массива",
            "type": "template",
            "content": "Числа1 = Новый Массив(3);\r\nЧисла1[0] = 1;\r\nЧисла1[1] = 2;\r\nЧисла1[2] = 3;\r\n\r\n//первый вариант\r\nЧисла2 = Новый Массив(\r\nНовый ФиксированныйМассив(Числа1));\r\n\r\n//второй вариант\r\n\r\nСписок = Новый СписокЗначений;\r\nСписок.ЗагрузитьЗначения(Числа1);\r\nЧисла3 = Список.ВыгрузитьЗначения();"
          },
          {
            "name": "Массив с заданным значением",
            "type": "template",
            "content": "Количество = 3;\r\nЗначение = 5;\r\nЧисла = Новый Массив(Количество);\r\nДля н = 0 По Количество - 1 Цикл\r\n    Числа[н] = Значение;\r\nКонецЦикла;\r\n//Числа = [5, 5, 5]"
          },
          {
            "name": "Фильтрация элементов",
            "type": "template",
            "content": "Числа = Новый Массив;\r\nЧисла.Добавить(1);\r\nЧисла.Добавить(2);\r\nЧисла.Добавить(3);\r\nЧисла.Добавить(4);\r\n//в 1С отсутствует функция фильтрации массива\r\n//поэтому использует обычный перебор значений\r\nЧетные = Новый Массив;\r\nДля Каждого Число Из Числа Цикл\r\n    Если (Число % 2 = 0) Тогда\r\n        Четные.Добавить(Число);\r\n    КонецЕсли;\r\nКонецЦикла;\r\n   "
          },
          {
            "name": "Сортировка элементов",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 3;\r\nЧисла[2] = 1;\r\n\r\nСписок = Новый СписокЗначений;\r\nСписок.ЗагрузитьЗначения(Числа);\r\n\r\nСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр) ;\r\n\r\nЧисла = Список.ВыгрузитьЗначения();\r\n\r\n//Числа = [1, 2, 3]\r\n\r\nСписок.СортироватьПоЗначению(НаправлениеСортировки.Убыв) ;\r\nЧисла = Список.ВыгрузитьЗначения();\r\n\r\n//Числа = [3, 2, 1]\r\n"
          },
          {
            "name": "Преобразование массива",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 3;\r\nЧисла[2] = 5;\r\n\r\nДля Н = 0 По Числа.Количество() - 1 Цикл\r\n    Числа[Н] = Числа[Н] * 3;\r\nКонецЦикла;\r\n//Числа = [6, 9, 15]"
          },
          {
            "name": "Проверка наличия элемента",
            "type": "template",
            "content": "Числа = Новый Массив(3);\r\nЧисла[0] = 2;\r\nЧисла[1] = 3;\r\nЧисла[2] = 5;\r\n\r\nСодержит3 = Числа.Найти(3) <> Неопределено;\r\n//Содержит3 = Истина\r\nИндекс3 = Числа.Найти(3);\r\n//Индекс3 = 1\r\nСодержит4 = Числа.Найти(4) <> Неопределено;\r\n\r\n//Содержит4 = Ложь\r\n\r\n"
          },
          {
            "name": "Проверка равенства массивов",
            "type": "template",
            "content": "Числа1 = Новый Массив(3);\r\nЧисла1[0] = 1;\r\nЧисла1[1] = 2;\r\nЧисла1[2] = 3;\r\n\r\nЧисла2 = Новый Массив(3);\r\nЧисла2[0] = 1;\r\nЧисла2[1] = 2;\r\nЧисла2[2] = 3;\r\n\r\n//первый вариант\r\n\r\nМассивыРавны = СравнитьМассивы1(Числа1, Числа2);\r\n\r\n//МассивыРавны = Да\r\n\r\n//второй вариант\r\n\r\nМассивыРавны = СравнитьМассивы2(Числа1, Числа2);\r\n\r\n//МассивыРавны = Да\r\n\r\n\r\nФункция СравнитьМассивы1(Массив1, Массив2)\r\n    Если Массив1.Количество() <> Массив2.Количество() Тогда\r\n        Возврат Ложь;\r\n    КонецЕсли;\r\n    Для н = 0 По Массив1.Количество() - 1 Цикл\r\n        Если (Массив1.Получить(н) <> Массив2.Получить(н)) Тогда\r\n            Возврат Ложь;\r\n        КонецЕсли;\r\n    КонецЦикла;\r\n\r\n    Возврат Истина;\r\n\r\nКонецФункции\r\n\r\n&НаСервере\r\nФункция СравнитьМассивы2(Массив1, Массив2)\r\n    Возврат ЗначениеВСтрокуВнутр(Массив1) =\r\n        ЗначениеВСтрокуВнутр(Массив2);\r\nКонецФункции"
          },
          {
            "name": "Алгоритмы сортировки массивов",
            "type": "folder",
            "children": []
          }
        ]
      },
      {
        "name": "Словари(Соответствие)",
        "type": "folder",
        "children": [
          {
            "name": "Добавление и удаление элементов",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\nСоотв.Вставить(3, \"\"\"\");\r\nСоотв[3] = \"\"три\"\";\r\n//Соотв = [1 : \"\"один\"\", 2 : \"\"два\"\", 3 : \"\"три\"\"]\r\nСоотв.Удалить(3);\r\n//с = [1 : \"\"один\"\", 2 : \"\"два\"\"]\r\nСоотв.Очистить();\r\n//с = []\r\n"
          },
          {
            "name": "Индексация словарей",
            "type": "template",
            "content": "//пустой словарь\r\nСоответствие1 = Новый Соответствие;\r\n//словарь со значениями\r\nСоответствие2 = Новый Соответствие;\r\nСоответствие2.Вставить(1, \"\"один\"\");\r\nСоответствие2.Вставить(2, \"\"два\"\");\r\n"
          },
          {
            "name": "Количество элементов",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\nКоличество = Соотв.Количество();\r\n//Количество = 2"
          },
          {
            "name": "Обход словаря",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\nСтр = \"\"\"\";\r\nДля Каждого Элемент из Соотв Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\", \"\") +\r\n        (\"\"{\"\" + Элемент.Ключ + \"\" : \"\"\"\"\"\" +\r\n        Элемент.Значение + \"\"\"\"\"\"}\"\");\r\nКонецЦикла;\r\n//Стр = \"\"{1 : \"\"один\"\"}, {2 : \"\"два\"\"}"
          },
          {
            "name": "Получение списка значения",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\nЗначения = Новый Массив;\r\nДля Каждого Элемент из Соотв Цикл\r\n    Значения.Добавить(Элемент.Значение);\r\nКонецЦикла;\r\n//Значения = [\"\"один\"\", \"\"два\"\"]"
          },
          {
            "name": "Получение списка ключей",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\nКлючи = Новый Массив;\r\nДля Каждого Элемент из Соотв Цикл\r\n    Ключи.Добавить(Элемент.Ключ);\r\nКонецЦикла;\r\n//Ключи = [1, 2]"
          },
          {
            "name": "Получение значения по ключу",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, \"\"два\"\");\r\n\r\nЗначение1 = Соотв[1];\r\n//Значение1 = \"\"один\"\"\r\nЗначение2 = Соотв[2];\r\n//Значение2 = \"\"два\"\"\r\nЗначение3 = Соотв[3];\r\n//Значение3 = Неопределено"
          },
          {
            "name": "Проверка наличия ключа",
            "type": "template",
            "content": "Соотв = Новый Соответствие;\r\nСоотв.Вставить(1, \"\"один\"\");\r\nСоотв.Вставить(2, Неопределено);\r\nЕсть1 = Соотв.Получить(1) <> Неопределено;\r\n//Есть1 = Истина\r\nЕсть2 = Соотв.Получить(2) <> Неопределено;\r\n//Есть2 = Ложь\r\nЕсть3 = Соотв.Получить(3) <> Неопределено;\r\n//Есть3 = Ложь"
          }
        ]
      },
      {
        "name": "Дерево значений",
        "type": "folder",
        "children": [
          {
            "name": "Сортировка данных",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nДолжности.Колонки.Добавить(\"\"Количество\"\");\r\n\r\nГлБух = Должности.Строки.Добавить();\r\nГлБух.Должность = \"\"Гл. бухгалтер\"\";\r\nГлБух.Количество = 1;\r\n\r\nЗамГлБух = ГлБух.Строки.Добавить();\r\nЗамГлБух.Должность = \"\"Зам. гл. бухгалтера\"\";\r\nЗамГлБух.Количество = 1;\r\n\r\nБухРасчет = ГлБух.Строки.Добавить();\r\nБухРасчет.Должность = \"\"Бух. расч. отдела\"\";\r\nБухРасчет.Количество = 3;\r\n\r\n//сортировка подчиненных строк строки глБух\r\nГлБух.Строки.Сортировать(\"\"Должность Возр\"\");\r\n//сортировка всех строк дерева значений\r\nДолжности.Строки.Сортировать(\"\"Количество Убыв, Должность Возр\"\", Истина);"
          },
          {
            "name": "Создание копии дерева",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\n//полная копия дерева\r\nКопия = Должности.Скопировать();\r\n\r\n"
          },
          {
            "name": "Получение индексов строки",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\nИндекс = Должности.Строки.Индекс(КомДир);\r\n//Индекс = -1\r\nИндекс = ГенДир.Строки.Индекс(КомДир);\r\n//Индекс = 1\r\n"
          },
          {
            "name": " Поиск по дереву",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nДолжности.Колонки.Добавить(\"\"Количество\"\");\r\n\r\nДиректор = Должности.Строки.Добавить();\r\nДиректор.Должность = \"\"Директор\"\";\r\nДиректор.Количество = 1;\r\n\r\nБухгалтер = Директор.Строки.Добавить();\r\nБухгалтер.Должность = \"\"Бухгалтер\"\";\r\nБухгалтер.Количество = 1;\r\n\r\nПродавец = Директор.Строки.Добавить();\r\nПродавец.Должность = \"\"Продавец\"\";\r\nПродавец.Количество = 3;\r\n//поиск по всем колонкам и подчиненным строкам\r\nСтрока1 = Должности.Строки.Найти(\"\"Продавец\"\", Неопределено, Истина);\r\n//Строка = Продавец : 3\r\n//поиск по колонке \"\"Должность\"\", включая подчиненные строки\r\nСтрока2 = Должности.Строки.Найти(\"\"Продавец\"\", \"\"Должность\"\", Истина);\r\n//Строка = Продавец : 3\r\n//поиск по колонке \"\"Количество\"\", включая подчиненные строки\r\nСтрока3 = Должности.Строки.Найти(\"\"Продавец\"\", \"\"Количество\"\", Истина);\r\n//Строка = Неопределено\r\n//поиск по колонке \"\"Должность\"\"\r\nСтрока4 = Должности.Строки.Найти(\"\"Продавец\"\", \"\"Должность\"\");\r\n//Строка = Неопределено\r\n//поиск по всем колонкам в строке \"\"директор\"\"\r\nстрока5 = директор.Строки.Найти(\"\"Продавец\"\");\r\n//строка = Продавец : 3\r\nПараметрыОтбора = Новый Структура;\r\nПараметрыОтбора.Вставить(\"\"Количество\"\", 1);\r\nстроки = должности.Строки.НайтиСтроки(ПараметрыОтбора, Истина);\r\n//массив из строк \"\"Директор\"\" и \"\"Бухгалтер\"\""
          },
          {
            "name": "Перечисление колонок",
            "type": "template",
            "content": "Товары = Новый ДеревоЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nДля Каждого Колонка Из Товары.Колонки Цикл\r\n    Сообщить(Колонка.Имя);\r\nКонецЦикла;"
          },
          {
            "name": "Перемещение строк",
            "type": "template",
            "content": "перемещение строк\r\nДолжности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\n//сдвигаем фин. дир. на строчку ниже\r\nГенДир.Строки.Сдвинуть(0, 1);\r\n//возвращаем обратно\r\nГенДир.Строки.Сдвинуть(1, -1);"
          },
          {
            "name": "Обход дерева значений",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nДолжности.Колонки.Добавить(\"\"Количество\"\");\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\nГенДир.Количество = 1;\r\nГлБух = ГенДир.Строки.Добавить();\r\nГлБух.Должность = \"\"Гл. бухгалтер\"\";\r\nГлБух.Количество = 1;\r\nЗамГлБух = ГлБух.Строки.Добавить();\r\nЗамГлБух.Должность = \"\"Зам. гл. бухгалтера\"\";\r\nЗамГлБух.Количество = 1;\r\nБухРасчет = ГлБух.Строки.Добавить();\r\nБухРасчет.Должность = \"\"Бух. расч. отдела\"\";\r\nБухРасчет.Количество = 3;\r\nПоказатьДЗ(Должности);\r\n\r\n\r\n&НаСервере\r\nПроцедура ПоказатьДЗ(Дерево, Уровень = 1)\r\n      Пробелы = \"\"          \"\";\r\n    Для Каждого Строка из Дерево.Строки Цикл\r\n        Стр = Строка.Должность + \"\": \"\" +\r\n        Строка.Количество + \"\" ед.\"\";\r\n        //отступ для подчиненных строк\r\n        Стр = Лев(Пробелы, (Уровень - 1)*2) + Стр;\r\n        Сообщить(Стр);\r\n        ПоказатьДЗ(Строка, Уровень + 1);\r\n    КонецЦикла;\r\nКонецПроцедуры"
          },
          {
            "name": "Инициализация",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\nДолжности.Колонки.Добавить(\"\"Количество\"\");\r\n\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\nГенДир.Количество = 1;\r\n\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\nФинДир.Количество = 1;\r\n\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\nКомДир.Количество = 1;\r\n\r\nТорг = КомДир.Строки.Добавить();\r\nТорг.Должность = \"\"Торг. представитель\"\";\r\nТорг.Количество = 3;"
          },
          {
            "name": "Загрузка и выгрузка колонок",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\n\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\n\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\n\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\n\r\nМассив = Должности.Строки.ВыгрузитьКолонку(0);\r\n//Массив = [\"\"Ген. директор\"\"]\r\nМассив = ГенДир.Строки.ВыгрузитьКолонку(0);\r\n//Массив = [\"\"Фин. директор\"\", \"\"Ком. директор\"\"]\r\n\r\nМассив[0] = \"\"Тех. директор\"\";\r\nГенДир.Строки.ЗагрузитьКолонку(Массив, 0);"
          },
          {
            "name": "Добавление и удаление строк",
            "type": "template",
            "content": "Должности = Новый ДеревоЗначений;\r\nДолжности.Колонки.Добавить(\"\"Должность\"\");\r\n\r\nГенДир = Должности.Строки.Добавить();\r\nГенДир.Должность = \"\"Ген. директор\"\";\r\n\r\nФинДир = ГенДир.Строки.Добавить();\r\nФинДир.Должность = \"\"Фин. директор\"\";\r\n\r\nКомДир = ГенДир.Строки.Добавить();\r\nКомДир.Должность = \"\"Ком. директор\"\";\r\n\r\n//удаляем строку \"\"Фин. директор\"\"\r\nГенДир.Строки.Удалить(0);\r\n//удаляем все строки ветки \"\"Ген. директор\"\"\r\nГенДир.Строки.Очистить();\r\n//удаляем все строки дерева\r\nДолжности.Строки.Очистить();"
          }
        ]
      },
      {
        "name": "Список значений",
        "type": "folder",
        "children": [
          {
            "name": "Добавление и удаление элементов",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(3, \"\"три\"\");\r\n//Числа = [1 : \"\"один\"\", 3 : \"\"три\"\"]\r\nЧисла.Вставить(1, 2, \"\"два\"\");\r\n//Числа = [1 : \"\"один\"\", 2 : \"\"два\"\", 3 : \"\"три\"\"]\r\nЧисла.Удалить(0);\r\n//Числа = [2 : \"\"два\"\", 3 : \"\"три\"\"]\r\nТри = сз[1];\r\nЧисла.Удалить(Три);\r\n//Числа = [2 : \"\"два\"\"]\r\nЧисла.Очистить();\r\n//Числа = [ ]"
          },
          {
            "name": "Загрузка и  выгрузка значений",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(2, \"\"два\"\", Истина);\r\nЧисла.Добавить(3);\r\n//Числа = [1 : \"\"один\"\" : Нет, 2 : \"\"два\"\" : Да, 3 ]"
          },
          {
            "name": "Инициализация",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(2, \"\"два\"\", Истина);\r\nЧисла.Добавить(3);\r\n//Числа = [1 : \"\"один\"\" : Нет, 2 : \"\"два\"\" : Да, 3 ]"
          },
          {
            "name": "Обход списка значений",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\", Истина);\r\nЧисла.Добавить(2, \"\"два\"\", Ложь);\r\nСтр = \"\"\"\";\r\nДля Каждого Элемент из Числа Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\", \"\") +\r\n        (\"\"{\"\" + Элемент.Значение + \"\" : \"\"\"\"\"\" +\r\n        Элемент.Представление + \"\"\"\"\"\" : \"\" +\r\n        Элемент.Пометка + \"\"}\"\");\r\nКонецЦикла;\r\n\r\n//Стр = \"\"{1 : \"\"один\"\" : Да}, {2 : \"\"два\"\" : Нет}\"\" "
          },
          {
            "name": "Обход списка с индексом",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(2, \"\"два\"\");\r\nСтр = \"\"\"\";\r\nДля Н = 0 По Числа.Количество() - 1 Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\", \"\") +\r\n        (\"\"{\"\" + Числа[Н].Значение + \"\" : \"\"\"\"\"\" +\r\n        Числа[Н].Представление + \"\"\"\"\"\"}\"\");\r\nКонецЦикла;\r\n//Стр = \"\"{1 : \"\"один\"\"}, {2 : \"\"два\"\"}\"\""
          },
          {
            "name": "Перемещение элемента",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(3, \"\"три\"\");\r\nЧисла.Добавить(2, \"\"два\"\");\r\nЧисла.Сдвинуть(сз[2], -1);\r\n//Числа = [1 : \"\"один\"\", 2 : \"\"два\"\", 3 : \"\"три\"\"]"
          },
          {
            "name": "Поиск индекса элемента",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(2, \"\"два\"\");\r\nЗначение2 = Числа.НайтиПоЗначению(2);\r\nИндекс = Числа.Индекс(Значение2);\r\n//Индекс = 1"
          },
          {
            "name": "Показ выбора списка",
            "type": "template",
            "content": " Цвета = Новый СписокЗначений;\r\nЦвета.Добавить(\"\"Красный\"\");\r\n\r\nЦвета.Добавить(\"\"Зеленый\"\");\r\nЦвета.Добавить(\"\"Синий\"\");\r\n//устанавливаем отметку у всех элементам\r\nЦвета.ЗаполнитьПометки(Истина);\r\n\r\nОповещение = Новый ОписаниеОповещения(\"\"РезультатВыбораСписка\"\", ЭтотОбъект);\r\nЦвета.ПоказатьОтметкуЭлементов(Оповещение,\"\"Выберите цвета\"\");\r\n\r\nПроцедура РезультатВыбораСписка(Элементы, Параметры) Экспорт\r\n    Если Элементы = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n    Для Каждого Цвет Из Элементы Цикл\r\n        Если Цвет.Пометка Тогда\r\n            Сообщить(Цвет.Значение);\r\n        КонецЕсли;\r\n    КонецЦикла;\r\nКонецПроцедуры"
          },
          {
            "name": "Показ выбора элемента",
            "type": "template",
            "content": "Цвета = Новый СписокЗначений;\r\nЦвета.Добавить(\"\"Красный\"\");\r\nЦвета.Добавить(\"\"Зеленый\"\");\r\nЦвета.Добавить(\"\"Синий\"\");\r\n//устанавливаем отметку у всех элементам\r\nЦвета.ЗаполнитьПометки(Истина);\r\nОповещение = Новый ОписаниеОповещения(\"\"РезультатВыбораСписка\"\", ЭтотОбъект);\r\nЦвета.ПоказатьОтметкуЭлементов(Оповещение,\"\"Выберите цвета\"\");\r\n\r\n\r\nПроцедура РезультатВыбораСписка(Элементы, Параметры) Экспорт\r\n    Если Элементы = Неопределено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n\r\n    Для Каждого Цвет Из Элементы Цикл\r\n        Если Цвет.Пометка Тогда\r\n            Сообщить(Цвет.Значение);\r\n        КонецЕсли;\r\n    КонецЦикла;\r\n\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Проверка наличия значения",
            "type": "template",
            "content": "Цвета = Новый СписокЗначений;\r\nЦвета.Добавить(\"\"Красный\"\");\r\nЦвета.Добавить(\"\"Зеленый\"\");\r\nЦвета.Добавить(\"\"Синий\"\");\r\nОповещение = Новый ОписаниеОповещения(\"\"РезультатВыбора\"\", ЭтотОбъект);\r\nЦвета.ПоказатьВыборЭлемента(Оповещение, \"\"Выберите цвет);\r\n\r\n\r\nПроцедура РезультатВыбора(Элемент, Параметры) Экспорт\r\n    Если Элемент <> Неопределено Тогда\r\n        Сообщить(Элемент.Значение);\r\n    КонецЕсли;\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Создать копию списка",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(2, \"\"два\"\");\r\nКопияЧисла = Числа.Скопировать();\r\n//КопияЧисла = [1 : \"\"один\"\", 2 : \"\"два\"\"]"
          },
          {
            "name": "Сортировка элементов",
            "type": "template",
            "content": "Числа = Новый СписокЗначений;\r\nЧисла.Добавить(1, \"\"один\"\");\r\nЧисла.Добавить(3, \"\"три\"\");\r\nЧисла.Добавить(2, \"\"два\"\");\r\n\r\nЧисла.СортироватьПоЗначению(НаправлениеСортировки.Убыв);\r\n//Числа = [3 : \"\"три\"\", 2 : \"\"два\"\", 1 : \"\"один\"\"]\r\nЧисла.СортироватьПоПредставлению(НаправлениеСортировки.Возр);\r\n//Числа = [2 : \"\"два\"\", 1 : \"\"один\"\", 3 : \"\"три\"\"]\r\n"
          }
        ]
      },
      {
        "name": "Структура",
        "type": "folder",
        "children": [
          {
            "name": "Добавление и удаление элементов",
            "type": "template",
            "content": "Месяцы = Новый Структура;\r\nМесяцы.Вставить(\"\"Январь\"\", 1);\r\nМесяцы.Вставить(\"\"Февраль\"\", 2);\r\nМесяцы.Вставить(\"\"Март\"\", 3);\r\nМесяцы.Удалить(\"\"Февраль\"\");\r\n//Месяцы = [Январь : 1, Март : 3]\r\nМесяцы.Очистить();\r\n//Месяцы = [ ]"
          },
          {
            "name": "Изменение значения",
            "type": "template",
            "content": "Месяцы = Новый Структура;\r\nМесяцы.Вставить(\"\"Январь\"\", 5);\r\nМесяцы.Вставить(\"\"Февраль\"\", 2);\r\nМесяцы[\"\"Январь\"\"] = 1;\r\n//или\r\nМесяцы.Январь = 1;\r\n"
          },
          {
            "name": "Инициализация",
            "type": "template",
            "content": "//первый способ\r\nМонитор = Новый Структура;\r\nМонитор.Вставить(\"\"Диагональ\"\", 23);\r\nМонитор.Вставить(\"\"Контрастность\"\", \"\"1000:1\"\");\r\nМонитор.Вставить(\"\"Матрица\"\", \"\"IPS\"\");\r\n//второй способ\r\nМонитор = Новый Структура( \"\"Диагональ,Контрастность,Матрица\"\",23, \"\"1000:1\"\", \"\"IPS\"\");\r\n\r\n//третий способ\r\n\r\nМонитор = Новый Структура(\"\"Диагональ,Контрастность,Матрица\"\") ;\r\nМонитор.Диагональ = 23;\r\nМонитор.Контрастность = \"\"1000:1\"\";\r\nМонитор.Матрица = \"\"IPS\"\";\r\n\r\n"
          },
          {
            "name": "Количество элементов",
            "type": "template",
            "content": "Паспорт = Новый Структура;\r\nПаспорт.Вставить(\"\"Серия\"\", \"\"3004\"\");\r\nПаспорт.Вставить(\"\"Номер\"\", \"\"321123\"\");\r\nКоличество = Паспорт.Количество();\r\n//Количество = 2\r\n"
          },
          {
            "name": "Обход структуры",
            "type": "template",
            "content": "Телефон = Новый Структура;\r\nТелефон.Вставить(\"\"Диагональ\"\", 5.5);\r\nТелефон.Вставить(\"\"ОЗУ\"\", \"\"6 Гб\"\");\r\nТелефон.Вставить(\"\"Камера\"\", \"\"23 Мп\"\");\r\nСтр = \"\"\"\";\r\nДля Каждого Элемент из Телефон Цикл\r\n    Стр = Стр + ?(Стр = \"\"\"\", \"\"\"\", \"\", \"\") +\r\n        (\"\"\"\" + Элемент.Ключ + \"\" : \"\" + Элемент.Значение);\r\nКонецЦикла;\r\n//Стр = \"\"Диагональ : 5,5, ОЗУ : 6 Гб, Камера : 23 Мп\"\"\r\n"
          },
          {
            "name": "Получение списка значений",
            "type": "template",
            "content": "Телефон = Новый Структура;\r\nТелефон.Вставить(\"\"Диагональ\"\", 5.5);\r\nТелефон.Вставить(\"\"ОЗУ\"\", \"\"6 Гб\"\");\r\nТелефон.Вставить(\"\"Камера\"\", \"\"23 Мп\"\");\r\nЗначения = Новый Массив;\r\nДля Каждого Элемент из Телефон Цикл\r\n    Значения.Добавить(Элемент.Значение);\r\nКонецЦикла;\r\n//Значения = [5.5, \"\"6 Гб\"\", \"\"23 Мп\"\"]"
          },
          {
            "name": "Получение списка ключей",
            "type": "template",
            "content": "Телефон = Новый Структура;\r\nТелефон.Вставить(\"\"Диагональ\"\", 5.5);\r\nТелефон.Вставить(\"\"ОЗУ\"\", \"\"6 Гб\"\");\r\nТелефон.Вставить(\"\"Камера\"\", \"\"23 Мп\"\");\r\nКлючи = Новый Массив;\r\nДля Каждого Элемент из Телефон Цикл\r\n    Ключи.Добавить(Элемент.Ключ);\r\nКонецЦикла;\r\n//Ключи = [\"\"Диагональ\"\", \"\"ОЗУ\"\", Камера\"\"]\r\n\r\nПолучить значение по ключу\r\nПаспорт = Новый Структура;\r\nПаспорт.Вставить(\"\"Серия\"\", \"\"3004\"\");\r\nПаспорт.Вставить(\"\"Номер\"\", \"\"321123\"\");\r\nСерия = \"\"\"\";\r\nПаспорт.Свойство(\"\"Серия\"\", Серия);\r\n//Серия = \"\"3004\r\nНомер = Паспорт.Номер;\r\n//Номер = \"\"321123\"\""
          },
          {
            "name": "Проверка наличия ключа",
            "type": "template",
            "content": "Паспорт = Новый Структура;\r\nПаспорт.Вставить(\"\"Серия\"\", \"\"3004\"\");\r\nПаспорт.Вставить(\"\"Номер\"\", \"\"321123\"\");\r\nЕстьСерия = Паспорт.Свойство(\"\"Серия\"\");\r\n//ЕстьСерия = Да\r\nЕстьДатаВыдачи = Паспорт.Свойство(\"\"ДатаВыдачи\"\");\r\n//ЕстьДатаВыдачи = Нет"
          }
        ]
      },
      {
        "name": "Таблица значений",
        "type": "folder",
        "children": [
          {
            "name": "Группировка данных",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Материал\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\n\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Материал = \"\"Пластик\"\";\r\nТовар.Цена = 2500.5;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Материал = \"\"Метал\"\";\r\nТовар.Цена = 1800;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Блендер\"\";\r\nТовар.Материал = \"\"Пластик\"\";\r\nТовар.Цена = 1500;\r\nТовары.Свернуть(\"\"Материал\"\", \"\"Цена\"\");\r\n//Товары = [Пластик : 4000.5, Метал : 1800]"
          },
          {
            "name": "Добавление и удаление строк",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\n//Товары = [Чайник : 2500.5]\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\n//Товары = [Чайник : 2500.5, Тостер : 1800]\r\nТовары.Удалить(0);\r\n//Товары = [Тостер : 1800]\r\nТовары.Очистить();\r\n//Товары = [ ]"
          },
          {
            "name": "Загрузка и выгрузка колонок",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\nНазвания = Товары.ВыгрузитьКолонку(\"\"Товар\"\");\r\n//Названия = [Чайник, Тостер]\r\nНазвания[0] = \"\"Духовка\"\";\r\nТовары.ЗагрузитьКолонку(Названия, \"\"Товар\"\");\r\n//Товары = [Духовка : 2500.5, Тостер : 1800]"
          },
          {
            "name": "Заполнение значений колонки",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовары.ЗаполнитьЗначения(1000, \"\"Цена\"\");\r\n//Товары = [Чайник : 1000, Тостер : 1000]"
          },
          {
            "name": "Инициализация",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\",Новый ОписаниеТипов(\"\"Число\"\"));\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар= Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\n//Товары = [Чайник : 2500.5, Тостер : 1800]"
          },
          {
            "name": "Обход  таблицы значений ",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар= Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\nСтр = \"\"\"\";\r\nКоличество = Товары.Колонки.Количество();\r\nДля Каждого Строка из Товары Цикл\r\n    Для Н = 0 По кол - 1 Цикл\r\n        Стр = Стр + Товары.Колонки[Н].Имя +\r\n        \"\": \"\" + Строка[Н];\r\n        Стр = Стр + ?(Н < Количество - 1, \"\", \"\", \"\";\"\");\r\n    КонецЦикла;\r\n    Стр = Стр + Символы.ПС;\r\nКонецЦикла;\r\n//Стр = Товар: Чайник, Цена: 2500,5;\r\n//      Товар: Тостер, Цена: 1800;\r\n"
          },
          {
            "name": "Обход таблицы с индексом",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\nСтр = \"\"\"\";\r\nКоличество = Товары.Колонки.Количество();\r\nДля Н1 = 0 По Товары.Количество() - 1 Цикл\r\n    Для Н2 = 0 По кол - 1 Цикл\r\n        Стр = Стр + Товары.Колонки[Н2].Имя +\r\n        \"\": \"\" + Товары[Н1][Н2];\r\n        Стр = Стр + ?(Н2 < Количество - 1, \"\", \"\", \"\";\"\");\r\n    КонецЦикла;\r\n    Стр = Стр + Символы.ПС;\r\nКонецЦикла;\r\n//Стр = Товар: Чайник, Цена: 2500,5;\r\n//      Товар: Тостер, Цена: 1800;"
          },
          {
            "name": "Перемещение строк",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар= Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\n//Товары = [Чайник : 2500.5, Тостер : 1800]\r\n//сдвигаем первую строку вниз\r\nТовары.Сдвинуть(0, 1);\r\n//Товары = [Тостер : 1800, Чайник : 2500.5]\r\n//сдвигаем вторую строку вверх\r\n\r\nТовары.Сдвинуть(1, -1);\r\n//Товары = [Чайник : 2500.5, Тостер : 1800]\r\n"
          },
          {
            "name": "Перечисление колонок",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nДля Каждого Колонка Из Товары.Колонки Цикл\r\n    Сообщить(Колонка.Имя);\r\nКонецЦикла;"
          },
          {
            "name": "Поиск по таблице",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Миксер\"\";\r\nТовар.Цена = 2500;\r\n\r\nСтрока = Товары.Найти(\"\"Чайник\"\");\r\n//Строка = Чайник : 2500\r\nСтрока = Товары.Найти(\"\"Яблоко\"\");\r\n//Строка = Неопределено\r\nСтрока = Товары.Найти(1800);\r\n//Строка = Тостер : 1800\r\n//поиск в заданных колонках:\r\nСтрока = Товары.Найти(\"\"Тостер\"\", \"\"Товар, Цена\"\");\r\n//Строка = Тостер : 1800\r\nСтрока = Таб.Найти(\"\"Тостер\"\", \"\"Цена\"\");\r\n//Строка = Неопределено\r\nСтрока = Товары.Найти(\"\"Тостер\"\", \"\"Товар\"\");\r\n//Строка = Тостер : 1800\r\n\r\nЕсли (Строка <> Неопределено) Тогда\r\n         Сообщить(Строка.Товар);\r\nКонецЕсли;\r\nПараметрыОтбора = Новый Структура;\r\nПараметрыОтбора.Вставить(\"\"Цена\"\", 2500);\r\nСтроки = Товары.НайтиСтроки(ПараметрыОтбора);\r\n//массив из двух строк \"\"Чайник\"\" и \"\"Миксер\"\"\r\n"
          },
          {
            "name": "Получение индекса строк",
            "type": "template",
            "content": " Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nЧайник = Товары.Добавить();\r\nЧайник.Товар = \"\"Чайник\"\";\r\nБлендер = Товары.Добавить();\r\nБлендер.Товар = \"\"Блендер\"\";\r\nИндекс = Товары.Индекс(чайник);\r\n//Индекс = 0\r\nИндекс = Товары.Индекс(блендер);\r\n//Индекс = 1\r\n"
          },
          {
            "name": "Создание копии таблицы",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Цена = 1800;\r\nКопия1 = Товары.Скопировать();\r\n\r\n//Копия1 = [Чайник : 2500.5, Тостер : 1800]\r\nКопия2 = Товары.СкопироватьКолонки(\"\"Товар, Цена\"\");\r\n//Копия2 - пустая таблица из двух колонок\r\nОтбор = Новый Структура;\r\nОтбор.Вставить(\"\"Цена\"\", 1800);\r\nКопия3 = Товары.Скопировать(отбор);\r\n//Копия3 = [Тостер : 1800]\r\nКопия4 = Товары.Скопировать(отбор, \"\"Товар\"\");\r\n//Копия4 = [Тостер]"
          },
          {
            "name": "Сортировка данных",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Цена\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 2500.5;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Блендер\"\";\r\nТовар.Цена = 1500;\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Цена = 1800;\r\nТовары.Сортировать(\"\"Товар Убыв, Цена Возр\"\");\r\n//Товары = [Чайник : 1800, Чайник : 2500.5, Блендер : 1800]\r\n"
          },
          {
            "name": "Фильтрация (отбор) строк",
            "type": "template",
            "content": "Товары = Новый ТаблицаЗначений;\r\nТовары.Колонки.Добавить(\"\"Товар\"\");\r\nТовары.Колонки.Добавить(\"\"Материал\"\");\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Чайник\"\";\r\nТовар.Материал = \"\"Метал\"\";\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Блендер\"\";\r\nТовар.Материал = \"\"Пластик\"\";\r\nТовар = Товары.Добавить();\r\nТовар.Товар = \"\"Тостер\"\";\r\nТовар.Материал = \"\"Метал\"\";\r\nОтбор = Новый Структура;\r\nОтбор.Вставить(\"\"Материал\"\", \"\"Метал\"\");\r\nСтроки = Товары.НайтиСтроки(Отбор);\r\nДля Каждого Стр Из Строки Цикл\r\n    Сообщить(Стр.Товар); // Чайник Тостер\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Итог по колонке",
            "type": "template",
            "content": "ТЗ.Итог(\"\"ИмяКолонки\"\")"
          },
          {
            "name": "Выгрузить значение колонки в массив",
            "type": "template",
            "content": "      мЗначения = тз.ВыгрузитьКолонку(0);"
          },
          {
            "name": "Найти колонку",
            "type": "template",
            "content": "      Колонка = тз.Колонки.Найти(\"\"Комментарий\"\");"
          },
          {
            "name": "ПолучитьИмя, Заголовок колонки",
            "type": "template",
            "content": "    Колонка = тз.Колонки.Найти(\"\"Комментарий\"\");\r\n\tСообщить(Колонка.Имя); \r\n\tСообщить(Колонка.Заголовок);"
          }
        ]
      }
    ]
  },
  {
    "name": "Многопоточные операции",
    "type": "folder",
    "children": [
      {
        "name": "Запуск нового потока",
        "type": "template",
        "content": "Параметры = Новый Массив;\r\nПараметры.Добавить(\"\"Значение\"\");\r\n// запуск фонового задания\r\nФоновыеЗадания.Выполнить(\"\"РаботаСПотоками.Операция\"\", Параметры);\r\n\r\nПроцедура Операция(Параметр) Экспорт\r\n    //реализация фонового задания\r\nКонецПроцедуры\r\n"
      },
      {
        "name": "Запуск нового потока и ожидание",
        "type": "template",
        "content": "Параметры = Новый Массив;\r\nПараметры.Добавить(\"\"Значение\"\");\r\n// запуск фонового задания\r\nЗадание = ФоновыеЗадания.Выполнить(\"\"РаботаСПотоками.Операция\"\", Параметры);\r\nМассивЗаданий = Новый Массив;\r\nМассивЗаданий.Добавить(Задание);\r\nФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);\r\nСообщить(\"\"Фоновое задание выполнено\"\");\r\n\r\nПроцедура Операция(Параметр) Экспорт\r\n\r\n    //реализация фонового задания\r\n\r\nКонецПроцедуры\r\n"
      }
    ]
  },
  {
    "name": "Обработка исключений",
    "type": "folder",
    "children": [
      {
        "name": "Генерация исключения",
        "type": "template",
        "content": "Товары = Новый Массив;\r\nПродатьТовар(Товары);\r\nПроцедура ПродатьТовар(Товары) Экспорт\r\n    Если (товары.Количество() = 0) Тогда\r\n        ВызватьИсключение \"\"Отсутствует товар\"\";\r\n    КонецЕсли;\r\n    //Реализация продажи\r\nКонецПроцедуры"
      },
      {
        "name": "Перехват всех исключений",
        "type": "template",
        "content": "Товары = \"\"сыр, колбаса\"\";\r\nПопытка\r\n    Продать(Товары);\r\nИсключение\r\n    Инфо = ИнформацияОбОшибке();\r\n    Сообщить(\"\"Описание='\"\" + Инфо.Описание + \"\"'\"\");\r\n    Сообщить(\"\"Модуль='\"\" + Инфо.ИмяМодуля + \"\"'\"\");\r\n    Сообщить(\"\"НомерСтроки=\"\" + Инфо.НомерСтроки);\r\n    Сообщить(\"\"ИсходнаяСтрока='\"\" + Инфо.ИсходнаяСтрока + \"\"'\"\");\r\nКонецПопытки;\r\n\r\nПроцедура Продать(Товары) Экспорт\r\n    Если ТипЗнч(Товары) <> Тип(\"\"Массив\"\") Тогда\r\n        ВызватьИсключение \"\"Неверный параметр\"\";\r\n    КонецЕсли;\r\n    Если (Товары.Количество() = 0) Тогда\r\n        ВызватьИсключение \"\"Отсутствует товар\"\";\r\n    КонецЕсли;\r\n    //Реализация продажи\r\nКонецПроцедуры"
      },
      {
        "name": "Повторная генерация исключений",
        "type": "template",
        "content": "Попытка\r\n    ВызватьИсключение \"\"Неверный формат\"\";\r\nИсключение\r\n    //сообщаем об ошибке\r\n    Инфо = ИнформацияОбОшибке();\r\n    Сообщить(Инфо);\r\n    //здесь можно обработать ошибку\r\n    //повторно вызываем исключение\r\n    //с первоначальным описанием\r\n    ВызватьИсключение Инфо.Описание;\r\nКонецПопытки;\r\n\r\n"
      }
    ]
  },
  {
    "name": "Общие Объекты",
    "type": "folder",
    "children": [
      {
        "name": "Табличный документ",
        "type": "folder",
        "children": [
          {
            "name": "табличный документ: показать, заполнить, колонтитулы и шрифты, на принтер, масштаб, отступы",
            "type": "template",
            "content": "// получить табличный документ:\r\nТабДок = Новый ТабличныйДокумент;\r\nМакет = ПолучитьМакет(\"\"Макет\"\");\t\r\n\r\n// заполним параметры табличного документа:\r\nОбластьМакета = Макет.ПолучитьОбласть(\"\"Область\"\");\r\nОбластьМакета.Параметры.ФИО = \"\"Семенов Семен Семенович\"\";\r\nОбластьМакета.Параметры.Возраст = \"\"25\"\";\t\r\nТабДок.Вывести(ОбластьМакета);\r\n\r\n// масштаб по ширине страницы:\r\nТабДок.АвтоМасштаб = Истина;\r\n\r\n// покажем табличный документ, выведем на экран:\r\nТабДок.Показать();\r\n\r\n// настройки вывода колонтитулов:\r\nТабДок.НижнийКолонтитул.Выводить = Истина;\r\nТабДок.НижнийКолонтитул.ТекстСправа = \"\"Информация снизу справа\"\";\r\nТабДок.НижнийКолонтитул.ТекстСлева = \"\"Информация снизу слева\"\"; \r\nТабДок.НижнийКолонтитул.ТекстВЦентре = \"\"Информация снизу по центру\"\"; \r\nТабДок.НижнийКолонтитул.НачальнаяСтраница = 2; // вывод колонтитула со второй страницы\r\nНовыйШрифт = Новый Шрифт(\"\"Times New Roman\"\",10,);\r\nТабДок.НижнийКолонтитул.Шрифт = НовыйШрифт;\r\nТабДок.РазмерКолонтитулаСнизу = 36; // высота колонтитула\r\nТабДок.ВерхнийКолонтитул.Выводить = Истина; // верхний колонтитул по аналогии с нижним \r\n\r\n// настройки отступов от краев документа:\r\nТабДок.ПолеСверху = 36; // отступ сверху\r\nТабДок.ПолеСнизу = 36; // отступ сверху\r\nТабДок.ПолеСлева = 20; // отступ слева\r\nТабДок.ПолеСправа = 10; // отступ справа \r\n\r\n// сразу отправим табличный документ на принтер:\r\nТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);"
          },
          {
            "name": "Изменить цвет текста области табличного документа",
            "type": "template",
            "content": "ТабДокумент.Области.<ИмяОбласти>.ЦветТекста= WebЦвета.Красный;"
          }
        ]
      }
    ]
  },
  {
    "name": "Объекты 1С",
    "type": "folder",
    "children": [
      {
        "name": "Документы",
        "type": "folder",
        "children": [
          {
            "name": "Блокировка перед изменением",
            "type": "template",
            "content": "Док = Документы.ПриходнаяНакладная;\r\nНакл = Док.НайтиПоНомеру(6);\r\nОбъект = Накл.ПолучитьОбъект();\r\nЕсли Не Объект.Заблокирован() Тогда\r\n    Объект.Заблокировать();\r\n    //Вносим необходимые изменения\r\n    Объект.Склад = Справочники.Склады.Основной;\r\n    Объект.Записать();\r\n    Объект.Разблокировать();\r\nКонецЕсли;"
          },
          {
            "name": "Изменение представления",
            "type": "template",
            "content": "Процедура ПодпискаНаСобытиеПолученияПредставления(\r\n    Источник, Данные, Представление, СтандартнаяОбработка) Экспорт\r\n    //Представление документа будет использоваться\r\n    //во всех отчетах и журналах, где фигурирует данный документ\r\n    СтандартнаяОбработка = Ложь;\r\n    Представление = СтрШаблон(\"\"№ %1 от %2\"\",\r\n        Данные.Ссылка.ПолучитьОбъект().КаталожныйНомер,\r\n        Данные.Дата);\r\nКонецПроцедуры\r\n\t"
          },
          {
            "name": "Использование транзакции",
            "type": "template",
            "content": "Использование транзакции\r\n//выбрать документы созданные до 01.01.2017\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   ПриходнаяНакладная.Ссылка\r\n    |ИЗ\r\n    |   Документ.ПриходнаяНакладная КАК ПриходнаяНакладная\r\n    |ГДЕ\r\n    |   ПриходнаяНакладная.Дата < &Дата\"\";\r\nЗапрос.УстановитьПараметр(\"\"Дата\"\", Дата(2017, 1, 1));\r\nЭлементы = Запрос.Выполнить().Выбрать();\r\n//устанавливаем \"\"Основной\"\" склад для найденных док-в\r\n//в случае любой ошибки, изменения\r\n//по всем документам будут отменены\r\nНачатьТранзакцию();\r\nПока Элементы.Следующий() Цикл\r\n    Объект = Элементы.Ссылка.ПолучитьОбъект();\r\n    Объект.Склад = Справочники.Склады.Основной;\r\n    Объект.Записать();\r\nКонецЦикла;\r\nЗафиксироватьТранзакцию();"
          },
          {
            "name": "Копирование документа",
            "type": "template",
            "content": "Док = Документы.ПриходнаяНакладная;\r\n//находим нужный документ\r\nНакл = Док.НайтиПоНомеру(6);\r\n//создаем копию документа\r\nНовыйДокумент = Накл.Скопировать();\r\nНовыйДокумент.Склад = Справочники.Склады.Основной;\r\nНовыйДокумент.Дата = ТекущаяДата();\r\nНовыйДокумент.Записать();НовыйДокумент.Записать();"
          },
          {
            "name": "Открыть форму выбора",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ОткрытьФормуВыбора() Экспорт\r\n //процедура \"\"ПослеВыбораДокумента\"\"\r\n    //будет вызвана после выбора док-та\r\n   Оповещение = Новый ОписаниеОповещения(\r\n        \"\"ПослеВыбораДокумента\"\",\r\n        ЭтотОбъект);\r\n    ОткрытьФорму(\r\n        \"\"Документ.ПриходнаяНакладная.ФормаВыбора\"\",,,,,,\r\n        Оповещение);\r\nКонецПроцедуры            \r\n\t\r\n\r\n&НаКлиенте\r\nПроцедура ПослеВыбораДокумента(Результат, Параметры) Экспорт\r\n    Если Результат <> Неопределено Тогда\r\n        Сообщить(\"\"Выбрали документ: \"\" + Результат);\r\n    Иначе\r\n        Сообщить(\"\"Ничего не выбрали\"\");\r\n    КонецЕсли;\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Открыть форму документа",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ОткрытьФормуДокумента() Экспорт\r\n    Ссылка = НайтиДокумент(6);\r\n    Парам = Новый Структура(\"\"Ключ\"\", Ссылка);\r\n    ОткрытьФорму(\r\n        \"\"Документ.ПриходнаяНакладная.ФормаОбъекта\"\",\r\n        Парам);\r\nКонецПроцедуры\r\n&НаСервере\r\nФункция НайтиДокумент(Номер) Экспорт\r\n    Док = Документы.ПриходнаяНакладная;\r\n    Накл = Док.НайтиПоНомеру(Номер);\r\n    Возврат Накл;\r\nКонецФункции"
          },
          {
            "name": "Перебор документов",
            "type": "template",
            "content": "Перебор документов\r\n//выбрать документы созданные начиная с 01.01.2017\r\n//медленный, нерекомендуемый способ\r\nЭлементы = Документы.ПриходнаяНакладная.Выбрать();\r\nПока Элементы.Следующий() Цикл\r\n    Если (НачалоДня(Элементы.Дата) >= Дата(2017, 1, 1)) Тогда\r\n        Сообщить(Элементы);\r\n    КонецЕсли;\r\nКонецЦикла;\r\n//рекомендуемый способ с сортировкой по дате\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Ссылка\r\n|ИЗ\r\n|   Документ.ПриходнаяНакладная\r\n|ГДЕ\r\n|   Дата >= &Дата\r\n|\r\n|УПОРЯДОЧИТЬ ПО\r\n|   Дата\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Дата\"\", Дата(2017, 1, 1));\r\nЭлементы = Запрос.Выполнить().Выбрать();\r\nПока Элементы.Следующий() Цикл\r\n    Сообщить(Элементы.Ссылка);\r\nКонецЦикла;"
          },
          {
            "name": "Поиск документов",
            "type": "template",
            "content": "Док = Документы.ПриходнаяНакладная;\r\n//поиск по номеру документа\r\nНакл = Док.НайтиПоНомеру(1);\r\n //Если элемент найден\r\nЕсли (Накл <> Док.ПустаяСсылка()) Тогда\r\n    Сообщить(Накл);\r\nКонецЕсли;\r\n //поиск по реквизиту\r\nНакл = Док.НайтиПоРеквизиту(\"\"Склад\"\", Справочники.Склады.Основной);\r\n //Если элемент найден\r\nЕсли (Не Накл.Пустая()) Тогда\r\n    Сообщить(Накл);\r\nКонецЕсли;\r\n\r\n //поиск запросом по дате и складу\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\r\n    \"\"ВЫБРАТЬ\r\n    |   Ссылка\r\n    |ИЗ\r\n    |   Документ.ПриходнаяНакладная\r\n    |ГДЕ\r\n    |   Дата МЕЖДУ &С И &По\r\n    |   И Склад = &Склад\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"С\"\", '20170401');\r\nЗапрос.УстановитьПараметр(\"\"По\"\", '20170630');\r\nЗапрос.УстановитьПараметр(\"\"Склад\"\", Справочники.Склады.Основной);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Ссылка);\r\nКонецЦикла;"
          },
          {
            "name": "Поиск по документу основанию",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   Ссылка\r\n    |ИЗ\r\n    |   Документ.СчетФактура\r\n    |ГДЕ\r\n    |   ДокументОснование = &Основание\"\";\r\n Запрос.УстановитьПараметр(\"\"Основание\"\",\r\n Документы.ПриходнаяНакладная.НайтиПоНомеру(5));\r\n Выборка = Запрос.Выполнить().Выбрать();\r\nЕсли Выборка.Следующий() Тогда\r\n    Сообщить(Выборка.Ссылка);\r\nКонецЕсли;"
          },
          {
            "name": "Проведение документов",
            "type": "template",
            "content": "Документ = Документы.ПриходнаяНакладная.СоздатьДокумент();\r\nДокумент.Дата = ТекущаяДата();\r\n//провести\r\nДокумент.Записать(РежимЗаписиДокумента.Проведение);\r\n//отменить проведение\r\nДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);\r\nПроверка состояния\r\nДок = Документы.ПриходнаяНакладная;\r\n//находим нужный документ\r\nНакл = Док.НайтиПоНомеру(6);\r\nЕсли Накл.Проведен Тогда\r\n    Сообщить(\"\"Документ проведен\"\");\r\nИначеЕсли Накл.ПометкаУдаления Тогда\r\n    Сообщить(\"\"Документ удален\"\");\r\nИначе\r\n    Сообщить(\"\"Документ записан\"\");\r\nКонецЕсли"
          },
          {
            "name": "Создание документов",
            "type": "template",
            "content": "Документ = Документы.ПриходнаяНакладная.СоздатьДокумент();\r\nДокумент.Дата = ТекущаяДата();\r\nСтрока = Документ.Материалы.Добавить();\r\nСтрока.Материал = Справочники.Номенклатура.НайтиПоНаименованию(\"\"Шланг\"\");\r\nСтрока.Количество = 2;\r\nСтрока.Цена = 230;\r\nДокумент.Записать();"
          },
          {
            "name": "Удаление документа",
            "type": "template",
            "content": "Док = Документы.ПриходнаяНакладная;\r\nНакл = Док.НайтиПоНомеру(1);\r\nЕсли (Накл <> Док.ПустаяСсылка()) Тогда\r\n    //Документ помечается на удаление\r\n    Накл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n    //Документ полностью удаляется из БД\r\n    //без проверки ссылочной целостности\r\n    Накл.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          },
          {
            "name": "Форма выбора с отбором",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ОткрытьФормуВыбораСОтбором()\r\n    //Отображаем только документы\r\n    //со складом \"\"Основной\"\"\r\n    Отбор = Новый Структура;\r\n    Отбор.Вставить(\"\"Склад\"\",\r\n        ОсновнойСклад());\r\n    ПараметрыФормы = Новый Структура;\r\n    ПараметрыФормы.Вставить(\"\"Отбор\"\", Отбор);\r\n    ОткрытьФорму(\r\n        \"\"Документ.ПриходнаяНакладная.ФормаВыбора\"\",\r\n        ПараметрыФормы);\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nФункция ОсновнойСклад()\r\n    Возврат Справочники.Склады.Основной;\r\nКонецФункции"
          },
          {
            "name": "Табличная часть",
            "type": "folder",
            "children": []
          },
          {
            "name": "Провести документ",
            "type": "template",
            "content": "//1.\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст = \"\"\r\n\t|ВЫБРАТЬ\r\n\t|ПЕРВЫЕ 1\r\n\t|\tРеализацияТоваровУслуг.Ссылка КАК Ссылка\r\n\t|ИЗ\r\n\t|\tДокумент.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг\r\n\t|ГДЕ\r\n\t|\tРеализацияТоваровУслуг.Проведен = ложь\r\n\t|\tИ (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Комментарий КАК СТРОКА(10))) = \"\"\"\"Тест\"\"\"\"\r\n\t|\"\";\r\n\r\nРезультат = Запрос.Выполнить().Выбрать();\r\n\r\nесли Результат.Следующий() тогда\r\n\tсообщить(\"\"Проводим реализацию №\"\" + Результат.Ссылка.Номер + \"\" от \"\" + Результат.Ссылка.Дата);\r\n\tРеализацияТоваровУслугОбъект = Результат.Ссылка.ПолучитьОбъект();\r\n\tпопытка\r\n\t\tРеализацияТоваровУслугОбъект.Записать(РежимЗаписиДокумента.Проведение);\r\n\t\tсообщить(\"\"Успешно проведена\"\");\r\n\tисключение\r\n\t\tсообщить(\"\"Не хватает товаров\"\");\r\n\tконецпопытки\r\nиначе\r\n\tсообщить(\"\"Не найден документ\"\");\r\nконецесли;\r\n\r\n//2.\r\nДок=Документы.ОприходованиеТоваров;\r\nДокСсылка=Док.НайтиПоНомеру(\"\"00000000009\"\",Дата(\"\"20120101\"\"));\r\nЕсли НЕ(ДокСсылка=Док.ПустаяСсылка()) Тогда\r\n\tДокОб=ДокСсылка.ПолучитьОбъект();\r\n\tДокОб.Записать(РежимЗаписиДокумента.Проведение);\r\nКонецЕсли;\r\n"
          },
          {
            "name": "Примеры использования объектов",
            "type": "template",
            "content": "1.  // Глобальный контекст\r\n  // Документы\r\n// Пример: вывести все типы ссылок на элементы справочников, существующие в конфигурации.\r\nМассив = Документы.ТипВсеСсылки().Типы();\r\nДля Каждого ОчереднойТип из Массив Цикл \r\n  Сообщить(ОчереднойТип);\r\nКонецЦикла;\r\n\r\n2.  //объект ДокументыМенеджер\r\n  // .<имя документа>\r\n  // [<имя документа>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: получить макет для печати документа \"\"Оказание услуги\"\".\r\nМакет = Документы[\"\"ОказаниеУслуги\"\"].ПолучитьМакет(\"\"Печать\"\");\r\n// Пример: получить ссылку на каждый из документов, существующих в конфигурации.\r\nДля Каждого ОчереднойДокумент Из Документы Цикл\r\n  Ссылка = ОчереднойДокумент.ПолучитьСсылку();\r\n …\r\nКонецЦикла;\r\n\r\n3.   // объект ДокументМенеджер.<Имя документа>\r\n  // НайтиПоНомеру()\r\n  // НайтиПоРеквизиту()\r\n  // ПустаяСсылка()\r\n// Пример: Проверить, проведен ли документ ПриходнаяНакладная с номером 3.\r\nЕсли Документы.ПриходнаяНакладная.НайтиПоНомеру(3).Проведен Тогда\r\n  Сообщить(\"\"Документ с номером 3 проведен\"\");\r\nКонецЕсли;\r\n// Пример: Проверить, что во всех документах ПриходнаяНакладная заполнен реквизит Склад.\r\nПустаяСсылкаСклада = Справочники.Склады.ПустаяСсылка();\r\nЕсли Не Документы.ПриходнаяНакладная.НайтиПоРеквизиту(\r\n            \"\"Склад\"\", ПустаяСсылкаСклада).Пустая() Тогда \r\n  Сообщить(\"\"Есть документы, у которых не заполнен реквизит Склад\"\");\r\nКонецЕсли;\r\n\r\n4.   // объект ДокументМенеджер.<Имя документа>\r\n   // Выбрать()\r\n// Пример: Выбрать все документы ПриходнаяНакладная за текущий месяц.\r\nВыборка = Документы.ПриходнаяНакладная.Выбрать(НачалоМесяца(\r\n            ТекущаяДата()), КонецМесяца(ТекущаяДата()));\r\nПока Выборка.Следующий() Цикл \r\n  Сообщить(Выборка);\r\nКонецЦикла;\r\n\r\n5.   // объект ДокументМенеджер.<Имя документа>\r\n   // СоздатьДокумент()\r\n// Пример: Создать новый документ ПриходнаяНакладная.\r\nНовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();\r\nНовыйДокумент.Дата = ТекущаяДата();\r\nНовыйДокумент.Склад = Справочники.Склады.Основной;\r\n// Заполнить табличную часть Материалы\r\nНоваяСтрокаТабличнойЧасти = НовыйДокумент.Материалы.Добавить();\r\nНоваяСтрокаТабличнойЧасти.Материал = Справочники.Номенклатура.НайтиПоКоду(6);\r\nНоваяСтрокаТабличнойЧасти.Количество = 10;\r\nНоваяСтрокаТабличнойЧасти.Цена = 22.5;\r\nНоваяСтрокаТабличнойЧасти.Сумма = 225;\r\nНовыйДокумент.Записать();\r\n\r\n6.   // объект ДокументОбъект.<Имя документа>, объект ДокументСсылка.<Имя документа>\r\n    // Ссылка\r\n// Пример: в модуле объекта вызвать процедуру проверки заполнения реквизитов документа.\r\nЕсли Не ПроверитьЗаполнениеРеквизитов(ЭтотОбъект.Ссылка) Тогда\r\n  Сообщить(\"\"Реквизиты документа не заполнены!\"\");\r\nКонецЕсли;\r\n\r\n7.   // объект ДокументСсылка.<Имя документа>, объект ДокументОбъект.<Имя документа>\r\n  // ПолучитьОбъект()\r\n  // Скопировать()\r\n// Пример: пометить документ на удаление.\r\nНенужныйДокумент = Документы.ОказаниеУслуги.НайтиПоНомеру(13).ПолучитьОбъект();\r\nНенужныйДокумент.УстановитьПометкуУдаления(Истина);\r\n\r\n8.   // объект ДокументВыборка.<Имя документа>\r\n  // Ссылка\r\n// Сформировать список ссылок на все документы \"\"ПриходнаяНакладная\"\" за текущий месяц.\r\nСписокНакладных = Новый СписокЗначений;\r\nВыборка = Документы.ПриходнаяНакладная.Выбрать(НачалоМесяца(ТекущаяДата()),\r\n КонецМесяца(ТекущаяДата()));\r\nПока Выборка.Следующий() Цикл \r\n  СписокНакладных.Добавить(Выборка.Ссылка);\r\nКонецЦикла;\r\n\r\n9.   // объект ДокументВыборка.<Имя документа>\r\n   // ПолучитьОбъект()\r\n// Пример: удалить все документы \"\"ПриходнаяНакладная\"\".\r\nВыборка = Документы.ПриходнаяНакладная.Выбрать();\r\nПока Выборка.Следующий() Цикл \r\n  Выборка.ПолучитьОбъект().Удалить();\r\nКонецЦикла;\r\n"
          },
          {
            "name": "проверить проведен ли документ",
            "type": "template",
            "content": "Если Объект.Проведен Тогда\r\n    Сообщить(\"\"Проведен\"\")\r\nИначе\r\n    Сообщить(\"\"Не проведен\"\")\r\nКонецЕсли;"
          }
        ]
      },
      {
        "name": "Константы",
        "type": "folder",
        "children": [
          {
            "name": "Перебор всех констант",
            "type": "template",
            "content": "Для Каждого Константа Из Константы Цикл\r\n    Сообщить(Строка(Константа) + \"\" = \"\" + Константа.Получить());\r\nКонецЦикла;\r\nПолучение значения\r\n//первый способ\r\nПи = Константы.ЧислоПи.Получить();\r\nСообщить(Пи);\r\n\r\n//второй способ\r\nМенеджер = Константы.ЧислоПи.СоздатьМенеджерЗначения();\r\nМенеджер.Прочитать();\r\nПи = Менеджер.Значение;\r\nСообщить(Пи);\r\n\r\n//третий способ\r\nСписок = \"\"ЧислоПи, Экспонента\"\";\r\nНабор = Константы.СоздатьНабор(Список);\r\nНабор.Прочитать();\r\nСообщить(Набор.ЧислоПи);"
          },
          {
            "name": "Установка значений",
            "type": "template",
            "content": "Пи = 3.145;\r\n\r\n//первый способ\r\nКонстанты.ЧислоПи.Установить(Пи);\r\n\r\n//второй способ\r\nМенеджер = Константы.ЧислоПи.СоздатьМенеджерЗначения();\r\nМенеджер.Значение = Пи;\r\nМенеджер.Записать();\r\n\r\n//третий способ\r\nСписок = \"\"ЧислоПи, Экспонента\"\";\r\nНабор = Константы.СоздатьНабор(Список);\r\nНабор.ЧислоПи = Пи;\r\nНабор.Записать();"
          },
          {
            "name": "Примеры использования объектов",
            "type": "template",
            "content": "//1.   Глобальный контекст\r\n  // Константы\r\n// Пример: установить значение константы.\r\nКонстанты.Бухгалтер.Установить(\"\"Сидоров Петр Иванович\"\");\r\n\r\n//2.   объект КонстантыМенеджер\r\n  // .<имя константы>\r\n  // [<имя константы>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: прочитать значение константы.\r\nРезультат = Константы.ПрефиксНумерации.Получить();\r\nСообщить(\"\"Значение константы ПрефиксНумерации = \"\"+ Результат);\r\n// Пример: установить значение константы ПрефиксНумерации равным ЦБ.\r\nКонстанты[\"\"ПрефиксНумерации\"\"].Установить(\"\"ЦБ\"\");\r\nСообщить(\"\"Новое значение = \"\" + Константы[\"\"ПрефиксНумерации\"\"].Получить());\r\n// Пример: очистить значения всех констант.\r\nДля Каждого ОчереднаяКонстанта Из Константы Цикл\r\n  ОчереднаяКонстанта.Установить(Неопределено);\r\nКонецЦикла;\r\n\r\n//3.   объект КонстантыМенеджер\r\n  // СоздатьНабор()\r\n// Пример: установить новые значения нескольких констант.\r\nНабор = Константы.СоздатьНабор(\"\"Руководитель, Бухгалтер\"\");\r\nНабор.Руководитель = \"\"Николаев Денис Павлович\"\";\r\nНабор.Бухгалтер = \"\"Николаева Людмила Сергеевна\"\";\r\nНабор.Записать();\r\n\r\n//4.   объект КонстантаМенеджер.<имя>\r\n  // СоздатьМенеджерЗначения()\r\n// Пример: вывести значения всех констант, существующих в конфигурации.\r\nДля Каждого ОчереднаяКонстанта Из Константы Цикл\r\n  ИмяКонст = ОчереднаяКонстанта.СоздатьМенеджерЗначения().Метаданные().Имя;\r\n  ЗначениеКонст = ОчереднаяКонстанта.Получить();\r\n  Сообщить(\"\"Константа \"\"+ ИмяКонст +\"\" = \"\"+ ЗначениеКонст);\r\nКонецЦикла;\r\n"
          }
        ]
      },
      {
        "name": "Перечисления",
        "type": "folder",
        "children": [
          {
            "name": "Отображение формы выбора",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ОтобразитьФормуВыбора() Экспорт\r\n    Оповещение = Новый ОписаниеОповещения(\"\"ВыборЗавершен\"\",ЭтотОбъект);\r\n    ОткрытьФорму(\"\"Перечисление.СтороныСвета.ФормаВыбора\"\",,,,,, Оповещение);\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура ВыборЗавершен(Результат, Параметры) Экспорт\r\n\r\n    Если ЗначениеЗаполнено(Результат) Тогда\r\n        Сообщить(Результат);\r\n    Иначе\r\n        Сообщить(\"\"Значение не выбрано\"\");\r\n    КонецЕсли;\r\nКонецПроцедуры"
          },
          {
            "name": "Перебор элементов",
            "type": "template",
            "content": "&НаСервере\r\nСтороныСвета = Перечисления.СтороныСвета;\r\n\r\n//способ первый\r\nДля Каждого Элемент из СтороныСвета Цикл\r\n    Сообщить(Элемент);\r\nКонецЦикла;\r\n\r\n//способ второй\r\nДля Н = 0 По СтороныСвета.Количество() - 1 Цикл\r\n    Сообщить(СтороныСвета.Получить(Н));\r\nКонецЦикла;"
          },
          {
            "name": "Получение элемента",
            "type": "template",
            "content": "СтороныСвета = Перечисления.СтороныСвета;\r\nСевер = СтороныСвета.Север;"
          },
          {
            "name": "Примеры использования объектов",
            "type": "template",
            "content": "1.  // Глобальный контекст\r\n  // Перечисления\r\n// Пример: получить значение перечисления по индексу.\r\nПеречисления.ВидыНоменклатуры.Получить(0);\r\n2.  // объект ПеречисленияМенеджер\r\n  // .<имя перечисления>\r\n  // [<имя перечисления>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: получить количество значений перечисления\r\nПеречисления.[\"\"ВидыНоменклатуры\"\"].Количество();\r\n3.   // объект ПеречислениеМенеджер.<Имя>\r\n  // .<имя значения перечисления>\r\n  // [<имя значения перечисления>]\r\n  // [<индекс элемента коллекции>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n  // ПустаяСсылка()\r\n// Пример: получить пустую ссылку на значение перечисления.\r\n…\r\nПустаяСсылкаПеречисления = Перечисления.ВидыНоменклатуры.ПустаяСсылка();\r\nЕсли ТекущаяНоменклатура.ВидНоменклатуры = ПустаяСсылкаПеречисления Тогда\r\n  // Предложить заполнение вида номенклатуры.\r\n …\r\nКонецЕсли;\r\n"
          },
          {
            "name": "Обращение к перечислению на клиенте в управляемых формах",
            "type": "template",
            "content": "ПредопределенноеЗначение(\"\"Справочник.СвойстваОбъектов.КассаООК\"\")\r\n&НаКлиенте\r\nПроцедура УстановитьВидимостьКредитныхУсловий()\r\n\r\n\tЕсли Объект.ВариантДоговора = ПредопределенноеЗначение(\"\"Перечисление.ВариантыДоговоров.Комплектация\"\") Тогда\r\n\t\t//…\r\n\tКонецЕсли;\r\n\t\r\nКонецПроцедуры"
          }
        ]
      },
      {
        "name": "План счетов",
        "type": "folder",
        "children": [
          {
            "name": "Контекстный поиск счётов",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   Основной.Ссылка\r\n    |ИЗ\r\n    |   ПланСчетов.Основной КАК Основной\r\n    |ГДЕ\r\n    |   Основной.Наименование ПОДОБНО &Наименование\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Наименование\"\", \"\"%Товар%\"\");\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Ссылка);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор всех счётов",
            "type": "template",
            "content": "Элементы = ПланыСчетов.Основной.Выбрать();\r\nПока Элементы.Следующий() Цикл\r\n    Сообщить(Элементы.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор подчинённых счётов",
            "type": "template",
            "content": "Перебор подчинённых счётов\r\n//Перечисляем все подсчета счета Товары\r\nТовары = ПланыСчетов.Основной.Товары;\r\nЭлементы = ПланыСчетов.Основной.Выбрать(Товары);\r\nПока Элементы.Следующий() Цикл\r\n    Сообщить(Элементы.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор субконто счётов",
            "type": "template",
            "content": "//Перечисляем все субконто счета Товары\r\nТовары = ПланыСчетов.Основной.Товары;\r\nДля Каждого Субконто из Товары.ВидыСубконто Цикл\r\n    Сообщить(Субконто.ВидСубконто.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Поиск счета",
            "type": "template",
            "content": "//поиск по коду\r\nСчет = ПланыСчетов.Основной.НайтиПоКоду(\"\"41\"\");\r\n//Если счет найден\r\nЕсли (Счет <> ПланыСчетов.Основной.ПустаяСсылка()) Тогда\r\n    Сообщить(Счет.Наименование);\r\nКонецЕсли;\r\n//поиск по наименованию\r\nСчет = ПланыСчетов.Основной.НайтиПоНаименованию(\"\"Капитал\"\");\r\nЕсли (Не Счет.Пустая()) Тогда\r\n    Сообщить(Счет.Код);\r\nКонецЕсли;"
          },
          {
            "name": "Предопределенные счета",
            "type": "template",
            "content": "//Счет \"\"Товары\"\" задан в конфигурации\r\n//на форме предопределенных элементов\r\n//плана счетов Основной\r\nТовары =  ПланыСчетов.Основной.Товары;\r\nСообщить(Товары);"
          },
          {
            "name": "Создание счета",
            "type": "template",
            "content": "\r\nСчет = ПланыСчетов.Основной.СоздатьСчет();\r\nСчет.Родитель = ПланыСчетов.Основной.Товары;\r\nСчет.Код = \"\"41.05\"\";\r\nСчет.Наименование = \"\"Товары (совместная деятельность)\"\";\r\nСчет.Вид = ВидСчета.Активный;\r\nСчет.Забалансовый = Истина;\r\nСубконто1 = Счет.ВидыСубконто.Добавить();\r\nСУбконто1.ВидСубконто =\r\nПланыВидовХарактеристик.ВидыСубконто.Материалы;\r\nСУбконто1.Количественный = Истина;\r\nСчет.Записать();"
          },
          {
            "name": "Удаление счета",
            "type": "template",
            "content": "Счет = ПланыСчетов.Основной.НайтиПоКоду(\"\"41.05\"\");\r\nЕсли (Не Счет.Пустая()) Тогда\r\n    //Счет помечается на удаление\r\n    Счет.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n    //Счет полностью удаляется из БД\r\n    //без проверки ссылочной целостности   \r\n    Счет.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          }
        ]
      },
      {
        "name": "Планы видов расчета",
        "type": "folder",
        "children": [
          {
            "name": "Добавление вида расчета",
            "type": "template",
            "content": "ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.СоздатьВидРасчета();\r\nВидРасчета.Код = \"\"Районный\"\";\r\nВидРасчета.Наименование = \"\"Районный коэффициент\"\";\r\nВидРасчета.Процент = 80;\r\n\r\nБазовый = ВидРасчета.БазовыеВидыРасчета.Добавить();\r\nБазовый.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад;\r\n\r\nВедущий = ВидРасчета.ВедущиеВидыРасчета.Добавить();\r\nВедущий.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад;\r\nВедущий = ВидРасчета.ВедущиеВидыРасчета.Добавить();\r\nВедущий.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Невыход;\r\n\r\nВидРасчета.Записать();"
          },
          {
            "name": "Использование транзакции",
            "type": "template",
            "content": "\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ОсновныеНачисления.Ссылка\r\n|ИЗ\r\n|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления\r\n|ГДЕ\r\n|   ОсновныеНачисления.Наименование ПОДОБНО &ЧастьНаименования\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"ЧастьНаименования\"\", \"\"%премия%\"\");\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\n//увеличиваем размер премий на 10%\r\n//в случае любой ошибки, изменения \r\n//по всех элементам будут отменены  \r\nНачатьТранзакцию();\r\nПока Выборка.Следующий() Цикл\r\nПремия = Выборка.Ссылка.ПолучитьОбъект();\r\nПремия.Процент = Премия.Процент * 1.1;\r\nПремия.Записать();\r\nКонецЦикла;\r\nЗафиксироватьТранзакцию();"
          },
          {
            "name": "Контекстный поиск",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ОсновныеНачисления.Наименование\r\n|ИЗ\r\n|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления\r\n|ГДЕ\r\n|   ОсновныеНачисления.Наименование ПОДОБНО &ЧастьНаименования\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"ЧастьНаименования\"\", \"\"%премия%\"\");\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор всех элементов",
            "type": "template",
            "content": "Процедура ПереборЭлементов() Экспорт\r\n    Элементы = ПланыВидовРасчета.ОсновныеНачисления.Выбрать();\r\n    Пока Элементы.Следующий() Цикл\r\n       Сообщить(Элементы.Наименование);\r\n    КонецЦикла;\r\nКонецПроцедуры"
          },
          {
            "name": "Поиск вида расчёта",
            "type": "template",
            "content": "План = ПланыВидовРасчета.ОсновныеНачисления;\r\n//поиск по коду\r\nРайонный = План.НайтиПоКоду(\"\"Районный\"\");\r\n//Если элемент найден\r\nЕсли (Районный <> План.ПустаяСсылка()) Тогда\r\nСообщить(Районный.Наименование);\r\nКонецЕсли;\r\n\r\n//поиск по наименованию\r\nРайонный = План.НайтиПоНаименованию(\"\"Районный коэфф\"\", Ложь);\r\nЕсли (Не Районный.Пустая()) Тогда\r\nСообщить(Районный.Наименование);\r\nКонецЕсли;\r\n\r\n//поиск по реквизиту\r\nРайонный = План.НайтиПоРеквизиту(\"\"Процент\"\", 80);\r\nЕсли (Не Районный.Пустая()) Тогда\r\nСообщить(Районный.Наименование);\r\nКонецЕсли;"
          },
          {
            "name": "Поиск зависимых элементов",
            "type": "template",
            "content": "//Поиск видов расчетов, зависящих от элемента \"\"Невыход\"\"\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ОсновныеНачисления.Наименование\r\n|ИЗ\r\n|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления\r\n|ГДЕ\r\n|   ОсновныеНачисления.БазовыеВидыРасчета.ВидРасчета = &ВидРасчета\r\n|   ИЛИ ОсновныеНачисления.ВедущиеВидыРасчета.ВидРасчета = &ВидРасчета\r\n| ИЛИ ОсновныеНачисления.ВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"ВидРасчета\"\",\r\nПланыВидовРасчета.ОсновныеНачисления.Невыход);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование);\r\nКонецЦикла;\r\n\r\n"
          },
          {
            "name": "Предопределенные элементы",
            "type": "template",
            "content": " //вид расчета \"\"Оклад\"\" задан в конфигурации\r\n//на форме предопределенных элементов\r\n//плана видов расчетов \"\"ОсновныеНачисления\"\"\r\nОклад = ПланыВидовРасчета.ОсновныеНачисления.Оклад;\r\nСообщить(Оклад);"
          },
          {
            "name": "Удаление видов расчётов",
            "type": "template",
            "content": "План = ПланыВидовРасчета.ОсновныеНачисления;\r\nВидРасчета = План.НайтиПоКоду(\"\"Районный\"\");\r\n\r\nЕсли (ВидРасчета <> План.ПустаяСсылка()) Тогда\r\n//помечается на удаление\r\nВидРасчета.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n\r\n//полностью удаляется из БД\r\n//без проверки ссылочной целостности\r\nВидРасчета.ПолучитьОбъект().Удалить();\r\nКонецЕсли;\r\n\r\n"
          }
        ]
      },
      {
        "name": "Планы видов характеристик",
        "type": "folder",
        "children": [
          {
            "name": "Перенести элемент в группу",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;\r\n\r\nЭлемент = Характ.НайтиПоНаименованию(\"\"Вес\"\");\r\nГруппа = Характ.НайтиПоНаименованию(\"\"Числовые\"\");\r\n\r\nЕсли (Не Элемент.Пустая()) И Группа.ЭтоГруппа Тогда\r\n    Объект = Элемент.ПолучитьОбъект();\r\n    Объект.Родитель = Группа.Ссылка;\r\n    Объект.Записать();\r\nКонецЕсли\r\n"
          },
          {
            "name": "Поиск элементов",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;\r\n//поиск по коду\r\nЭлемент = Характ.НайтиПоКоду(\"\"000000002\"\");\r\n//Если элемент найден\r\nЕсли (Элемент <> Характ.ПустаяСсылка()) Тогда\r\n    //Получаем объект для изменения и\r\n    //меняем наименование\r\n    Объект = Элемент.ПолучитьОбъект();    \r\n    Объект.Наименование = Объект.Наименование + \"\" №1\"\";\r\n    Объект.Записать();\r\n    Сообщить(Элемент.Наименование);\r\nКонецЕсли;\r\n\r\n//поиск по наименованию\r\nЭлемент = Характ.НайтиПоНаименованию(\"\"Вес\"\");\r\nЕсли (Не Элемент.Пустая()) Тогда\r\n    Сообщить(Элемент.Наименование);\r\nКонецЕсли;"
          },
          {
            "name": "предопределенные элементы",
            "type": "template",
            "content": "//\"\"Материал\"\" задан в конфигурации\r\n//на форме предопределенных элементов\r\n//плана вида характеристик СвойстваНоменклатуры\r\nМатериал = ПланыВидовХарактеристик.СвойстваНоменклатуры.Материал;\r\nСообщить(Материал);"
          },
          {
            "name": "создание группы",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьГруппу();\r\nХаракт.Наименование = \"\"Числовые\"\";\r\nХаракт.Записать();"
          },
          {
            "name": "создание элемента",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьЭлемент();\r\nХаракт.Наименование = \"\"Вес\"\";\r\nХаракт.ТипЗначения = Новый ОписаниеТипов(\"\"Число\"\");\r\nХаракт.Записать();\r\n\r\nХаракт = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьЭлемент();\r\nХаракт.Наименование = \"\"Ответственный\"\";\r\nХаракт.ТипЗначения = Новый ОписаниеТипов(\"\"СправочникСсылка.Сотрудники\"\");;\r\nХаракт.Записать();\r\n"
          },
          {
            "name": "Удалить группу",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;\r\nГруппа = Характ.НайтиПоНаименованию(\"\"Числовые\"\");\r\n\r\nЕсли (Не Группа.Пустая()) Тогда\r\n    //Группа помечается на удаление\r\n    Группа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n\r\n    //Группа и вложенные в нее элементы полностью удаляются     \r\n    //из БД без проверки ссылочной целостности\r\n    Группа.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          },
          {
            "name": "Удаление элемента",
            "type": "template",
            "content": "Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;\r\nЭлемент = Характ.НайтиПоКоду(\"\"000000001\"\");\r\n\r\nЕсли (Не Элемент.Пустая()) Тогда\r\n    //Объект помечается на удаление\r\n    Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n\r\n    //Объект полностью удаляется из БД\r\n    //без проверки ссылочной целостности\r\n    Элемент.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          }
        ]
      },
      {
        "name": "Регистры бухгалтерии",
        "type": "folder",
        "children": [
          {
            "name": "Выбор записей за период",
            "type": "template",
            "content": "//Выбор всех записей за первое полугодие 2017 г.\r\n//где счет дебета = Товары\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   Управленческий.СчетДт,\r\n    |   Управленческий.СчетКт,\r\n    |   Управленческий.Сумма\r\n    |ИЗ\r\n    |   РегистрБухгалтерии.Управленческий КАК Управленческий\r\n    |ГДЕ\r\n    |   Управленческий.Период МЕЖДУ &НачПериод И &КонПериод\r\n    |   И Управленческий.СчетДт = &СчетДт\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НачПериод\"\", '20170101');\r\nЗапрос.УстановитьПараметр(\"\"КонПериод\"\", '20170630235959');\r\nЗапрос.УстановитьПараметр(\"\"СчетДт\"\", ПланыСчетов.Основной.Товары);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(\"\"\"\" + Выборка.СчетДт + \"\" / \"\" +\r\n        Выборка.СчетКт + \"\" : \"\" + Выборка.Сумма);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Выбор записей по документу",
            "type": "template",
            "content": "Номер = \"\"000000001\"\";\r\nДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(Номер);\r\n\r\n//первый вариант\r\nНабор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\n    Сообщить(\"\"\"\" + Набор[н].СчетДт + \"\" / \"\" +\r\n    Набор[н].СчетКт + \"\" : \"\" + Набор[н].Сумма);\r\nКонецЦикла;\r\n\r\n//второй вариант\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.Управленческий;\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\n    Сообщить(\"\"\"\" + Набор[н].СчетДт + \"\" / \"\" +\r\n        Набор[н].СчетКт + \"\" : \"\" + Набор[н].Сумма);\r\nКонецЦикла;\r\n\r\n//третий вариант\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   Управленческий.СчетДт,\r\n    |   Управленческий.СчетКт,\r\n    |   Управленческий.Сумма\r\n    |ИЗ\r\n    |   РегистрБухгалтерии.Управленческий КАК Управленческий\r\n    |ГДЕ\r\n    |   Управленческий.Регистратор = &Регистратор\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Регистратор\"\", Документ);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(\"\"\"\" + Выборка.СчетДт + \"\" / \"\" +\r\n        Выборка.СчетКт + \"\" : \"\" + Выборка.Сумма);\r\nКонецЦикла;"
          },
          {
            "name": "Выбор остатков",
            "type": "template",
            "content": "//выбор остатков по счету Товары на 01.04.2017\r\n//с группировкой по первому субконто\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   УправленческийОстатки.Субконто1 Как Номенклатура,\r\n    |   УправленческийОстатки.СуммаОстаток Как Сумма\r\n    |ИЗ\r\n    |   РегистрБухгалтерии.Управленческий.Остатки(\r\n    |       &НаДату\r\n    |) КАК УправленческийОстатки\r\n    |ГДЕ\r\n    |   УправленческийОстатки.Счет = &Счет\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НаДату\"\", '20170401');\r\nЗапрос.УстановитьПараметр(\"\"Счет\"\", ПланыСчетов.Основной.Товары);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(\"\" \"\" + Выборка.Номенклатура + \"\": \"\" + Выборка.Сумма);\r\nКонецЦикла;"
          },
          {
            "name": "Добавление записи",
            "type": "template",
            "content": "//Обновляем данные регистра Управленческий по\r\n//документу ПриходнаяНакладная №000000001\r\nДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\n\r\nДля Каждого Строка Из Документ.Материалы Цикл\r\n    Запись = Набор.Добавить();\r\n    Запись.СчетДт = ПланыСчетов.Основной.Товары;\r\n    Запись.СчетКт = ПланыСчетов.Основной.РасчетыСПоставщиками;\r\n    Запись.Период = Документ.Дата;\r\n    Запись.Сумма = Строка.Сумма;\r\n    Запись.КоличествоДт = Строка.Количество;\r\n    Запись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Материалы] =\r\n        Строка.Материал;\r\nКонецЦикла;\r\n\t\r\nНабор.Записать(Истина);\t"
          },
          {
            "name": "Заполнение в обработке проведения",
            "type": "template",
            "content": "//модуль документа \"\"Приходная накладная\"\"\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n\r\n    Движения.Управленческий.Записывать = Истина;\r\n\r\n    Для Каждого ТекСтрокаМатериалы Из Материалы Цикл\r\n        Движение = Движения.Управленческий.Добавить();\r\n        Движение.СчетДт = ПланыСчетов.Основной.Товары;\r\n        Движение.СчетКт = ПланыСчетов.Основной.РасчетыСПоставщиками;\r\n        Движение.Период = Дата;\r\n        Движение.Сумма = ТекСтрокаМатериалы.Сумма;\r\n        Движение.КоличествоДт = ТекСтрокаМатериалы.Количество;\r\n        Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Материалы] =\r\n        ТекСтрокаМатериалы.Материал;\r\n    КонецЦикла;\r\nКонецПроцедуры"
          },
          {
            "name": "Изменение записи",
            "type": "template",
            "content": "Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"000000001\"\");\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.Управленческий;\r\nНабор.Прочитать();\r\n\r\nДля Каждого Запись Из Набор Цикл\r\n    //увеличим проводки сумму на 10%\r\n    Запись.Сумма = Запись.Сумма * 1.1;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\n"
          },
          {
            "name": "Очистка всего регистра",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ РАЗЛИЧНЫЕ\r\n    |   Управленческий.Регистратор\r\n    |ИЗ\r\n    |   РегистрБухгалтерии.Управленческий КАК Управленческий\"\";\r\n\r\nРезультатЗапроса = Запрос.Выполнить();\r\nВыборка = РезультатЗапроса.Выбрать();\r\n\r\nНабор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();\r\n\r\n//удаляем записи по каждому регистратору\r\nПока Выборка.Следующий() Цикл\r\n    Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\n    Набор.Записать(Истина);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "получение оборотов",
            "type": "template",
            "content": "//обороты за первое полугодие 2017 года по счету Товары\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   УправленческийОборотыДтКт.СубконтоДт1 Как Номенклатура,\r\n    |   УправленческийОборотыДтКт.СуммаОборот Как Сумма\r\n    |ИЗ\r\n    |   РегистрБухгалтерии.Управленческий.ОборотыДтКт(\r\n    |       &НачПериод,\r\n    |       КОНЕЦПЕРИОДА(&КонПериод, ДЕНЬ)      \r\n    |   ) КАК УправленческийОборотыДтКт\r\n    |ГДЕ\r\n    |   УправленческийОборотыДтКт.СчетДт = &СчетДт\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НачПериод\"\", '20170101');\r\nЗапрос.УстановитьПараметр(\"\"КонПериод\"\", '20170630');\r\nЗапрос.УстановитьПараметр(\"\"СчетДт\"\", ПланыСчетов.Основной.Товары);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(\"\" \"\" + Выборка.Номенклатура + \"\": \"\" + Выборка.Сумма);\r\nКонецЦикла;"
          },
          {
            "name": "Удаление записи",
            "type": "template",
            "content": "//Удаляем записи регистра Управленческий по\r\n//документу ПриходнаяНакладная №000000001\r\nДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nЕсли Набор.Количество() > 0 Тогда\r\n//Удаляем первую запись\r\nНабор.Удалить(0);\r\n//Удаляем все записи\r\nНабор.Очистить();\r\nКонецЕсли;\r\n\r\nНабор.Записать(Истина);\r\n"
          }
        ]
      },
      {
        "name": "Регистры накопления",
        "type": "folder",
        "children": [
          {
            "name": "Выбор записей за период",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Материал.Наименование КАК Наименование,\r\n|   Количество\r\n|ИЗ\r\n|   РегистрНакопления.ОстаткиМатериалов\r\n|ГДЕ\r\n|   Период МЕЖДУ &НачПериод И &КонПериод\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НачПериод\"\", '20170101');\r\nЗапрос.УстановитьПараметр(\"\"КонПериод\"\",\r\nКонецДня('20170630'));\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование + \"\": \"\" +\r\nВыборка.Количество);\r\nКонецЦикла;"
          },
          {
            "name": "Выбор записи по документу",
            "type": "template",
            "content": "Номер = \"\"000000001\"\";\r\nДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(Номер);\r\n\r\n//первый вариант\r\nНабор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\nСообщить(Набор[н].Материал.Наименование + \"\": \"\" + Набор[н].Количество);\r\nКонецЦикла;\r\n\r\n//второй вариант\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.ОстаткиМатериалов;\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\nСообщить(Набор[н].Материал.Наименование + \"\": \"\" + Набор[н].Количество);\r\nКонецЦикла;\r\n\r\n//третий вариант\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ОстаткиМатериалов.Материал.Наименование КАК Наименование,       \r\n|   ОстаткиМатериалов.Количество\r\n|ИЗ\r\n|   РегистрНакопления.ОстаткиМатериалов КАК ОстаткиМатериалов\r\n|ГДЕ\r\n|   ОстаткиМатериалов.Регистратор.Номер = &Номер\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Номер\"\", Номер);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование + \"\": \"\" + Выборка.Количество);\r\nКонецЦикла;"
          },
          {
            "name": "Добавление записи",
            "type": "template",
            "content": "//Обновляем данные регистра ОстаткиМатериалов по\r\n//документу ОказаниеУслуг №000000001\r\nДокумент = Документы.ОказаниеУслуги.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\n\r\nДля Каждого Строка Из Документ.ПереченьНоменклатуры Цикл\r\nДвижение = Набор.Добавить();\r\nДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;\r\nДвижение.Материал = Строка.Номенклатура;\r\nДвижение.Количество = Строка.Количество;\r\nДвижение.Склад = Документ.Склад;\r\nДвижение.Период = Документ.Дата;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\n\r\nЗаолнение и обработка проведения\r\n\r\n//заполняем приход материалов   \r\nДвижения.ОстаткиМатериалов.Записывать = Истина;\r\n\r\nДля Каждого ТекСтрокаМатериалы Из Материалы Цикл\r\nДвижение = Движения.ОстаткиМатериалов.Добавить();\r\nДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;\r\nДвижение.Период = Дата;\r\nДвижение.Материал = ТекСтрокаМатериалы.Материал;\r\nДвижение.Склад = Склад;\r\nДвижение.Количество = ТекСтрокаМатериалы.Количество;\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Изменить запись",
            "type": "template",
            "content": "Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"000000001\"\");\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.ОстаткиМатериалов;\r\nНабор.Прочитать();\r\n\r\nДля Каждого Запись Из Набор Цикл\r\n//увеличим количество на 1\r\nЗапись.Количество = Запись.Количество + 1;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\n\r\nОчиства всего регистра\r\n\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Различные ОстаткиМатериалов.Регистратор\r\n|ИЗ\r\n|   РегистрНакопления.ОстаткиМатериалов КАК ОстаткиМатериалов\"\";\r\n\r\nРезультатЗапроса = Запрос.Выполнить();\r\nВыборка = РезультатЗапроса.Выбрать();\r\n\r\nНабор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\n\r\nПока Выборка.Следующий() Цикл\r\nНабор.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\nНабор.Записать(Истина);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Получение оборотов",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Материал.Наименование КАК Наименование,\r\n|   КоличествоОборот КАК Количество\r\n|ИЗ\r\n|   РегистрНакопления.ОстаткиМатериалов.Обороты(\r\n|       &НачПериод,\r\n|       &КонПериод\r\n|   )\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НачПериод\"\", '20170101');\r\nЗапрос.УстановитьПараметр(\"\"КонПериод\"\",\r\nКонецДня('20170630'));\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование +\r\n\"\": \"\" + Выборка.Количество);\r\nКонецЦикла;"
          },
          {
            "name": "Получение остатков на дату",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |   ОстаткиМатериаловОстатки.Материал,\r\n    |   ОстаткиМатериаловОстатки.КоличествоОстаток Как Количество\r\n    |ИЗ\r\n    |   РегистрНакопления.ОстаткиМатериалов.Остатки(\r\n    |       &НаДату\r\n    |) КАК ОстаткиМатериаловОстатки\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"НаДату\"\", '20170501');\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\n    Сообщить(Выборка.Материал.Наименование + \"\": \"\" + Выборка.Количество);\r\nКонецЦикла;"
          },
          {
            "name": "Удаление записи",
            "type": "template",
            "content": "//Удаляем записи регистра ОстаткиМатериалов по\r\n//документу ПриходнаяНакладная №000000001\r\nДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nЕсли Набор.Количество() > 0 Тогда\r\n//Удаляем первую запись\r\nНабор.Удалить(0);\r\n//Удаляем все записи\r\nНабор.Очистить();\r\nКонецЕсли;\r\n\r\nНабор.Записать(Истина);\r\n"
          },
          {
            "name": "Примеры использования объектов \r",
            "type": "template",
            "content": "1.  // Глобальный контекст\r\n  // РегистрыНакопления\r\n// Пример: выполнить полный пересчет итогов регистра \"\"ОстаткиМатериалов\"\".\r\nРегистрыНакопления.ОстаткиМатериалов.ПересчитатьИтоги();\r\n2.  // объект РегистрыНакопленияМенеджер\r\n   // .<имя регистра накопления>\r\n  // [<имя регистра накопления>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: рассчитать итоги регистра \"\"ОстаткиМатериалов\"\" на указанную дату.\r\nИмяРегистра = ОстаткиМатериалов;\r\nРегистрыНакопления[ИмяРегистра].УстановитьПериодРассчитанныхИтогов(УказаннаяДата);\r\n3.  // объект РегистрНакопленияМенеджер.<имя>\r\n   // СоздатьКлючЗаписи()\r\n// Пример: активизировать требуемую строку списка регистра накопления.\r\nСтруктураКлючевыхПолей = Новый Структура;\r\nСтруктураКлючевыхПолей.Вставить(\r\n      \"\"Регистратор\"\", Документы.ПриходнаяНакладная.НайтиПоНомеру(\"\"0000002\"\"));\r\nСтруктураКлючевыхПолей.Вставить(\"\"НомерСтроки\"\", 2);\r\nЭлементы.Материалы.ТекущаяСтрока = РегистрыНакопления.ОстаткиМатериалов\r\n      Со.здатьКлючЗаписи(СтруктураКлючевыхПолей);\r\n4.  // объект РегистрНакопленияМенеджер.<имя>\r\n   // СоздатьНаборЗаписей()\r\n// Пример: получить движения документа.\r\nНужныйДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(4);\r\nДвижения = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\nДвижения.Отбор.Регистратор.Значение = НужныйДокумент;\r\nДвижения.Прочитать();\r\n5.  // объект РегистрНакопленияМенеджер.<имя>\r\n  // Выбрать()\r\n  // ВыбратьПоРегистратору()\r\n// Пример: выбрать все записи регистра \"\"ОстаткиМатериалов\"\" за текущий месяц.\r\nВыборка = РегистрыНакопления.ОстаткиМатериалов.Выбрать(\r\n      НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));\r\n6.  // объект РегистрНакопленияНаборЗаписей.<имя>\r\n  // [<индекс элемента коллекции>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: получить движения документа.\r\nНужныйДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(4);\r\nДвижения = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();\r\nДвижения.Отбор.Регистратор.Значение = НужныйДокумент;\r\nДвижения.Прочитать();\r\nДля Каждого ОчередноеДвижение Из Движения Цикл\r\n  // Алгоритм обработки движений\r\n   …\r\nКонецЦикла;"
          }
        ]
      },
      {
        "name": "Регистры расчета",
        "type": "folder",
        "children": [
          {
            "name": "Добавление записи",
            "type": "template",
            "content": "//Обновляем данные регистра Начисления по\r\n//документу НачисленияСотрудникам №000000001\r\nДокумент = Документы.НачисленияСотрудникам.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\n\r\nДля Каждого Строка Из Документ.Начисления Цикл\r\nЗапись = Набор.Добавить();\r\nЗапись.Сторно = Ложь;\r\nЗапись.ВидРасчета = Строка.ВидРасчета;\r\nЗапись.ПериодДействияНачало = Строка.ДатаНачала;\r\nЗапись.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);\r\nЗапись.ПериодРегистрации = Документ.Дата;\r\nЗапись.БазовыйПериодНачало = Строка.ДатаНачала;\r\nЗапись.БазовыйПериодКонец = КонецДня(Строка.ДатаОкончания);\r\nЗапись.Сотрудник = Строка.Сотрудник;\r\nЗапись.ГрафиеРаботы = Строка.ГрафикРаботы;\r\nЗапись.ИсходныеДанные = Строка.Начислено;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\n"
          },
          {
            "name": "Заполнение в обработке проведения ",
            "type": "template",
            "content": "Процедура ОбработкаПроведения(Отказ, Режим)\r\n//модуль документа \"\"Начисления сотрудникам\"\"\r\nДвижения.Начисления.Записывать = Истина;\r\n\r\nДля Каждого ТекСтрокаНачисления Из Начисления Цикл\r\nДвижение = Движения.Начисления.Добавить();\r\nДвижение.Сторно = Ложь;\r\nДвижение.ВидРасчета = ТекСтрокаНачисления.ВидРасчета;\r\nДвижение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;\r\nДвижение.ПериодДействияКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);\r\nДвижение.ПериодРегистрации = Дата;\r\nДвижение.БазовыйПериодНачало = ТекСтрокаНачисления.ДатаНачала;\r\nДвижение.БазовыйПериодКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);\r\nДвижение.Сотрудник = ТекСтрокаНачисления.Сотрудник;\r\nДвижение.ГрафиеРаботы = ТекСтрокаНачисления.ГрафикРаботы;\r\nДвижение.ИсходныеДанные = ТекСтрокаНачисления.Начислено;\r\nКонецЦикла;\r\n\r\nДвижения.Начисления.Записать();\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Изменение записи",
            "type": "template",
            "content": "Документ = Документы.НачисленияСотрудникам.НайтиПоНомеру(\"\"000000001\"\");\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.Начисления;\r\nНабор.Прочитать();\r\n\r\nДля Каждого Запись Из Набор Цикл\r\n//увеличим результат расчета на 10%\r\nЗапись.Результат = Запись.Результат * 1.1;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\n"
          },
          {
            "name": "Очистка всего регистра",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ РАЗЛИЧНЫЕ\r\n|   Начисления.Регистратор\r\n|ИЗ\r\n|   РегистрРасчета.Начисления КАК Начисления\"\";\r\n\r\nРезультатЗапроса = Запрос.Выполнить();\r\nВыборка = РезультатЗапроса.Выбрать();\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\n\r\n//удаляем записи по каждому регистратору\r\nПока Выборка.Следующий() Цикл\r\nНабор.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\nНабор.Записать(Истина);\r\nКонецЦикла;"
          },
          {
            "name": "Получаем данные графика",
            "type": "template",
            "content": "//выбираем норму и фактическое время работы\r\n//для начисления оклада за май 2017 г.\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   НачисленияДанныеГрафика.ЗначениеПериодДействия КАК Норма,\r\n|   НачисленияДанныеГрафика.ЗначениеФактическийПериодДействия КАК Факт,\r\n|   НачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,\r\n|   НачисленияДанныеГрафика.Регистратор,\r\n|   НачисленияДанныеГрафика.Сотрудник\r\n|ИЗ\r\n|   РегистрРасчета.Начисления.ДанныеГрафика(ВидРасчета = &ВидРасчета) КАК НачисленияДанныеГрафика\r\n|ГДЕ\r\n|   НачисленияДанныеГрафика.ПериодДействияНачало <= &Начало\r\n|   И НачисленияДанныеГрафика.ПериодДействияКонец >= &Конец\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"ВидРасчета\"\", ПланыВидовРасчета.ОсновныеНачисления.Оклад);\r\nЗапрос.УстановитьПараметр(\"\"Начало\"\", '20170501');\r\nЗапрос.УстановитьПараметр(\"\"Конец\"\", '20170531');\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\nПока Выборка.Следующий() Цикл\r\n   //находим нужную строку регистра расчета\r\n   Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\n   Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);\r\n  Набор.Прочитать();\r\nДля Н = 0 по Набор.Количество() - 1 Цикл\r\n   Если Набор[Н].НомерСтроки = Выборка.НомерСтроки Тогда\r\n      Если Выборка.Норма = 0 Тогда\r\n        Набор[Н].Результат = 0;\r\n      Иначе\r\n         //расчитываем оклад\r\n         Набор[Н].Результат = (Набор[Н].ИсходныеДанные / Выборка.Норма) * Выборка.Факт;\r\n      КонецЕсли;\r\n   КонецЕсли;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\nКонецЦикла;"
          },
          {
            "name": "Получение базы для начислений",
            "type": "template",
            "content": "//выбираем базу для начисления премии\r\n//за май 2017 г.\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   НачисленияБазаНачисления.РезультатБаза КАК База,\r\n|   НачисленияБазаНачисления.НомерСтроки КАК НомерСтроки,\r\n|   НачисленияБазаНачисления.Регистратор,\r\n|   НачисленияБазаНачисления.Сотрудник\r\n|ИЗ\r\n|   РегистрРасчета.Начисления.БазаНачисления(&Измерения, &Измерения, , \r\n|       ВидРасчета = &ВидРасчета) КАК НачисленияБазаНачисления\r\n|ГДЕ\r\n|   НачисленияБазаНачисления.ПериодДействияНачало <= &Начало\r\n|   И НачисленияБазаНачисления.ПериодДействияКонец >= &Конец\"\";\r\n\r\nИзмер = Новый Массив(1);\r\nИзмер[0] = \"\"Сотрудник\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Измерения\"\", Измер);\r\nЗапрос.УстановитьПараметр(\"\"ВидРасчета\"\", ПланыВидовРасчета.ОсновныеНачисления.Премия);\r\nЗапрос.УстановитьПараметр(\"\"Начало\"\", '20170501');\r\nЗапрос.УстановитьПараметр(\"\"Конец\"\", '20170531');\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\nПока Выборка.Следующий() Цикл\r\n//находим нужную строку регистра расчета\r\nНабор.Отбор.Регистратор.Установить(Выборка.Регистратор);\r\nНабор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);\r\nНабор.Прочитать();\r\nДля Н = 0 по Набор.Количество() - 1 Цикл\r\nЕсли Набор[Н].НомерСтроки = Выборка.НомерСтроки Тогда\r\n//расчитываем премию\r\nНабор[Н].Результат = Выборка.База * 0.1;\r\nКонецЕсли;\r\nКонецЦикла;\r\n\r\nНабор.Записать(Истина);\r\nКонецЦикла;"
          },
          {
            "name": "Получение записи по документу",
            "type": "template",
            "content": "Номер = \"\"000000001\"\";\r\n\r\n//первый вариант\r\nДокумент = Документы.НачисленияСотрудникам.НайтиПоНомеру(Номер);\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\nСообщить(\"\"\"\" + Набор[н].Сотрудник + \"\" / \"\" +\r\nНабор[н].ВидРасчета + \"\" : \"\" + Набор[н].Результат);\r\nКонецЦикла;\r\n\r\n//второй вариант\r\nОбъект = Документ.ПолучитьОбъект();\r\nНабор = Объект.Движения.Начисления;\r\nНабор.Прочитать();\r\n\r\nДля н = 0 По Набор.Количество() - 1 Цикл\r\nСообщить(\"\"\"\" + Набор[н].Сотрудник + \"\" / \"\" +\r\nНабор[н].ВидРасчета + \"\" : \"\" + Набор[н].Результат);\r\nКонецЦикла;\r\n\r\n//третий вариант\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Начисления.Сотрудник,\r\n|   Начисления.ВидРасчета,\r\n|   Начисления.Результат\r\n|ИЗ\r\n|   РегистрРасчета.Начисления КАК Начисления\r\n|ГДЕ\r\n|   Начисления.Регистратор = &Регистратор\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Регистратор\"\", Документ);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(\"\"\"\" + Выборка.Сотрудник + \"\" / \"\" +\r\nВыборка.ВидРасчета + \"\" : \"\" + Выборка.Результат);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Удаление записи",
            "type": "template",
            "content": "//Удаляем записи регистра Начисления по\r\n//документу НачисленияСотрудникам №000000001\r\nДокумент = Документы.НачисленияСотрудникам.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\nНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();\r\nНабор.Отбор.Регистратор.Установить(Документ.Ссылка);\r\nНабор.Прочитать();\r\n\r\nЕсли Набор.Количество() > 0 Тогда\r\n//Удаляем первую запись\r\nНабор.Удалить(0);\r\n//Удаляем все записи\r\nНабор.Очистить();\r\nКонецЕсли;\r\n\r\nНабор.Записать(Истина);\r\n"
          }
        ]
      },
      {
        "name": "Регистры сведений",
        "type": "folder",
        "children": [
          {
            "name": "Выбор записей за период",
            "type": "template",
            "content": "Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Цены.Цена,\r\n|   Цены.Номенклатура\r\n|ИЗ\r\n|   РегистрСведений.Цены КАК Цены\r\n|ГДЕ\r\n|   Цены.Период МЕЖДУ &СДаты И &ПоДату\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"СДаты\"\", '20170101');\r\nЗапрос.УстановитьПараметр(\"\"ПоДату\"\", '20170331');\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Номенклатура.Наименование +\r\n\"\": \"\" + Выборка.Цена);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Выбор записи",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\n//отбираем все записи по конкретной номенклатуре\r\nНабор.Отбор.Номенклатура.Установить(Номенклатура);\r\n//из них выбираем запись на определенный момент времени\r\nНабор.Отбор.Период.Установить('20170101');\r\nНабор.Прочитать();\r\n\r\nЕсли Набор.Количество() > 0 Тогда\r\nСообщить(Набор[0].Цена);\r\nКонецЕсли;"
          },
          {
            "name": "Выбор записи запросом",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Цены.Цена\r\n|ИЗ\r\n|   РегистрСведений.Цены КАК Цены\r\n|ГДЕ\r\n|   Цены.Номенклатура = &Номенклатура\r\n|   И Цены.Период = &Период\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Номенклатура\"\", Номенклатура);\r\nЗапрос.УстановитьПараметр(\"\"Период\"\", '20170101');\r\n\r\nВыгрузка = Запрос.Выполнить().Выгрузить();"
          },
          {
            "name": "Добавление записи",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000001\"\");\r\n\r\n//первый способ\r\nЗапись = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();\r\nЗапись.Период = '20160101';\r\nЗапись.Номенклатура = Номенклатура;\r\nЗапись.Цена = 100;\r\nЗапись.Записать(\r\nИстина // замещать запись с такими же измерениями и периодом\r\n);\r\n\r\n//второй способ\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\nЗапись = Набор.Добавить();\r\nЗапись.Период = '20170101';\r\nЗапись.Номенклатура = Номенклатура;\r\nЗапись.Цена = 105;\r\nНабор.Записать(\r\nЛожь // не удаляем другие записи из регистра\r\n);\r\n\r\nЕсли Выгрузка.Количество() > 0 Тогда\r\nСообщить(Выгрузка[0].Цена);\r\nКонецЕсли;"
          },
          {
            "name": "Дополнительные сведения",
            "type": "folder",
            "children": []
          },
          {
            "name": "Заполнение в обработке проведения",
            "type": "template",
            "content": " //модуль документа\r\nПроцедура ОбработкаПроведения(Отказ, Режим)\r\n\r\nДвижения.Цены.Записывать = Истина;\r\n\r\nДля Каждого ТекСтрокаЦены Из Цены Цикл\r\nДвижение = Движения.Цены.Добавить();\r\nДвижение.Период = Дата;\r\nДвижение.Номенклатура = ТекСтрокаЦены.Номенклатура;\r\nДвижение.Цена = ТекСтрокаЦены.Цена;\r\nКонецЦикла;\r\n\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "Изменение записи",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей( );\r\n//Отбираем все записи по конкретной номенклатуре.\r\n//Отбор по измерениям работает только для \r\n//независивых регистров сведений.\r\nНабор.Отбор.Номенклатура.Установить(Номенклатура);\r\nНабор.Прочитать();\r\n\r\nКоличество = Набор.Количество();\r\nЕсли Количество > 0 Тогда\r\n//увеличиваем последнюю цену на 10%\r\nНабор[Количество - 1].Цена = Набор[Количество - 1].Цена * 1.1;\r\n\r\nСообщить(Набор[Количество - 1].Цена);\r\nКонецЕсли;\r\n\r\nНабор.Записать(Истина);"
          },
          {
            "name": "Очистка всего регистра",
            "type": "template",
            "content": "Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\nНабор.Записать(Истина);\r\n\r\nПолучить записи регистратора\r\n\r\nРегистратор = Документы.ЦеныНаУслуги.НайтиПоНомеру(\"\"000000001\"\");\r\n\r\n//получить записи регистра Цена\r\n//добавленные документом ЦеныНаУслуги № \"\"000000001\"\"\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Цена,\r\n|   Номенклатура.Наименование КАК Наименование\r\n|ИЗ\r\n|   РегистрСведений.Цены\r\n|ГДЕ\r\n|   Регистратор = &Регистратор\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Регистратор\"\", Регистратор);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование +\r\n\"\": \"\" + Выборка.Цена);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Получить первые записи",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\n//получить первую цену по заданной номенклатуре\r\n//начиная с 01.01.2016 г. (включительно)\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ЦеныСрезПервых.Цена\r\n|ИЗ\r\n|   РегистрСведений.Цены.СрезПервых(\r\n|       &СДаты,\r\n|       Номенклатура = &Номенклатура\r\n|   ) КАК ЦеныСрезПервых\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"СДаты\"\", '20160101');\r\nЗапрос.УстановитьПараметр(\"\"Номенклатура\"\", Номенклатура);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nЕсли Выборка.Следующий() Тогда\r\nСообщить(Выборка.Цена);\r\nКонецЕсли;\r\n\r\n"
          },
          {
            "name": "Получить последние записи",
            "type": "template",
            "content": "Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\n//получить последнюю цену по заданной номенклатуре\r\n//назначенную до 31.03.2017 г. (включительно)\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   ЦеныСрезПоследних.Цена\r\n|ИЗ\r\n|   РегистрСведений.Цены.СрезПоследних(\r\n|       &ПоДату,\r\n|       Номенклатура = &Номенклатура\r\n|   ) КАК ЦеныСрезПоследних\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"ПоДату\"\", '20170331');\r\nЗапрос.УстановитьПараметр(\"\"Номенклатура\"\", Номенклатура);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\nЕсли Выборка.Следующий() Тогда\r\nСообщить(Выборка.Цена);\r\nКонецЕсли;"
          },
          {
            "name": "Удаление записи",
            "type": "template",
            "content": " Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"000000007\"\");\r\n\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\n//отбираем все записи по конкретной номенклатуре\r\nНабор.Отбор.Номенклатура.Установить(Номенклатура);\r\nНабор.Прочитать();\r\n\r\n//удаляем первую запись\r\nЕсли Набор.Количество() > 0 Тогда\r\nНабор.Удалить(0);\r\nКонецЕсли;\r\n//Удаляем все записи соответствующие отбору\r\n//Если отбор не задан, то удалятся все записи регистра\r\nНабор.Очистить();\r\n\r\n//подтверждаем изменения\r\nНабор.Записать(Истина);"
          },
          {
            "name": "Примеры использования объектов ",
            "type": "template",
            "content": "1.  // Глобальный контекст\r\n  // РегистрыСведений\r\n// Пример: получить текущую цену из периодического регистра сведений \"\"Цены\"\".\r\nЭлемент = Справочники.Номенклатура.НайтиПоКоду(4);\r\nОтбор = Новый Структура(\"\"Номенклатура\"\", Элемент);\r\nЗначенияРесурсов = РегистрыСведений.Цены.ПолучитьПоследнее(ТекущаяДата(), Отбор);\r\nЦена = ЗначенияРесурсов.Цена;\r\n2.  // объект РегистрыСведенийМенеджер\r\n   // .<имя регистра сведений>\r\n  // [<имя регистра сведений>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: Получить начальную цену из периодического регистра сведений Цены.\r\nИмяРегистра = \"\"Цены\"\";\r\nУслуга = Справочники.Номенклатура.НайтиПоНаименованию(\"\"Диагностика\"\");\r\nОтбор = Новый Структура;\r\nОтбор.Вставить(\"\"Номенклатура\"\", Услуга );\r\nЦена = РегистрыСведений[ИмяРегистра].ПолучитьПервое(ТекущаяДата(), Отбор).Цена;\r\n3.  // объект РегистрСведенийМенеджер.<имя>\r\n   // СоздатьКлючЗаписи()\r\n// Пример: активизировать требуемую строку списка регистра сведений.\r\nСтруктураКлючевыхПолей = Новый Структура;\r\nСтруктураКлючевыхПолей.Вставить(\"\"Период\"\", Дата(\"\"20040331000000\"\"));\r\nСтруктураКлючевыхПолей.Вставить(\"\"Номенклатура\"\"\r\n        , Справочники.Номенклатура.НайтиПоКоду(\"\"0000006\"\"));\r\nЭлементы.Материалы.ТекущаяСтрока = РегистрыСведений.Цены.СоздатьКлючЗаписи(\r\n        СтруктураКлючевыхПолей);\r\n4.  // объект РегистрСведенийМенеджер.<имя>\r\n  // СоздатьНаборЗаписей()\r\n// Пример: показать номенклатуру, цена на которую была установлена в заданную дату и время.\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\nНабор.Отбор.Период.Установить(ЗаданнаяДата, Истина);\r\nНабор.Прочитать();\r\nДля Каждого ОчереднаяЗапись Из Набор Цикл\r\n  Сообщить(\"\"Номенклатура = \"\"+ ОчереднаяЗапись.Номенклатура +\"\", цена = \r\n                \"\"+ ОчереднаяЗапись.Цена);\r\nКонецЦикла;\r\n5.  // объект РегистрСведенийМенеджер.<имя>\r\n  // СоздатьМенеджерЗаписи()\r\n// Пример: добавить новое значение цены в регистр \"\"Цены\"\".\r\nЗапись = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();\r\nЗапись.Период = ТекущаяДата();\r\nЗапись.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(\"\"0000005\"\");\r\nЗапись.Цена = 568;\r\nЗапись.Записать();\r\n6.  // объект РегистрСведенийНаборЗаписей.<имя>\r\n  // [<индекс элемента коллекции>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: показать номенклатуру, цена на которую была установлена в заданную дату и время.\r\nНабор = РегистрыСведений.Цены.СоздатьНаборЗаписей();\r\nНабор.Отбор.Период.Установить(ЗаданнаяДата, Истина);\r\nНабор.Прочитать();\r\nДля Каждого ОчереднаяЗапись Из Набор Цикл\r\n  Сообщить(\"\"Номенклатура = \"\"+ ОчереднаяЗапись.Номенклатура + \"\", цена = \r\n            \"\" + ОчереднаяЗапись.Цена);\r\nКонецЦикла;\r\n7.  // объект РегистрСведенийВыборка.<имя>\r\n   // ПолучитьМенеджерЗаписи()\r\n// Пример: удалить все записи регистра сведений за текущий месяц.\r\nВыборка = РегистрыСведений.Цены.Выбрать(НачалоМесяца(ТекущаяДата())\r\n              , КонецМесяца(ТекущаяДата()));\r\nПока Выборка.Следующий() цикл Выборка.\r\n  ПолучитьМенеджерЗаписи().Удалить();\r\nКонецЦикла;\r\n8.  // объект РегистрСведенийМенеджер.<имя>\r\n  // Выбрать()\r\n  // ВыбратьПоРегистратору()\r\n// Пример: показать изменение цен на элемент номенклатуры в течение года.\r\nОтбор = Новый Структура(\"\"Номенклатура\"\", Справочники.Номенклатура\r\n            .НайтиПоКоду(\"\"0000005\"\"));\r\nВыборка = РегистрыСведений.Цены.Выбрать(НачалоГода(ТекущаяДата()), ТекущаяДата(), Отбор);\r\nПока Выборка.Следующий() цикл \r\n  Сообщить(\"\"Дата = \"\" + Выборка.Период + \"\", цена = \"\" + Выборка.Цена);\r\nКонецЦикла;\r\n"
          }
        ]
      },
      {
        "name": "Справочники",
        "type": "folder",
        "children": [
          {
            "name": "добавление элемента",
            "type": "template",
            "content": "Сотр = Справочники.Сотрудники.СоздатьЭлемент();\r\nСотр.Наименование = \"\"Некрасов Н.А.\"\";\r\nСотр.Должность = \"\"писатель\"\";\r\nСотр.Записать();"
          },
          {
            "name": "Изменение элемента",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\n\r\n//поиск по коду\r\nСотр = Спр.НайтиПоКоду(\"\"000000001\"\");\r\n//Если элемент найден\r\nЕсли (Сотр <> Спр.ПустаяСсылка()) Тогда\r\n//Получаем объект для изменения и \r\n//меняем наименование\r\nОбъект = Сотр.ПолучитьОбъект(); \r\nОбъект.Наименование = \"\"Иванов И.И.\"\";\r\nОбъект.Записать();\r\nКонецЕсли;\r\n"
          },
          {
            "name": "Использование транзакции",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\nМатросы = Спр.НайтиПоНаименованию(\"\"Матросы\"\");\r\n\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Сотрудники.Ссылка\r\n|ИЗ\r\n|   Справочник.Сотрудники КАК Сотрудники\r\n|ГДЕ\r\n|   Сотрудники.Должность ПОДОБНО &Должность\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Должность\"\", \"\"%Матрос%\"\");\r\nРезультатЗапроса = Запрос.Выполнить();\r\nВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();\r\n\r\n//перенос всех матросов в папку \"\"Матросы\"\"\r\n//в случае любой ошибки, изменения \r\n//по всем элементам будут отменены\r\nНачатьТранзакцию();\r\nПока ВыборкаДетальныеЗаписи.Следующий() Цикл\r\nОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();\r\nОбъект.Родитель = Матросы.Ссылка;\r\nОбъект.Записать();\r\nКонецЦикла;\r\nЗафиксироватьТранзакцию();\r\n"
          },
          {
            "name": "Контекстный поиск элемента",
            "type": "template",
            "content": " Запрос = Новый Запрос;\r\nЗапрос.Текст =\r\n\"\"ВЫБРАТЬ\r\n|   Сотрудники.Ссылка\r\n|ИЗ\r\n|   Справочник.Сотрудники КАК Сотрудники\r\n|ГДЕ\r\n|   Сотрудники.Должность ПОДОБНО &Должность\"\";\r\n\r\nЗапрос.УстановитьПараметр(\"\"Должность\"\", \"\"%Матрос%\"\");\r\n\r\nРезультатЗапроса = Запрос.Выполнить();\r\n\r\nВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();\r\n\r\nПока ВыборкаДетальныеЗаписи.Следующий() Цикл\r\nСообщить(ВыборкаДетальныеЗаписи.Ссылка);\r\nКонецЦикла;"
          },
          {
            "name": "перебор подчинённых",
            "type": "template",
            "content": "//Спр. Документы подчинен спр. Сотрудники\r\nСпр = Справочники.Сотрудники;\r\nСотр = Спр.НайтиПоНаименованию(\"\"Миронов\"\");\r\nВыборка = Справочники.Документы.Выбрать( , Сотр);\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор элементов группы",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\nПисатели = Спр.НайтиПоНаименованию(\"\"Писатели\"\");\r\nВыборка = Спр.Выбрать(Писатели);\r\nПока Выборка.Следующий() Цикл\r\nСообщить(Выборка.Наименование);\r\nКонецЦикла;"
          },
          {
            "name": "Перебор элементов",
            "type": "template",
            "content": "Элементы = Справочники.Сотрудники.Выбрать();\r\nПока Элементы.Следующий() Цикл\r\nСообщить(Элементы.Наименование);\r\nКонецЦикла;\r\n"
          },
          {
            "name": "Перенести элементов в группу",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\n\r\nСотр = Спр.НайтиПоНаименованию(\"\"Некрасов\"\");\r\nГруппа = Спр.НайтиПоНаименованию(\"\"Писатели\"\");\r\n\r\nЕсли (Сотр <> Спр.ПустаяСсылка()) И Группа.ЭтоГруппа Тогда\r\nОбъект = Сотр.ПолучитьОбъект();\r\nОбъект.Родитель = Группа.Ссылка;\r\nОбъект.Записать();\r\nКонецЕсли;"
          },
          {
            "name": "Поиск элементов",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники; \r\n\r\n//поиск по наименованию\r\nСотр = Спр.НайтиПоНаименованию(\"\"Некрасов\"\");\r\nЕсли (Не Сотр.Пустая()) Тогда\r\n//Получаем объект для изменения и \r\n//меняем наименование\r\nОбъект = Сотр.ПолучитьОбъект(); \r\nОбъект.Наименование = \"\"Некрасов Николай Александрович\"\";\r\nОбъект.Записать();\r\nСообщить(Сотр.Наименование);\r\nКонецЕсли;\r\n\r\n//поиск по коду\r\nСотр = Спр.НайтиПоКоду(\"\"000000001\"\");\r\n//Если элемент найден\r\nЕсли (Сотр <> Спр.ПустаяСсылка()) Тогда\r\nСообщить(Сотр.Наименование);\r\nКонецЕсли;\r\n\r\n//поиск по реквизиту\r\nСотр = Спр.НайтиПоРеквизиту(\"\"Должность\"\", \"\"писатель\"\");\r\nЕсли (Не Сотр.Пустая()) Тогда\r\nСообщить(Сотр.Наименование);\r\nКонецЕсли;"
          },
          {
            "name": "Предопределенные элементы",
            "type": "template",
            "content": "//\"\"Основной\"\" склад задан в конфигурации\r\n//на форме предопределенных элементов\r\n//справочника \"\"Склады\"\"\r\nОсновнойСклад = Справочники.Склады.Основной;\r\nСообщить(ОсновнойСклад);"
          },
          {
            "name": "Создание группы",
            "type": "template",
            "content": "Сотр = Справочники.Сотрудники.СоздатьГруппу();\r\nСотр.Наименование = \"\"Дизайнеры\"\";\r\nСотр.Записать();\r\n"
          },
          {
            "name": "Табличная часть",
            "type": "folder",
            "children": []
          },
          {
            "name": "Удаление группы",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\nГруппа = Спр.НайтиПоНаименованию(\"\"Писатели\"\");\r\n\r\n//пометить на удаление\r\nЕсли (Группа <> Спр.ПустаяСсылка()) Тогда\r\n//Группа помечается на удаление\r\nГруппа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);\r\n\r\n//Группа и вложенные в нее элементы помечаются на удаление\r\nГруппа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\nКонецЕсли;\r\n\r\n//удалить\r\nЕсли (Группа <> Спр.ПустаяСсылка()) Тогда\r\n//Группа и вложенные в нее элементы полнстью удаляются      \r\n//из БД без проверки ссылочной целостности\r\nГруппа.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          },
          {
            "name": "Удаление элемента",
            "type": "template",
            "content": "Спр = Справочники.Сотрудники;\r\nСотр = Спр.НайтиПоКоду(\"\"000000003\"\");\r\n\r\nЕсли (Сотр <> Спр.ПустаяСсылка()) Тогда\r\n//Объект помечается на удаление\r\nСотр.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\n\r\n//Объект полностью удаляется из БД\r\n//без проверки ссылочной целостности\r\nСотр.ПолучитьОбъект().Удалить();\r\nКонецЕсли;"
          },
          {
            "name": "Обратится к процедуре в модуле справочника",
            "type": "template",
            "content": "// размещается в модуле справочника\r\nПроцедура Проверка() Экспорт\r\n//  текст процедуры\r\nКонецПроцедуры;\r\n//Вызов процедуры как метода объекта «Справочник»\r\nКлиент = Справочники.Клиенты.НайтиПоКоду(1).ПолучитьОбъект();\r\nКлиент.Проверка();\r\n"
          },
          {
            "name": "Примеры использования объектов ",
            "type": "template",
            "content": "1.  // Глобальный контекст\r\n  // Справочники\r\n// Пример: вывести все типы ссылок на элементы справочников, существующие в конфигурации.\r\nМассив = Справочники.ТипВсеСсылки().Типы();\r\nДля Каждого ОчереднойТип из Массив Цикл\r\n  Сообщить(ОчереднойТип);\r\nКонецЦикла;   \r\n\r\n2.  // объект СправочникиМенеджер\r\n  // .<имя справочника>\r\n  // [<имя справочника>]\r\n  // Для Каждого … Из … Цикл … КонецЦикла;\r\n// Пример: создать новую группу справочника \"\"Номенклатура\"\".\r\nНоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();\r\nНоваяГруппа.Наименование = \"\"Моя новая группа\"\";\r\nНоваяГруппа.Записать();\r\n// Пример: получить ссылку на справочник \"\"Номенклатура\"\".\r\nСправочники[\"\"Номенклатура\"\"].ПолучитьСсылку();\r\n\r\n3.   // объект СправочникМенеджер.<Имя справочника>\r\n  // НайтиПоКоду()\r\n  // НайтиПоНаименованию()\r\n  // НайтиПоРеквизиту()\r\n  // ПустаяСсылка()\r\n  // ПолучитьСсылку()\r\n  // .<имя предопределенного элемента справочника>\r\n// Пример: проверить, помечен ли на удаление элемент справочника \"\"Номенклатура\"\" с кодом 13.\r\nЕсли Справочники.Номенклатура.НайтиПоКоду(13).ПометкаУдаления Тогда\r\n  Сообщить(\"\"Элемент с кодом 13 помечен на удаление\"\");\r\nКонецЕсли;\r\n// Пример: является ли элемент справочника \"\"Номенклатура\"\" с наименованием \"\"Услуги\"\" группой.\r\nЕсли Справочники.Номенклатура.НайтиПоНаименованию(\"\"Услуги\"\", Истина).ЭтоГруппа Тогда\r\n  Сообщить(\"\"Элемент Услуги является группой\"\");\r\nКонецЕсли;\r\n// Пример: проверить, что для всех элементов задан вид номенклатуры.\r\nПустаяСсылкаПеречисления = Перечисления.ВидыНоменклатуры.ПустаяСсылка();\r\nЕсли Не Справочники.Номенклатура.НайтиПоРеквизиту(\r\n        \"\"ВидНоменклатуры\"\", ПустаяСсылкаПеречисления).Пустая() Тогда \r\n  Сообщить(\"\"Есть элементы, для которых не задан вид номенклатуры\"\");\r\nКонецЕсли;\r\n// Пример: передать пустую ссылку в параметр метода.\r\nВыборка = Справочники.Номенклатура.Выбрать(Справочники.Номенклатура.ПустаяСсылка());\r\n\r\n4.  // объект СправочникМенеджер.<Имя справочника>\r\n  // Выбрать()\r\n  // ВыбратьИерархически()\r\n// Пример: вывести список элементов, расположенных в корне справочника.\r\nВыборка = Справочники.Номенклатура.Выбрать(Справочники.Номенклатура.ПустаяСсылка());\r\nПока Выборка.Следующий() Цикл \r\n  Если Не Выборка.ЭтоГруппа тогда Сообщить(Выборка);\r\n  КонецЕсли;\r\nКонецЦикла;\r\n// Пример: удалить все элементы иерархического справочника.\r\nВыборка = Справочники.Номенклатура.ВыбратьИерархически();\r\nПока Выборка.Следующий() Цикл \r\n  Выборка.Удалить();\r\nКонецЦикла;\r\n\r\n5.  // объект СправочникМенеджер.<Имя справочника>\r\n  // СоздатьГруппу()\r\n  // СоздатьЭлемент()\r\n// Пример: создать новый элемент справочника \"\"Сотрудники\"\".\r\nНовыйЭлемент = Справочники.Сотрудники.СоздатьЭлемент();\r\nНовыйЭлемент.Наименование = \"\"Смирнов Андрей Анатольевич\"\";\r\n// Заполнить табличную часть \"\"ТрудоваяДеятельность\"\".\r\nНоваяСтрокаТабличнойЧасти = НовыйЭлемент.ТрудоваяДеятельность.Добавить();\r\nНоваяСтрокаТабличнойЧасти.Организация = \"\"ООО НТЦ\"\";\r\nНоваяСтрокаТабличнойЧасти.НачалоРаботы = Дата(2013,02,01);\r\nНоваяСтрокаТабличнойЧасти.ОкончаниеРаботы = Дата(2013,08,31);\r\nНоваяСтрокаТабличнойЧасти.Должность = \"\"Программист\"\";\r\nНовыйЭлемент.Записать();\r\n\r\n6.  // объект СправочникОбъект.<Имя справочника>, СправочникСсылка.<Имя справочника>\r\n  // Владелец\r\n  // Родитель\r\n  // Ссылка\r\n// Пример: запретить изменение подчиненных элементов, если у\r\n// владельца установлено соответствующее свойство\r\n// \"\"ИзмененияЗапрещены\"\" в модуле формы элемента справочника.\r\nПроцедура ПередЗаписью(Отказ)\r\n  Если Владелец.ИзмененияЗапрещены Тогда Отказ = Истина; \r\n  КонецЕсли;\r\nКонецПроцедуры\r\n\r\n7.  // объект СправочникСсылка.<Имя справочника>\r\n  // ПолучитьОбъект()\r\n  // СправочникОбъект.<Имя справочника>\r\n  // Скопировать()\r\n// Пример: изменить наименование элемента справочника.\r\nЭлемент = Справочники.Номенклатура.НайтиПоКоду(10).ПолучитьОбъект();\r\nЭлемент.Наименование = \"\"Мое новое наименование\"\";\r\nЭлемент.Записать();\r\n// Пример: заполнить справочник тестовыми данными.\r\nЭлемент = Справочники.Номенклатура.СоздатьЭлемент();\r\nЭлемент.Наименование = \"\"Тестовый элемент\"\";\r\nЭлемент.Записать();\r\nДля ш = 1 по 1000 Цикл \r\n  НовыйЭлемент = Элемент.Скопировать();\r\n  НовыйЭлемент.Записать();\r\nКонецЦикла;\r\n\r\n8.  // объект СправочникВыборка.<Имя справочника>\r\n  // Ссылка\r\n \r\n// Пример: заполнить табличную часть документа\r\n// \"\"ПриходнаяНакладная\"\" всеми элементами из указанной группы справочника \"\"Номенклатура\"\".\r\nВыборка = Справочники.Номенклатура.ВыбратьИерархически(ПолеВвода1);\r\nПока Выборка.Следующий() Цикл \r\n  СсылкаНаНоменклатуру = Выборка.Ссылка;\r\n  Если СсылкаНаНоменклатуру.ЭтоГруппа Тогда Продолжить; \r\n  КонецЕсли;\r\n  НоваяСтрока = Материалы.Добавить();\r\n  НоваяСтрока.Материал = СсылкаНаНоменклатуру;\r\nКонецЦикла;\r\n\r\n9.  // объект СправочникВыборка.<Имя справочника>\r\n  // ПолучитьОбъект() \r\n// Пример: пометить все элементы неиерархического справочника на удаление.\r\nВыборка = Справочники.Клиенты.Выбрать();\r\nПока Выборка.Следующий() Цикл \r\n  Выборка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);\r\nКонецЦикла;\r\n"
          }
        ]
      },
      {
        "name": "Информация",
        "type": "folder",
        "children": [
          {
            "name": "ЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать)",
            "type": "template",
            "content": "//Для использования процедуры ЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать) в 1С необходимо выполнить следующие условия:\r\n\r\n//1. Оба параметра КудаКопировать и ОткудаКопировать должны быть ссылками на объекты, у которых совпадают типы и имена свойств.\r\n//2. Оба объекта должны быть открытыми для записи.\r\n//3. Объект КудаКопировать должен быть создан и инициализирован.\r\n//4. Объект ОткудаКопировать должен быть создан и содержать значения свойств, которые будут скопированы в объект КудаКопировать.\r\n\r\n//Пример использования:\r\n\r\n//```1C\r\nПерем КудаКопировать, ОткудаКопировать;\r\nКудаКопировать = Новый Объект(\"\"Справочник.НовыйСправочник\"\");\r\nОткудаКопировать = Справочники.СуществующийСправочник.НайтиПоКоду(\"\"123\"\");\r\n\r\nЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать);\r\n```\r\n\r\n//В данном примере происходит копирование значений свойств объекта ОткудаКопировать в объект КудаКопировать."
          }
        ]
      },
      {
        "name": "Уникальный идентификатор (GUID)",
        "type": "template",
        "content": "СправочникСсылка = Справочники.ИмяСправочника.НайтиПоНаименованию(\"\"Наименование\"\");\r\nGUID = СправочникСсылка.УникальныйИдентификатор();\r\n\r\n//Любой элемент справочника или документ хранится в базе данных. \r\n//Для идентификации он имеет уникальный «номер» в рамках базы \r\n//данных - GUID. В понятиях встроенного языка 1С, этот GUID это ссылка.\r\n\r\n//GUID назначается в момент первой записи объекта. Уже до записи \r\n//можно узнать GUID, который будет назначен объекту при записи\r\n\r\nСправочникОбъект = Справочники.ИмяСправочника.СоздатьЭлемент();\r\nGUID = СправочникОбъект.ПолучитьСсылкуНового().УникальныйИдентификатор();\r\n\r\n//Также перед записью можно назначить свой GUID. Это бывает \r\n//полезным, например, при обмене данными:\r\nGUID = \"\"Нужный нам GUID\"\"; //строка GUID обычно выглядит 6F9619FF-8B86-D011-B42D-00CF4FC964FF\r\nСправочникОбъект = Справочники.ИмяСправочника.СоздатьЭлемент();\r\nСправочникОбъект.УстановитьСсылкуНового(Справочники.ИмяСправочника.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID)));\r\n"
      }
    ]
  },
  {
    "name": "Оповещения",
    "type": "folder",
    "children": [
      {
        "name": "Оповещение объекта(Передача параметра)",
        "type": "template",
        "content": "//Модуль формы\r\n//Событие \"\"ПриИзменении\"\" поля \"\"Покупатель\"\"\r\n&НаКлиенте\r\nПроцедура ПокупательПриИзменении(Элемент)\r\n    //Отправляем оповещение о событии\r\n    Оповестить(\"\"ИзменилиПокупателя\"\", Объект.Покупатель);\r\nКонецПроцедуры\r\n//Обработка оповещения формы\r\n&НаКлиенте\r\nПроцедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)\r\n    Если ИмяСобытия = \"\"ИзменилиПокупателя\"\" Тогда\r\n        Сообщить(\"\"Текущий покупатель: \"\" + Параметр);\r\n    КонецЕсли;\r\nКонецПроцедуры"
      },
      {
        "name": "Оповещение пользователя",
        "type": "template",
        "content": "ПоказатьОповещениеПользователя(\"\"Простое оповещение пользователя!\"\");"
      },
      {
        "name": "Оповещение со ссылкой",
        "type": "template",
        "content": "Оповещение со ссылкой\r\n//Событие \"\"ПриОткрытии\"\" формы документа\r\n&НаКлиенте\r\nПроцедура ПриОткрытии(Отказ)\r\n    //Если документ за предыдущие года\r\n    Если Год(ТекущаяДата()) > Год(Объект.Дата) Тогда\r\n        //Получаем ссылку на документ\r\n        НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);\r\n        //Оповещаем пользователя о запрете редактирования\r\n        ПоказатьОповещениеПользователя(\"\"Разрешен только просмотр!\"\",\r\n            НавигационнаяСсылка,\r\n            \"\"Документ №\"\" + Объект.Номер + \"\" от \"\" + Объект.Дата);\r\n    КонецЕсли;\r\nКонецПроцедуры"
      }
    ]
  },
  {
    "name": "ФункциональныеОпции",
    "type": "folder",
    "children": [
      {
        "name": "Обновить Интерфейс",
        "type": "template",
        "content": "//При изменении значений ФО в константах, результат можно увидеть сразу же в текущем сеансе,\r\n//после выполнения следующей команды\r\nОбновитьИнтерфейс();\r\n"
      },
      {
        "name": "Получение значения",
        "type": "template",
        "content": "ПолучитьФункциональнуюОпцию(<Имя ФО>);"
      },
      {
        "name": "Установить параметры реквизит справочника",
        "type": "template",
        "content": "Процедура ПриСозданииНаСервере()  \r\n\t// Модуль формы Контрагент \r\n\t//Пример управления видимостью команды «Договоры» в форме элемента справочника «Контрагенты»:\r\n\t\r\n\t//Необходимо создать ФО с местом хранения – реквизит справочника «Контрагенты.ИспользоватьДоговоры». \r\n\t//В состав ФО включить справочник «Договоры». Также, необходимо создать параметр ФО «Контрагент» и установить \r\n\t//для свойства «Использование» - справочник Контрагенты\r\n\t\r\n\t// нужно присваивать значению параметра ФО ссылку на текущий объект\r\n     УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура(\"\"Контрагент\"\", Ссылка));  \r\n\t \r\n\t //Недостатком данного решения, является необходимость записи контрагента для управления \r\n\t //видимостью команды «Договоры». Для решения этой проблемы, можно использовать\r\n\t //для хранения значений функциональных опций отдельный справочник. В таком варианте, при изменении \r\n\t //управляющего реквизита нет необходимости перезаписывать данные текущего справочника,\r\n\t //и результат будет виден непосредственно после изменения. Дополнительным преимуществом такого варианта, будет использование одного параметра ФО «НастройкаФормы» для управления видимостью команд навигации произвольного количества объектов.\r\n\t //Свойство параметра ФО «Использование», \r\n\t //в данном случае, должно указывать на справочник с настройками \r\n\t \r\n КонецПроцедуры\r\n \r\n Процедура ПриСозданииНаСервере() \r\n    // Модуль формы НастройкиФормы\r\n\tЗапрос = Новый Запрос;\r\n    Запрос.Текст = \"\"ВЫБРАТЬ\r\n                        |          ПараметрыФО.Ссылка\r\n                        |ИЗ\r\n                        |          Справочник. ПараметрыФО КАК ПараметрыФО\r\n                        |ГДЕ\r\n                        |          ПараметрыФО. ИспользоватьДоговоры = & ИспользоватьДоговоры \"\";\r\n    Запрос.УстановитьПараметр(\"\"ИспользоватьДоговоры \"\", Объект. ИспользоватьДоговоры);\r\n\r\n    РезультатЗапроса = Запрос.Выполнить();\r\n    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();\r\n\r\n    Если ВыборкаДетальныеЗаписи.Следующий() Тогда\r\n       ЭлементНастройки = ВыборкаДетальныеЗаписи.Ссылка;\r\n    Иначе\r\n       НовыйЭлементНастройки = Справочники. ПараметрыФО.СоздатьЭлемент();\r\n       НовыйЭлементНастройки. ИспользоватьДоговоры = Объект. ИспользоватьДоговоры;\r\n       НовыйЭлементНастройки.Записать();\r\n       ЭлементНастройки = НовыйЭлементНастройки.Ссылка;                \r\n    КонецЕсли;  \r\n\r\n    УстановитьПараметрыФункциональныхОпцийФормы Новый Структура(\"\"НастройкаФормы\"\", ЭлементНастройки));\r\n КонецПроцедуры\r\n\t "
      },
      {
        "name": "Установить параметры ресурс регистра сведений",
        "type": "template",
        "content": "//Применение данного варианта параметризуемых ФО похоже на вариант с местом хранения – реквизит справочника. \r\n//Отличием можно считать возможность использования нескольких параметров для отбора значения ФО.\r\n//А также использование системного параметра ФО «Период» для отбора значения по дате в том случае, если для \r\n//хранения значений ФО используется периодический регистр сведений:\r\n//Каждое измерение регистра сведений – это отдельный параметр ФО, \r\n//который необходимо установить в форме. Дополнительно, можно установить параметр «Период», \r\n//если требуется получить значение на определенную дату.\r\n\r\n//Данный функционал удобно использовать в формах документов, для управления видимостью элементов\r\n//в зависимости от даты. Например, настроить видимость реквизитов или команд панели навигации в \r\n//зависимости от данных учетной политики, действующей на дату документа \r\n\r\nПараметрыФО = Новый Структура;\r\nПараметрыФО.Вставить(\"\"Период\"\", Объект.Дата);\r\nПараметрыФО.Вставить(\"\"Организация\"\", Объект.Организация);\r\nПараметрыФО.Вставить(\"\"Склад\"\", Объект.Склад);\r\nУстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);  \r\n\r\n//Также, можно настроить опционально (в зависимости от даты документа)\r\n//выполнение каких либо произвольных действий. Например дополнительные отборы при\r\n//выборе значений реквизитов. Для этого нужно будет обращаться к значению ФО напрямую:\r\n\r\nЕсли ПолучитьФукнциональнуюОпциюФормы(«ИспользоватьДополнительныйОтбор») Тогда\r\n   //...\r\nКонецЕсли;  \r\n\r\n//существует возможность получения значений параметризуемой ФО вне контекста \r\n//определенной формы, в любом месте программного кода:\r\n\r\nПараметрыФО = Новый Структура;\r\nПараметрыФО.Вставить(\"\"Период\"\", Объект.Дата);\r\nПараметрыФО.Вставить(\"\"Организация\"\", Объект.Организация);\r\nПараметрыФО.Вставить(\"\"Склад\"\", Объект.Склад);\r\nПолучитьФункциональнуюОпцию(\"\"ИспользоватьДополнительныйОтбор \"\", ПараметрыФО);   \r\n//В качестве второго параметра, в данном случае, передается структура со значениями параметров ФО\r\n\r\n"
      },
      {
        "name": "Настройка интерфейса",
        "type": "template",
        "content": " // можно управлять видимостью интерфейса в зависимости от текущего пользователя системы,\r\n //или в зависимости от любого другого выбранного параметра (организации, склада, подразделения).\r\n\r\n//Допустим, в зависимости от организации, которая выбрана для пользователя основной, необходимо\r\n//показывать в интерфейсе дополнительные команды. Для решения такой задачи, нужно добавить в справочник\r\n//«Организации» новый реквизит «ВыводитьДопКоманды» с типом «булево». Создать новую ФО, указав в качестве\r\n//места хранения созданный реквизит. В качестве состава ФО, выбрать необходимые команды или объекты (если нужно выводить стандартные команды).\r\n//Создать новый параметр ФО с указанием в свойстве «Использование» - справочник Организации.  Далее, необходимо при запуске системы, в модуле \r\n//управляемого приложения, определять организацию, которая выбрана для текущего пользователя основной, и устанавливать параметр функциональных опций интерфейса:\r\n\r\nПараметрыФОИнтерфейса = Новый Структура;\r\nПараметрыФОИнтерфейса.Вставить(\"\"Организация\"\",  ОсновнаяОрганизацияПользователя);\r\nУстановитьПараметрыФункциональныхОпцийИнтерфейса(ПараметрыФОИнтерфейса);\r\n\r\n//можно получить значение параметра ФО, который задан для текущего сеанса\r\nПараметрФООрганизация = ПолучитьПараметрыФункциональныхОпцийИнтерфейса().Организация;\r\n\r\n//параметры, установленные для интерфейса, по умолчанию передаются в управляемую форму"
      }
    ]
  },
  {
    "name": "БСП",
    "type": "folder",
    "children": [
      {
        "name": "Печать в Word из 1С(Пример)",
        "type": "template",
        "content": "// Шаг 1: Создать макет печатной формы  \r\n\r\n//Макет – обычный офисный документ,\r\n//в которым специальным образом\r\n//выделены области и параметры.\r\n//Может быть создан в программах:\r\n//• Microsoft Word\r\n//• OpenOffice.org Writer\r\n//• Google Docs   \r\n\r\n//Типы областей в макете\r\n\r\n//• Общая\r\n//• СтрокаТаблицы\r\n//• Список\r\n//• ВерхнийКолонтитул\r\n//• НижнийКолонтитул\r\n//• ВерхнийТитульныйКолонтитул\r\n//• НижнийТитульныйКолонтитул\r\n//• ВерхнийЧетныйКолонтитул\r\n//• НижнийЧетныйКолонтитул\r\n\r\n//Правила оформления макета\r\n\r\n//Область выделяется с помощью\r\n//разделителей вида:\r\n//{v8 Область.<Имя области>}\r\n//...\r\n//{/v8 Область.<Имя области>}\r\n\r\n//Параметры выделяются с помощью\r\n//маркеров вида:\r\n//{v8 <Имя параметра>}\r\n\r\n//Модуль Формы\r\n\r\n//Шаг 2: Добавление описания команды печати\r\n//Модуль Менеджера\r\nПроцедура ДобавитьКомандыПечати(КомандыПечати) Экспорт\r\n   КомандаПечати = КомандыПечати.Добавить();\r\n   КомандаПечати.Идентификатор = \"\"<НаименованиеИндентификатора>\"\";\r\n   КомандаПечати.Представление = НСтр(\"\"ru ='<Название представления>(Word)'\"\");\r\n   КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;\r\nКонецПроцедуры\t   \r\nПроцедура Печать(МассивОбъектов,ПараметрыПечати,КоллекцияПечатныхФорм,ОбъектыПечати,ПараметрыВывода) Экспорт\r\n\tПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,\"\"<НаименованиеИндентификатора>\"\");\r\n\tЕсли  ПечатнаяФорма <> Неопределено Тогда\r\n\t   //ОфисныеДокументы – это Соответствие:\r\n       //   • Ключ – адрес во временном хранилище, по которому находится сформированный документ\r\n       //   • Значение – Имя документа\t\r\n\t   ОфисныеДокументы = СформироватьКоммерческоеПредложение(МассивОбъектов); \r\n\t   ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;\r\n\t   ПечатнаяФорма.СинонимМакета = НСтр(\"\"ru ='<Название>'\"\");\r\n\tКонецЕсли\r\nКонецПроцедуры\r\n\r\n//Алгоритм формирования печатной формы:\r\n//1. Получить макет печатной формы:\r\n//  - метод УправлениеПечатью.МакетПечатнойФормы\r\n//2. Инициализировать макет для заполнения документа Open XМL\r\n//  - метод УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента\r\n//3. Создать и заполнить структуру областей формируемой печатной формы\r\n//4. Получить данные для печати из информационной базы\r\n//5. Сформировать печатную форму в следующей последовательности:\r\n//  • Подготовить печатную форму в формате офисного документа\r\n//    - метод УправлениеПечатью.ИнициализироватьПечатнуюФорму\r\n//  • Произвести заполнение областей печатной формы\r\n//    - для получения области метод УправлениеПечатью.ОбластьМакета\r\n//    - для заполнения области УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры\r\n//  • Поместить заполненную печатную форму в соответствие, являющееся результатом функции\r\n//6. Удалить временные файлы с помощью метода УправлениеПечатью.ОчиститьСсылки\r\n\r\nФункция СформироватьКоммерческоеПредложение(Ссылка)\r\n  \r\n \t// Подготавливаем макет для формирования печатной формы OpenXML\r\n    МакетДокумента = УправлениеПечатью.МакетПечатнойФормы(\"\"Документ.ЗаказКлиента.ПФ_DOC_КоммерческоеПредложение\"\");\r\n    Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(МакетДокумента, Неопределено);\r\n\t\r\n\t// Создаем структуру областей формируемой печатной формы OpenXМL\r\n\tОписаниеОбластей = Новый Структура;\r\n\tУправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, \"\"Заголовок\"\", \"\"Общая\"\");\r\n\tУправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, \"\"Шапка\"\", \"\"Общая\"\");\r\n\tУправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, \"\"ШапкаТаблицы\"\", \"\"Общая\"\");\r\n\tУправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, \"\"СтрокаТаблицы\"\", \"\"СтрокаТаблицы\"\");\r\n\tУправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, \"\"Подвал\"\", \"\"Общая\"\");\r\n\t\r\n\t// Подготавливаем печатную форму в формате офисного документа\r\n\tПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, Неопределено, Макет);\r\n\r\n\t//получаем данные документа\r\n\tЗапрос = Новый Запрос;\r\n\tЗапрос.Текст = \r\n\t\t\"\"ВЫБРАТЬ\r\n\t\t|\tЗаказКлиента.Номер КАК Номер,\r\n\t\t|\tЗаказКлиента.Дата КАК Дата,\r\n\t\t|\tЗаказКлиента.Контрагент КАК ПредставлениеЗаказчика,\r\n\t\t|\tЗаказКлиента.Договор КАК Договор,\r\n\t\t|\tЗаказКлиента.СуммаДокумента КАК СуммаДокумента,\r\n\t\t|\tЗаказКлиента.Ответственный КАК Менеджер,\r\n\t\t|\tЗаказКлиента.Комментарий КАК Комментарий,\r\n\t\t|\tЗаказКлиента.Организация КАК ПредставлениеОрганизации,\r\n\t\t|\tЗаказКлиента.Организация.Телефон КАК Телефон,\r\n\t\t|\tЗаказКлиента.Организация.ЭлПочта КАК Email\r\n\t\t|ИЗ\r\n\t\t|\tДокумент.ЗаказКлиента КАК ЗаказКлиента\r\n\t\t|ГДЕ\r\n\t\t|\tЗаказКлиента.Ссылка = &Ссылка\r\n\t\t|;\r\n\t\t|\r\n\t\t|////////////////////////////////////////////////////////////////////////////////\r\n\t\t|ВЫБРАТЬ\r\n\t\t|\tЗаказКлиентаТовары.Ссылка КАК Ссылка,\r\n\t\t|\tЗаказКлиентаТовары.НомерСтроки КАК НС,\r\n\t\t|\tЗаказКлиентаТовары.Номенклатура КАК Номенклатура,\r\n\t\t|\tЗаказКлиентаТовары.Количество КАК Количество,\r\n\t\t|\tЗаказКлиентаТовары.ЕдиницаИзмерения КАК ЕдИзм,\r\n\t\t|\tЗаказКлиентаТовары.Цена КАК Цена,\r\n\t\t|\tЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,\r\n\t\t|\tЗаказКлиентаТовары.Сумма КАК Сумма,\r\n\t\t|\tЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,\r\n\t\t|\tЗаказКлиентаТовары.СуммаВсего КАК СуммаВсего\r\n\t\t|ИЗ\r\n\t\t|\tДокумент.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары\r\n\t\t|ГДЕ\r\n\t\t|\tЗаказКлиентаТовары.Ссылка = &Ссылка\"\";\r\n\t\r\n\tЗапрос.УстановитьПараметр(\"\"Ссылка\"\", Ссылка);\r\n\t\r\n\tДанныеДляПечати = Запрос.ВыполнитьПакет();\r\n\r\n\tШапка = ДанныеДляПечати[0].Выгрузить();\r\n\tТовары = ДанныеДляПечати[1].Выгрузить();\r\n\t\r\n\tДанныеШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Шапка[0]);\r\n\tДанныеШапка[\"\"Номер\"\"] = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапка[\"\"Номер\"\"]);\r\n\tДанныеШапка[\"\"Дата\"\"] = Формат(ДанныеШапка[\"\"Дата\"\"], \"\"ДФ=dd.MM.yyyy\"\");\r\n\t\r\n\tДанныеТовары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Товары);\r\n\t\r\n\t// Вывод заголовка\r\n\tОбласть = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[\"\"Заголовок\"\"]);\r\n\tУправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);\r\n\t\t\r\n\t// Вывод шапки документа\r\n\tОбласть = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[\"\"Шапка\"\"]);\r\n\tУправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);\r\n\t\r\n\t// Вывод таблицы\r\n\tЕсли ДанныеТовары.Количество() > 0 Тогда\r\n\t\tОбласть = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[\"\"ШапкаТаблицы\"\"]);\r\n\t\tУправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);\r\n\t\tОбласть = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[\"\"СтрокаТаблицы\"\"]);\r\n\t\tУправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеТовары);\r\n\tКонецЕсли;\r\n\r\n\t// Вывод подвала\r\n\tОбласть = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[\"\"Подвал\"\"]);\r\n\tУправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);\r\n\r\n\t// Помещаем сформированную печатную форму в соответствие ОфисныеДокументы\r\n\tАдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);\r\n\t\r\n\t//удаление временных файлов\r\n\tУправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма);\t\r\n\tУправлениеПечатью.ОчиститьСсылки(Макет);\r\n\r\n\tВозврат АдресХранилищаПечатнойФормы;\r\n\t\r\nКонецФункции // СформироватьКоммерческоеПредложение()\r\n"
      },
      {
        "name": "Печать Создание печатной формы ",
        "type": "template",
        "content": "//1. ОбщийМодуль УправлениеПечатьюПредопределенный\r\n// Добавить в процедуру ПриОпределенииОбъектовСКомандамиПечати\r\nСписокОбъектов.Добавить(Документы.<ИмяДокумента>);\r\n\r\n//2.МОДУЛЬ МЕНЕДЖЕРА ОБЪЕКТА \r\n#Область ПрограммныйИнтерфейс\r\n\r\n// Заполняет список команд печати.\r\n// \r\n// Параметры:\r\n//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.\r\n//\r\nПроцедура ДобавитьКомандыПечати(КомандыПечати) Экспорт\r\n\t\r\n\t// Счет на оплату\r\n\tКомандаПечати = КомандыПечати.Добавить();\r\n\tКомандаПечати.МенеджерПечати = \"\"Документ.<ИмяДокумента>\"\";\r\n\tКомандаПечати.Идентификатор = \"\"<Идентификатор>\"\";                     \r\n\t//КомандаПечати.МестоРазмещения = \"\"<ИмяПодменюНаФорме>\"\";\r\n\tКомандаПечати.Представление = НСтр(\"\"ru = '<Представление>'\"\");\r\n\tКомандаПечати.ПроверкаПроведенияПередПечатью = Ложь; \r\n\r\nКонецПроцедуры\r\n\r\n#КонецОбласти \r\n\r\n// Формирует печатные формы.\r\n//\r\n// Параметры:\r\n//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;\r\n//  ПараметрыПечати – Структура – дополнительные настройки печати;\r\n//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)\r\n//  ОбъектыПечати – СписокЗначений – значение – ссылка на объект;\r\n//                                            представление – имя области, в которой был выведен объект (выходной параметр);\r\n//  ПараметрыВывода – Структура – дополнительные параметры сформированных табличных документов (выходной параметр).\r\n//\r\nПроцедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт\r\n\t\r\n\tПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, \"\"<Идентификатор>\"\");\r\n    Если ПечатнаяФорма <> Неопределено Тогда\r\n        ПечатнаяФорма.ТабличныйДокумент = <ИмяПроцедурыФормированияТабДокумента>(МассивОбъектов, ОбъектыПечати);\r\n        ПечатнаяФорма.СинонимМакета = НСтр(\"\"ru = '<СинонимМакета>'\"\");\r\n        ПечатнаяФорма.ПолныйПутьКМакету = \"\"Документ.<ИмяДокумента>.<ИмяМакета>\"\";\r\n\tКонецЕсли;\r\n\t\r\nКонецПроцедуры      \r\n\r\n// Формирует табличный документ печатной формы \"\"Счет на оплату\"\"\r\n//\r\n// Параметры:\r\n//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;\r\n//  ПараметрыПечати – Структура – дополнительные настройки печати;\r\n//\r\nФункция ПечатьСчетаНаОплату(МассивОбъектов, ОбъектыПечати)\r\n\t\r\n\t// Создаем табличный документ и устанавливаем имя параметров печати.\r\n    ТабличныйДокумент = Новый ТабличныйДокумент;\r\n    ТабличныйДокумент.КлючПараметровПечати = \"\"ПараметрыПечати_<Идентификатор>\"\";\r\n\t\r\n\tМакет = УправлениеПечатью.МакетПечатнойФормы(\"\"Документ.<ИмяДокумента>.<ИмяМакета>\"\");\r\n\t\r\n    // Получаем запросом необходимые данные.\r\n    Запрос = Новый Запрос();\r\n    Запрос.Текст =\r\n    \"\"ВЫБРАТЬ\r\n    |\tТаблицаДокумента.Ссылка КАК Ссылка\r\n    |ИЗ\r\n    |\tДокумент.<ИмяДокумента> КАК ТаблицаДокумента\r\n    |ГДЕ\r\n    |\tТаблицаДокумента.Ссылка В(&МассивОбъектов)\"\";\r\n\t\r\n\tЗапрос.УстановитьПараметр(\"\"МассивОбъектов\"\", МассивОбъектов);\r\n    Шапка = Запрос.Выполнить().Выбрать();\r\n    \r\n    ПервыйДокумент = Истина;\r\n    \r\n    Пока Шапка.Следующий() Цикл\r\n\t\t\r\n\t\tЕсли Не ПервыйДокумент Тогда\r\n            // Все документы нужно выводить на разных страницах.\r\n            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();\r\n        КонецЕсли;\r\n        ПервыйДокумент = Ложь;\r\n        // Запомним номер строки, с которой начали выводить текущий документ.\r\n        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;\r\n\r\n\t\t//Начало вывода документа\r\n\t\t//...алгоритм заполнения табличного документа...\r\n\t\t//Конец вывода документа\r\n\t\t\r\n        // В табличном документе необходимо задать имя области, в которую был \r\n        // выведен объект. Нужно для возможности печати комплектов документов.\r\n        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, \r\n            НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);\r\n\r\n\tКонецЦикла;\r\n\r\n\tВозврат ТабличныйДокумент;\r\n\t\r\nКонецФункции    \r\n\r\n//3. МОДУЛЬ ФОРМЫ ДОКУМЕНТА\r\n\r\n//1. Добавить в процедуру \"\"ПриСозданииНаСервере\"\"\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n\r\n//2. Добавить в процедуру \"\"ПриЧтенииНаСервере\"\"\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n\r\n//3. Добавить в процедуру \"\"ПриОткрытии\"\"\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n\r\n//4. Добавить в процедуру \"\"ПослеЗаписи\"\"\r\n\t\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n\r\n//*****************************************************\r\n\r\n//5. Добавить в модуль формы следующие процедуры\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\n&НаКлиенте\r\nПроцедура Подключаемый_ВыполнитьКоманду(Команда)\r\n    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт\r\n    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);\r\nКонецПроцедуры\r\n\r\n&НаСервере\r\nПроцедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)\r\n    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);\r\nКонецПроцедуры\r\n\r\n&НаКлиенте\r\nПроцедура Подключаемый_ОбновитьКоманды()\r\n    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);\r\nКонецПроцедуры\r\n\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n//Примечание:\r\n//Объект - Имя реквизита формы типа \"\"ДанныеФормыСтруктура\"\" (основной реквизит формы документа)   \r\n\r\n//4. МОДУЛЬ ФОРМЫ СПИСКА\r\n\r\n//1. Добавить в процедуру \"\"ПриСозданииНаСервере\"\"\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n\r\n//2. Добавить в обработчик события \"\"ПриАктивизацииСтроки\"\" таблицы формы, которая отображает список\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\nПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n\r\n//3. Добавить в модуль формы следующие процедуры\r\n\r\n// СтандартныеПодсистемы.ПодключаемыеКоманды\r\n&НаКлиенте\r\nПроцедура Подключаемый_ВыполнитьКоманду(Команда)\r\n    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);\r\nКонецПроцедуры         \r\n\r\n&НаКлиенте\r\nПроцедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт\r\n    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);\r\nКонецПроцедуры         \r\n\r\n&НаСервере\r\nПроцедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)\r\n    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);\r\nКонецПроцедуры         \r\n\r\n&НаКлиенте\r\nПроцедура Подключаемый_ОбновитьКоманды()\r\n    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);\r\nКонецПроцедуры\r\n\r\n// Конец СтандартныеПодсистемы.ПодключаемыеКоманды\r\n\r\n//*****************************************************\r\n//Примечание:\r\n//Элементы.Список - элемент формы с типом \"\"ТаблицаФормы\"\" (который связан с динамическим списком)"
      },
      {
        "name": "Инициализация и установка параметров сеанса",
        "type": "template",
        "content": "//Параметры сеанса устанавливаются \"\"лениво\"\", лишь при обращении к нему.\r\n\r\n// Модуль Сеанса \r\n\r\nПроцедура УстановкаПараметровСеанса(ИменаПараметровСеанса)\r\n\t\r\n\t// СтандартныеПодсистемы\r\n\tСтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ИменаПараметровСеанса);\r\n\t// Конец СтандартныеПодсистемы\r\n\t\r\nКонецПроцедуры\r\n\r\n //Общий модуль   ОбщегоНазначенияПереопределяемый  \r\n \r\n // Определяет соответствие имен параметров сеанса и обработчиков для их установки.\r\n// Вызывается для инициализации параметров сеанса из обработчика события модуля сеанса УстановкаПараметровСеанса\r\n// (подробнее о нем см. синтакс-помощник).\r\n//\r\n// В указанных модулях должна быть размещена процедура обработчика, в которую передаются параметры:\r\n//  ИмяПараметра           - Строка - имя параметра сеанса, который требуется установить.\r\n//  УстановленныеПараметры - Массив - имена параметров, которые уже установлены.\r\n// \r\n// Далее пример процедуры обработчика для копирования в указанные модули.\r\n//\r\n//// Параметры:\r\n////  ИмяПараметра  - Строка\r\n////  УстановленныеПараметры - Массив из Строка\r\n////\r\n//Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт\r\n//\t\r\n//  Если ИмяПараметра = \"\"ТекущийПользователь\"\" Тогда\r\n//\t\tПараметрыСеанса.ТекущийПользователь = Значение;\r\n//\t\tУстановленныеПараметры.Добавить(\"\"ТекущийПользователь\"\");\r\n//  КонецЕсли;\r\n//\t\r\n//КонецПроцедуры\r\n//\r\n// Параметры:\r\n//  Обработчики - Соответствие из КлючИЗначение:\r\n//    * Ключ     - Строка - в формате \"\"<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>\"\".\r\n//                   Символ '*'используется в конце имени параметра сеанса и обозначает,\r\n//                   что один обработчик будет вызван для инициализации всех параметров сеанса\r\n//                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.\r\n//\r\n//    * Значение - Строка - в формате \"\"<ИмяМодуля>.УстановкаПараметровСеанса\"\".\r\n//\r\n//  Пример:\r\n//   Обработчики.Вставить(\"\"ТекущийПользователь\"\", \"\"ПользователиСлужебный.УстановкаПараметровСеанса\"\");\r\n//\r\n\r\n  Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт\r\n\t\r\n\tОбработчики.Вставить(\"\"ТекущийНачальникУправления\"\",\"\"РаботаСПараметрамиСеансаНаСервере.УстановитьПараметрыСеанса\"\");\r\n\t\r\nКонецПроцедуры\r\n\r\n\r\n//Процедура иницаизирущая параметры сианса  Общий модуль РаботаСПараметрамиСеансаНаСервере   \r\n//Тут мы пишем свои параметры сианса\r\n\r\n Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт\r\n   \r\n  ОпределитьТекущегоНачальника(ТекущаяДата());  \r\n  \r\n  УстановленныеПараметры.Добавить(\"\"ТекущийНачальникУправления\"\");\r\n               \r\nКонецПроцедуры\r\n\r\nПроцедура ОпределитьТекущегоНачальника(Период) Экспорт\r\n\t   \t\r\n\tЗапрос = Новый Запрос;\r\n\tЗапрос.Текст = \r\n\t\t\"\"ВЫБРАТЬ\r\n\t\t|\tУчетнаяПолитикаСрезПоследних.НачальникУправления КАК НачальникУправления\r\n\t\t|ИЗ\r\n\t\t|\tРегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, ) КАК УчетнаяПолитикаСрезПоследних\"\";\r\n\t\r\n\tЗапрос.УстановитьПараметр(\"\"Период\"\", Период);\r\n\t\r\n\tРезультатЗапроса = Запрос.Выполнить();\r\n\t\r\n\tВыборка = РезультатЗапроса.Выбрать();\r\n\t\r\n\tЕсли Выборка.Следующий() Тогда\r\n\t\tПараметрыСеанса.ТекущийНачальникУправления =  Выборка.НачальникУправления;\r\n\tИначе\r\n\t\tСообщить(\"\"В регистре сведений 'Учетная политика' не указан BOSS всея управления\"\");\r\n\tКонецЕсли;\r\n\t\r\nКонецПроцедуры\t\r\n"
      },
      {
        "name": "Дополнительные отчеты и обработки",
        "type": "template",
        "content": "//Эта функция позволяет добавить внешний отчет в справочник \"\"Дополнительные отчеты и обработки\"\". Ее необходимо разместить в модуле отчета.\r\nФункция СведенияОВнешнейОбработке() Экспорт\r\n\t\r\n\tПараметрыРегистрации         = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();\r\n\tПараметрыРегистрации.Вид     = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();\r\n\tПараметрыРегистрации.Версия  = \"\"1.0\"\";\r\n\tКоманда                      = ПараметрыРегистрации.Команды.Добавить();\r\n\tКоманда.Представление        = Метаданные().Представление();\r\n\tКоманда.Идентификатор        = Метаданные().ПолноеИмя();\r\n\tКоманда.Использование        = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();\r\n\tКоманда.ПоказыватьОповещение = Ложь;\r\n\r\n\tВозврат ПараметрыРегистрации;\r\n\r\nКонецФункции"
      },
      {
        "name": "ПроверитьПроведенностьДокументов",
        "type": "template",
        "content": "//Вызов с клиента\r\nДокументыТребующиеПроведение = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ДокументыМассив);\r\n\r\n// Вызов с сервера\r\nДокументыТребующиеПроведение = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);"
      },
      {
        "name": "Как узнать версию БСП в 1С 8.3",
        "type": "template",
        "content": "// Текущую версию БСП можно узнать через регистр \"\"Версии подсистем\"\",\r\n// Пункт меню -> Функции для технического специалиста\r\n// И найти запись \"\"СтандартныеПодсистемы\"\" или программно:\r\n\r\n&НаСервере\r\nФункция ПолучитьВерсиюБСП()\r\n   ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();\r\n   ОбщегоНазначения.СообщитьПользователю(ВерсияБСП);\r\n   Возврат ВерсияБСП;\r\nКонецФункции"
      },
      {
        "name": "Буфер обмена",
        "type": "folder",
        "children": [
          {
            "name": "СкопироватьВБуферОбмена",
            "type": "template",
            "content": "ОбщегоНазначения.СкопироватьВБуферОбмена(Данные, Источник);\r\n\r\nПроцедура ПоместитьТаблицуЗначенийВБуферОбмена(Таблица) Экспорт\r\n\r\n   ТаблицаДляБуфера = Таблица.Скопировать();\r\n   ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаДляБуфера, \"\"КопированиеВставкаСтрок\"\");\r\n\r\nКонецПроцедуры  \r\n\r\n// Помещает произвольные данные во внутренний буфер обмена, откуда их можно получить с помощью СтрокиИзБуфераОбмена.\r\n//\r\n// Параметры:\r\n//  Данные           - Произвольный - данные, которые необходимо поместить в внутренний буфер обмена.\r\n//  Источник         - Строка       - произвольный строковый идентификатор, например, имя объекта,\r\n//                                    строки табличной части которого помещаются во внутренний буфер обмена.\r\n//\r\nПроцедура СкопироватьВБуферОбмена(Данные, Источник = Неопределено) Экспорт\r\n\t\r\n\tТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;\r\n\t\r\n\tЕсли ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда\r\n\t\tАдрес = ТекущийБуферОбмена.Данные;\r\n\tИначе\r\n\t\tАдрес = Новый УникальныйИдентификатор;\r\n\tКонецЕсли;\r\n\t\r\n\tДанныеВХранилище = ПоместитьВоВременноеХранилище(Данные, Адрес);\r\n\t\r\n\tСтруктураБуфераОбмена = Новый Структура;\r\n\tСтруктураБуфераОбмена.Вставить(\"\"Источник\"\", Источник);\r\n\tСтруктураБуфераОбмена.Вставить(\"\"Данные\"\", ДанныеВХранилище);\r\n\t\r\n\tПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);\r\n\t\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "ПустойБуферОбмена",
            "type": "template",
            "content": "Результат = ОбщегоНазначения.ПустойБуферОбмена(Источник);\r\n\r\n/ Проверяет наличие сохраненных данных во внутренний буфере обмена.\r\n//\r\n// Параметры:\r\n//  Источник - Строка - если передан, то проверяется наличие данных\r\n//             в внутреннем буфере обмена с этим ключом.\r\n//             По умолчанию - Неопределено.\r\n// Возвращаемое значение:\r\n//  Булево - Истина, если пустой.\r\n//\r\nФункция ПустойБуферОбмена(Источник = Неопределено) Экспорт\r\n\r\n   ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена; // см. СтрокиИзБуфераОбмена\r\n   ИсточникСовпадает = Истина;\r\n   Если Источник <> Неопределено Тогда\r\n       ИсточникСовпадает = (Источник = ТекущийБуферОбмена.Источник);\r\n   КонецЕсли;\r\n   Возврат (Не ИсточникСовпадает Или Не ЗначениеЗаполнено(ТекущийБуферОбмена.Данные));\r\n\r\nКонецФункции"
          },
          {
            "name": "СкопироватьВБуферОбмена",
            "type": "template",
            "content": "ОбщегоНазначения.СкопироватьВБуферОбмена(Данные, Источник);\r\n\r\nПроцедура ПоместитьТаблицуЗначенийВБуферОбмена(Таблица) Экспорт\r\n\r\n   ТаблицаДляБуфера = Таблица.Скопировать();\r\n   ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаДляБуфера, \"\"КопированиеВставкаСтрок\"\");\r\n\r\nКонецПроцедуры        \r\n\r\n// Помещает произвольные данные во внутренний буфер обмена, откуда их можно получить с помощью СтрокиИзБуфераОбмена.\r\n//\r\n// Параметры:\r\n//  Данные           - Произвольный - данные, которые необходимо поместить в внутренний буфер обмена.\r\n//  Источник         - Строка       - произвольный строковый идентификатор, например, имя объекта,\r\n//                                    строки табличной части которого помещаются во внутренний буфер обмена.\r\n//\r\nПроцедура СкопироватьВБуферОбмена(Данные, Источник = Неопределено) Экспорт\r\n\t\r\n\tТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;\r\n\t\r\n\tЕсли ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда\r\n\t\tАдрес = ТекущийБуферОбмена.Данные;\r\n\tИначе\r\n\t\tАдрес = Новый УникальныйИдентификатор;\r\n\tКонецЕсли;\r\n\t\r\n\tДанныеВХранилище = ПоместитьВоВременноеХранилище(Данные, Адрес);\r\n\t\r\n\tСтруктураБуфераОбмена = Новый Структура;\r\n\tСтруктураБуфераОбмена.Вставить(\"\"Источник\"\", Источник);\r\n\tСтруктураБуфераОбмена.Вставить(\"\"Данные\"\", ДанныеВХранилище);\r\n\t\r\n\tПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);\r\n\t\r\nКонецПроцедуры\r\n"
          },
          {
            "name": "СтрокиИзБуфераОбмена",
            "type": "template",
            "content": "Результат = ОбщегоНазначения.СтрокиИзБуфераОбмена();\r\n\r\n\r\nДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();\r\nЕсли ДанныеИзБуфераОбмена.Источник <> \"\"Товары\"\" Тогда\r\n   Возврат 0;\r\nКонецЕсли;\r\n\r\nБуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();\r\nЕсли ТипЗнч(БуферОбмена.Данные) = Тип(\"\"Соответствие\"\") Тогда\r\n   СообщенияПользователю = БуферОбмена.Данные;\r\nКонецЕсли;\r\n\r\n// Получает строки табличной части, помещенные во внутренний буфер обмена с помощью СкопироватьСтрокиВБуферОбмена.\r\n//\r\n// Возвращаемое значение:\r\n//  Структура:\r\n//     * Данные   - Произвольный - данные из внутреннего буфера обмена.\r\n//                                 Например, ТаблицаЗначений при вызове СкопироватьСтрокиВБуферОбмена.\r\n//     * Источник - Строка       - объект, к которому относятся данные.\r\n//                                 Если при помещении во внутренний буфер не был указан, то Неопределено.\r\n//\r\nФункция СтрокиИзБуфераОбмена() Экспорт\r\n\t\r\n\tРезультат = Новый Структура;\r\n\tРезультат.Вставить(\"\"Источник\"\", Неопределено);\r\n\tРезультат.Вставить(\"\"Данные\"\", Неопределено);\r\n\t\r\n\tЕсли ПустойБуферОбмена() Тогда\r\n\t\tВозврат Результат;\r\n\tКонецЕсли;\r\n\t\r\n\tТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена; // см. СтрокиИзБуфераОбмена\r\n\tРезультат.Источник = ТекущийБуферОбмена.Источник;\r\n\tРезультат.Данные = ПолучитьИзВременногоХранилища(ТекущийБуферОбмена.Данные);\r\n\t\r\n\tВозврат Результат;\r\nКонецФункции\r\n"
          }
        ]
      }
    ]
  },
  {
    "name": "Инициализация типов",
    "type": "folder",
    "children": [
      {
        "name": "Дерево значений",
        "type": "folder",
        "children": []
      },
      {
        "name": "Массивы",
        "type": "folder",
        "children": []
      },
      {
        "name": "Словари",
        "type": "folder",
        "children": []
      },
      {
        "name": "Список значений",
        "type": "folder",
        "children": []
      },
      {
        "name": "Структура",
        "type": "folder",
        "children": []
      },
      {
        "name": "Таблица значений",
        "type": "folder",
        "children": []
      }
    ]
  },
  {
    "name": "Отчеты и обработки",
    "type": "folder",
    "children": [
      {
        "name": "Заполнение макета",
        "type": "template",
        "content": "//Создаем табличный документ\r\nТабДокумент = Новый ТабличныйДокумент;\r\n\r\n//Указываем ориентацию страницы.\r\n//Портретная по умолчанию\r\nТабДокумент.ОриентацияСтраницы =\r\nОриентацияСтраницы.Портрет;\r\n\r\n//Получаем макет по его названию (модуль объекта)\r\nМакет = ПолучитьМакет(\"\"Макет\"\");\r\n//Или так (если из модуля формы)\r\nМакет = Отчеты.Номенклатура.ПолучитьМакет(\"\"Макет\"\");\r\n\r\n//Получаем доступ к разделу \"\"Шапка\"\"\r\nШапка = Макет.ПолучитьОбласть(\"\"Шапка\"\");\r\n//Заполняем параметр \"\"Заголовок\"\"\r\nШапка.Параметры.Заголовок =\r\n\"\"Перечень номенклатуры\"\";\r\n\r\n//Добавляем шапку в табличный документ\r\nТабДокумент.Вывести(Шапка);\r\n\r\n//Получаем доступ к разделу \"\"Строка\"\"\r\nСтрока = Макет.ПолучитьОбласть(\"\"Строка\"\");\r\n\r\nВыборка = Справочники.Номенклатура.Выбрать();\r\nПока Выборка.Следующий() Цикл\r\n     //Заполняем строку макета данными полей справочника\r\n     Строка.Параметры.Заполнить(Выборка);\r\n     //Добавляем строку в табличный документ\r\n     ТабДокумент.Вывести(Строка);\r\nКонецЦикла;"
      },
      {
        "name": "Открыть форму настроек отчёта",
        "type": "template",
        "content": "Форма = ПолучитьФорму(\"\"Отчет.Материалы.ФормаНастроек\"\");\r\nФорма.Открыть();\r\n\r\n\r\n"
      },
      {
        "name": "Открыть форму отчёта",
        "type": "template",
        "content": "Форма = ПолучитьФорму(\"\"Отчет.Материалы.Форма\"\");\r\nФорма.Открыть();"
      },
      {
        "name": "пример внешней обработки",
        "type": "template",
        "content": "//Пример внешней обработки с печатной формой \r\n//подключаемой к документу ИнвентаризацияТоваровНаСкладе\r\n//стандартной конфигурации 1С 8.3 .\r\n//Размещение кода: Модуль объекта вынешней обработки.\r\n//Обработка добавляет документу две команды печати:\r\n// - Инвентаризационная опись склада\r\n// - Инвентаризационная опись склада (альбомная) \r\nФункция СведенияОВнешнейОбработке() Экспорт\r\n   //Получаем шаблон сведений о внешнем отчете или обработке\r\n   ПараметрыРегистрации =\r\n   ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();\r\n\r\n   //Указываем что обработка является печатной формой\r\n   ПараметрыРегистрации.Вид =\r\n   ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();\r\n   //Задаем версию обработки\r\n   ПараметрыРегистрации.Версия = \"\"1.0\"\";\r\n   //Указываем список документов, к которому будет подключаться обработка\r\n   ПараметрыРегистрации.Назначение.Добавить(\"\"Документ.ИнвентаризацияТоваровНаСкладе\"\");\r\n\r\n   //Добавляем команды для пункта меню \"\"Печать\"\"\r\n   НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();\r\n   //Задаем представление команды\r\n   НоваяКоманда.Представление = НСтр(\"\"ru = 'Инвентаризационная опись склада'\"\");\r\n   //Идентификатор, который используется в функции \"\"Печать\"\"\r\n   НоваяКоманда.Идентификатор = \"\"ИнвентаризационнаяОписьСклада\"\";\r\n   //Серверный тип команды\r\n   НоваяКоманда.Использование =\r\n   ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();\r\n\r\n  //Вторая команда в пункт меню \"\"Печать\"\"\r\n  НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();\r\n  НоваяКоманда.Представление = НСтр(\"\"ru = 'Инвентаризационная опись склада (альбомная)'\"\");\r\n  НоваяКоманда.Идентификатор = \"\"ИнвентаризационнаяОписьСкладаАльбомная\"\";\r\n  НоваяКоманда.Использование =\r\n  ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();\r\n\r\n  Возврат ПараметрыРегистрации;\r\n\r\nКонецФункции\r\n\r\n// Функция является точкой входа в обработку.\r\nФункция Печать(МассивОбъектов, КоллекцияПечатныхФорм,\r\n  ОбъектыПечати, ПараметрыВывода) Экспорт\r\n\r\n  //Проверяем по идентификатору, какая из команд вызвана:\r\n  // ИнвентаризационнаяОписьСклада или \r\n  // ИнвентаризационнаяОписьСкладаАльбомная\r\n  Если УправлениеПечатью.НужноПечататьМакет(\r\n    КоллекцияПечатныхФорм, \"\"ИнвентаризационнаяОписьСклада\"\") Тогда\r\n    //Формируем портретный табличный документ\r\n    ТабДокумент = ПечатьДокумента(МассивОбъектов,\r\n    \"\"МакетОписи\"\", ОриентацияСтраницы.Портрет);\r\n\r\n    //Выводим печатную форму\r\n    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(\r\n    КоллекцияПечатныхФорм, \"\"ИнвентаризационнаяОписьСклада\"\",\r\n    НСтр(\"\"ru = 'Инвентаризационная опись склада'\"\"), ТабДокумент);\r\n\r\n  ИначеЕсли УправлениеПечатью.НужноПечататьМакет(\r\n  КоллекцияПечатныхФорм, \"\"ИнвентаризационнаяОписьСкладаАльбомная\"\") Тогда\r\n  //Формируем альбомный табличный документ\r\n  ТабДокумент = ПечатьДокумента(МассивОбъектов,\r\n  \"\"МакетОписи\"\", ОриентацияСтраницы.Ландшафт);\r\n\r\n  УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(\r\n  КоллекцияПечатныхФорм,\r\n  \"\"ИнвентаризационнаяОписьСкладаАльбомная\"\",\r\n  НСтр(\"\"ru = 'Инвентаризационная опись склада (альбомная)'\"\"),\r\n  ТабДокумент);\r\n КонецЕсли;\r\n\r\nКонецФункции\r\n\r\n// Функция, возвращающая готовый ТабличныйДокумент\r\nФункция ПечатьДокумента(МассивОбъектов, НазваниеМакета, Ориентация)\r\n\r\n  //Создадим и заполним табличный документ\r\n  ТабДокумент = Новый ТабличныйДокумент;\r\n  ТабДокумент.ОриентацияСтраницы  = Ориентация;\r\n\r\n  Макет = ПолучитьМакет(НазваниеМакета);\r\n  //Далее следует заполнение макета\r\n  //...\r\nКонецФункции\r\n\r\n"
      }
    ]
  },
  {
    "name": "Параметры сеанса",
    "type": "folder",
    "children": [
      {
        "name": "Выбор документов пользователя",
        "type": "template",
        "content": "&НаСервере\r\n\r\n//Выбираем документы текущего пользователя\r\nЗапрос = Новый Запрос;\r\nЗапрос.Текст = \r\n\"\"ВЫБРАТЬ\r\n| Приходник.Номер КАК Номер,\r\n| Приходник.Дата КАК Дата\r\n|ИЗ\r\n| Документ.ПриходныйКассовыйОрдер КАК Приходник\r\n|ГДЕ\r\n| Приходник.Ответственный = &Ответственный\"\";\r\n\r\nПользователь = ПараметрыСеанса.ТекущийПользователь;\r\nЗапрос.УстановитьПараметр(\"\"Ответственный\"\", Пользователь);\r\n\r\nВыборка = Запрос.Выполнить().Выбрать();\r\n\r\n//Выводим информацию о найденных документах\r\nПока Выборка.Следующий() Цикл\r\nИнформация = СтрШаблон(\"\"№ %1 от %2\"\", \r\nВыборка.Номер, Выборка.Дата);\r\nСообщить(Информация);\r\nКонецЦикла;"
      },
      {
        "name": "Получение текущего пользователя",
        "type": "template",
        "content": "&НаСервере \r\n\r\nПользователь = ПараметрыСеанса.ТекущийПользователь; \r\nСообщить(Пользователь);\r\n//Если в справочнике пользователей\r\n//задано физическое лицо\r\nСообщить(Пользователь.ФизическоеЛицо);"
      },
      {
        "name": "Установка параметров сеанса",
        "type": "template",
        "content": "//Модуль сеанса\r\nПроцедура УстановкаПараметровСеанса(ИменаПараметровСеанса)\r\n\r\nЕсли ИменаПараметровСеанса = Неопределено Тогда\r\n//Заполняем созданный в конфигурации\r\n//параметр \"\"Регионы\"\"\r\nРегионы = Новый Массив;\r\nРегионы.Добавить(41);\r\nРегионы.Добавить(777);\r\n\r\nПараметрыСеанса.Регионы = Новый ФиксированныйМассив(Регионы);\r\nИначе\r\n// Установка параметров сеанса \"\"по требованию\"\"\r\nЕсли ИменаПараметровСеанса.Найти(\"\"ТекущийПользователь\"\") <> Неопределено Тогда\r\nПользователь = Справочники.Пользователи.НайтиПоКоду(\"\"000000001\"\");\r\nПараметрыСеанса.ТекущийПользователь = Пользователь;\r\nКонецЕсли;\r\nКонецЕсли;\r\n\r\n//...\r\n\r\nКонецПроцедуры\r\n\r\n"
      }
    ]
  },
  {
    "name": "Поток управления",
    "type": "folder",
    "children": []
  },
  {
    "name": "Процедуры и функции",
    "type": "folder",
    "children": [
      {
        "name": "Валидация Email в 1С Предприятие",
        "type": "template",
        "content": "//Валидация — это доказательство, что продуктом, оборудованием или процессом можно пользоваться по назначению.\r\n\r\nФункция EmailValid(Адрес) Экспорт\r\n\r\n    //Адрес = \"\"test@me@gmail.narod.am\"\";\r\n\r\n    ЛатинскиеБуквы = \"\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\";\r\n\r\n    Цифры = \"\"0123456789\"\";\r\n\r\n    //ищем крайний справа символ @ для правильного выделения локальной и доменной части\r\n\r\n    ИндексСобаки = Найти(Адрес,\"\"@\"\");\r\n\r\n    //1. строка адреса вообще не содержит разделителя\r\n\r\n    Если ИндексСобаки = 0 Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    УрезаемаяСтрока = Сред(Адрес, ИндексСобаки+1);\r\n\r\n    Пока Найти(УрезаемаяСтрока,\"\"@\"\") > 0 Цикл\r\n\r\n        ИндексСобаки = ИндексСобаки + Найти(УрезаемаяСтрока,\"\"@\"\");\r\n\r\n        УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексСобаки+1);\r\n\r\n    КонецЦикла;\r\n\r\n    ДоменнаяЧасть = Сред(Адрес, ИндексСобаки+1);\r\n\r\n    ЛокальнаяЧасть = Лев(Адрес, ИндексСобаки-1);\r\n\r\n    //2. Проверяем длину локальной части\r\n\r\n    Если СтрДлина(ЛокальнаяЧасть) < 1 ИЛИ СтрДлина(ЛокальнаяЧасть) > 64 Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //3. Проверяем длину доменной части\r\n\r\n    Если СтрДлина(ДоменнаяЧасть) < 1 ИЛИ СтрДлина(ДоменнаяЧасть) > 255 Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //4. Проверяем что локальная части не начинается и не заканчивается на \"\".\"\"\r\n\r\n    Если Лев(ЛокальнаяЧасть, 1) = \"\".\"\" ИЛИ Прав(ЛокальнаяЧасть, 1) = \"\".\"\" Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //5. Локальная части не содержит 2 или более \"\".\"\" подряд\r\n\r\n    Если Найти(ЛокальнаяЧасть, \"\"..\"\") > 0 Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //Проверка доменной части\r\n\r\n    //6. Доменная часть не начинается с точки\r\n\r\n    Если Лев(ДоменнаяЧасть, 1) = \"\".\"\" Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //7. Доменная часть не содержит 2 или более \"\".\"\" подряд\r\n\r\n    Если Найти(ДоменнаяЧасть, \"\"..\"\") > 0 Тогда\r\n\r\n        Возврат ЛОЖЬ;\r\n\r\n    КонецЕсли;\r\n\r\n    //8. Проверка частей доменной части\r\n\r\n    //каждая часть начинается с буквы и заканчивается буквой или цифрой\r\n\r\n    //каждая часть длиной не более 63 символов\r\n\r\n    ИдентификаторыДоменнойЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДоменнаяЧасть, \"\".\"\");\r\n\r\n    Для Каждого ИдентификаторДомена ИЗ ИдентификаторыДоменнойЧасти Цикл\r\n\r\n        Если СтрДлина(ИдентификаторДомена) > 63 Тогда\r\n\r\n            Возврат ЛОЖЬ;\r\n\r\n        КонецЕсли;\r\n\r\n        Если Найти(ЛатинскиеБуквы, Лев(ИдентификаторДомена,1)) = 0\r\n\r\n            //для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :)\r\n\r\n            И Найти(Цифры, Лев(ИдентификаторДомена,1)) = 0\r\n\r\n            Тогда\r\n\r\n            Возврат ЛОЖЬ;\r\n\r\n        КонецЕсли;\r\n\r\n        Если Найти(ЛатинскиеБуквы, Прав(ИдентификаторДомена,1)) = 0 И Найти(Цифры, Прав(ИдентификаторДомена,1)) = 0 Тогда\r\n\r\n            Возврат ЛОЖЬ;\r\n\r\n        КонецЕсли;\r\n\r\n    КонецЦикла;\r\n\r\n\r\n\r\n    //Все проверки пройдены - радуемся\r\n\r\n    Возврат ИСТИНА;\r\n\r\nКонецФункции"
      }
    ]
  },
  {
    "name": "Работа с простыми типами",
    "type": "folder",
    "children": [
      {
        "name": "Boolean",
        "type": "folder",
        "children": []
      },
      {
        "name": "Дата и Время",
        "type": "folder",
        "children": [
          {
            "name": "Проверить дату на пустое значение",
            "type": "template",
            "content": "Функция ДатаНеЗаполнена(ПереданноеЗначение)\r\n   Если ПереданноеЗначение = Дата('00010101') Тогда\r\n      Возврат Истина;\r\n   Иначе\r\n      Возврат Ложь;\r\n   КонецЕсли; \r\nКонецФункции\r\n"
          },
          {
            "name": "Как получить формат даты без времени",
            "type": "template",
            "content": "ДатаСтрокой = Формат(ТекущаяДата(), \"\"ДЛФ=D\"\");//08.11.2019\r\nДатаСтрокой = Формат(ТекущаяДата(), \"\"ДЛФ=DD\"\");//08 ноября 2019 г\r\nДатаСтрокой = Формат(ТекущаяДата(), \"\"ДФ=dd.MM.yyyy\"\");//08.11.2019\r\nДатаСтрокой = Формат(ТекущаяДата(), \"\"ДФ=dd MMMM yyyy\"\");//08 ноября 2019"
          },
          {
            "name": "Как посчитать количество месяцев между датами(1)",
            "type": "template",
            "content": "Функция РазностьДатМесяц(ДатаНачала,ДатаКонца)\r\n   МесяцНачала = Месяц(ДатаНачала);\r\n   МесяцКонца = Месяц(ДатаКонца);\r\n   ЛетМеждуДатами = Год(ДатаКонца) - Год(ДатаНачала);\r\n   РезультатВМесяцах = ЛетМеждуДатами * 12 - МесяцНачала + МесяцКонца;\r\n   Возврат РезультатВМесяцах;\r\nКонецФункции"
          },
          {
            "name": "Как посчитать количество месяцев между датами(2)",
            "type": "template",
            "content": "Функция РазностьДатМесяцРекурсия(ДатаНачала,ДатаКонца)\r\n   Если НачалоМесяца(ДатаНачала) >= НачалоМесяца(ДатаКонца) Тогда\r\n      Результат = 0;\r\n   Иначе\r\n      Результат = 1 + РазностьДатМесяцРекурсия(ДатаНачала,НачалоМесяца(ДатаКонца)-1);\r\n   КонецЕсли;\r\n   Возврат Результат;\r\nКонецФункции"
          },
          {
            "name": "Как перевести секунды в часы и минуты",
            "type": "folder",
            "children": []
          }
        ]
      },
      {
        "name": "Символьный тип",
        "type": "folder",
        "children": []
      },
      {
        "name": "Строки",
        "type": "folder",
        "children": [
          {
            "name": "Как обрезать строку",
            "type": "template",
            "content": "Позиция=Найти(НашаСтрока,\"\"/\"\");\r\nНашаСтрока=Лев(НашаСтрока,Позиция-1);\r\n\r\n"
          },
          {
            "name": "Удалить все пробелы",
            "type": "template",
            "content": "Строка = СтрЗаменить(Строка(ПрСтрока),\"\" \"\",\"\"\"\");"
          }
        ]
      },
      {
        "name": "Числа",
        "type": "folder",
        "children": []
      }
    ]
  },
  {
    "name": "Регулярные выражения",
    "type": "folder",
    "children": []
  },
  {
    "name": "Описание типов значений",
    "type": "folder",
    "children": [
      {
        "name": "ОписаниеТипов ",
        "type": "folder",
        "children": [
          {
            "name": "Создание",
            "type": "template",
            "content": "//Число\r\nОписаниеЧисла = Новый ОписаниеТипов(\"\"Число\"\");\r\n//Строка\r\nОписаниеСтроки = Новый ОписаниеТипов(\"\"Строка\"\");\r\n//Дата\r\nОписаниеДаты = Новый ОписаниеТипов(\"\"Дата\"\"); \r\n//Булево\r\nОписаниеБулево = Новый ОписаниеТипов(\"\"Булево\"\");\r\n//Ссылочный тип  \r\nОписаниеПеречисление = Новый ОписаниеТипов(\"\"ПеречислениеСсылка.ВидРегиона\"\");\r\nОписаниеСправочник = Новый ОписаниеТипов(\"\"СправочникСсылка.Контрагенты\"\");\r\nОписаниеДокумент = Новый ОписаниеТипов(\"\"ДокументСсылка.ПродажаТоваров\"\");\r\n\r\n//Далее можно использовать описание в объектах ПРИМЕР таблица значений\r\nТЗ = Новый ТаблицаЗначений;\r\nТЗ.Колонки.Добавить(\"\"КолонкаЧисло\"\", ОписаниеЧисла);\r\nТЗ.Колонки.Добавить(\"\"КолонкаСтрока\"\", ОписаниеСтроки);\r\nТЗ.Колонки.Добавить(\"\"КолонкаДокумент\"\", ОписаниеДокумент);\r\n"
          },
          {
            "name": "Классификаторы",
            "type": "folder",
            "children": []
          },
          {
            "name": "Массив типов",
            "type": "template",
            "content": "МассивТипов = Новый Массив;\r\nМассивТипов.Добавить(Тип(\"\"Число\"\"));\r\nМассивТипов.Добавить(Тип(\"\"Строка\"\"));\r\nМассивТипов.Добавить(Тип(\"\"Дата\"\"));\r\nМассивТипов.Добавить(Тип(\"\"Булево\"\"));\t\r\nКвалификаторЧисла = Новый КвалификаторыЧисла(6,2,ДопустимыйЗнак.Неотрицательный);\r\nКвалификаторСтроки = Новый КвалификаторыСтроки(10,ДопустимаяДлина.Фиксированная);\r\nКвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);\r\nОписаниеТипов = Новый ОписаниеТипов(МассивТипов,КвалификаторЧисла,КвалификаторСтроки,КвалификаторДаты);\r\n\r\n//массив из ссылочных типов, например из справочников\r\n\r\nМассивТипов = Новый Массив;\r\nМассивТипов.Добавить(Тип(\"\"СправочникСсылка.Валюта\"\"));\r\nМассивТипов.Добавить(Тип(\"\"СправочникСсылка.Контрагенты\"\"));\r\nМассивТипов.Добавить(Тип(\"\"СправочникСсылка.Номенклатура\"\"));\r\n\t\r\nОписаниеТипов = Новый ОписаниеТипов(МассивТипов);\r\n"
          },
          {
            "name": "Описание типов на основании описания типов",
            "type": "template",
            "content": "МассивТипов = Новый Массив;\r\nМассивТипов.Добавить(Тип(\"\"Число\"\"));\r\nМассивТипов.Добавить(Тип(\"\"Строка\"\"));\r\nМассивТипов.Добавить(Тип(\"\"Булево\"\"));\r\n\t\r\nКвалификаторЧисла = Новый КвалификаторыЧисла(6,2,ДопустимыйЗнак.Неотрицательный);\r\nКвалификаторСтроки = Новый КвалификаторыСтроки(10,ДопустимаяДлина.Фиксированная);\r\n\t\r\nОписаниеТипов = Новый ОписаниеТипов(МассивТипов,КвалификаторЧисла,КвалификаторСтроки,);\r\n\r\nКвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);\r\n//Новый ОписаниеТипов(<ИсходноеОписаниеТипов>, <ДобавляемыеТипы>, <ВычитаемыеТипы>, \r\n//                   <КвалификаторыЧисла>, <КвалификаторыСтроки>, <КвалификаторыДаты>, \r\n//                   <КвалификаторыДвоичныхДанных>)   \r\nОписаниеТиповНовое = Новый ОписаниеТипов(ОписаниеТипов,\"\"Дата\"\",\"\"Булево\"\",,,КвалификаторДаты);\r\n"
          },
          {
            "name": "Проверка наличия типа в списке",
            "type": "template",
            "content": "//ли требуется просто проверить есть ли в списке типов требуемый, можно использовать метод СодержитТип()\r\nЕсли ЭлементыФормы.ИмяПоля.ТипЗначения.СодержитТип(Тип(\"\"Строка\"\") ) Тогда\r\n//…\r\nКонецЕсли;"
          }
        ]
      },
      {
        "name": "Способы определить тип (4)",
        "type": "template",
        "content": "//способ 1 – сравнение с известными типами\r\nПеременная1 = 12;\r\nЕсли ТипЗнч(Переменная1) = Тип(\"\"Число\"\") Тогда\r\n//…\r\nИначеЕсли ТипЗнч(Переменная1) = Тип(\"\"СправочникСсылка.ИмяСправочника\"\") Тогда\r\n//…\r\nКонецЕсли;\r\n\r\n//способ 2 – с помощью готового списка типов\r\nСписокТипов = Новый Массив();\r\nСписокТипов.Добавить(Тип(\"\"СправочникСсылка.Справочник1\"\"));\r\nСписокТипов.Добавить(Тип(\"\"Число\"\"));\r\nТипы = Новый ОписаниеТипов(СписокТипов);\r\nПеременная1 = 12;\r\nЕсли Типы.СодержитТип(ТипЗнч(Переменная1)) Тогда\r\n//…\r\nКонецЕсли\r\n\r\n//способ3 – аналогично 2, но список типов берем у реквизита, определенного для справочника\r\nЗнчСправочника = Справочники.Справочник1.НайтиПоНаименованию(\"\"Какое-то наименование\"\");\r\nПеременная1 = 12;\r\nЕсли ЗнчСправочника.Метаданные().Реквизиты.Реквизит1.Тип.СодержитТип(ТипЗнч(Переменная1)) Тогда\r\n//…\r\nКонецЕсли\r\n\r\n//способ 4 – для ссылочных типов – определение имени типа\r\nЗнчСправочника = \r\nСправочники.Справочник1.НайтиПоНаименованию(\"\"Какое-то наименование\"\");\r\nИмяСправочника = Строка(ТипЗнч(ЗнчСправочника)); //будет равно \"\"Справочник1\"\"\r\nИмяСправочника = ЗнчСправочника.Метаданные().Имя; //аналогично\r\nЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнчСправочника)); //определение, что это справочник"
      },
      {
        "name": "Преобразование типов",
        "type": "folder",
        "children": [
          {
            "name": "Преобразование простых типов",
            "type": "template",
            "content": "//Значение простых типов можно преобразовывать с помощью оператора - наименования типа:\r\n\r\n//в число\r\nЗнчЧисло = Число(\"\"22\"\"); //при невозможности преобразовать будет\r\nвызвана ошибка, поэтому лучше использовать обработчик ошибок \r\n(см. далее)\r\n\r\n//в строку\r\nЗнчСтрока = Строка(22);\r\nЗнчСтрока = СокрЛП(22);\r\nЗнчСтрока = Формат(22, \"\"ЧГ=0\"\");\r\n\r\n//в дату\r\nЗнчДата = Дата(\"\"20120101120000\"\"); //01.01.2012 12:00:00\r\nЗнчДата = Дата(2012, 01, 01, 12, 0, 0);\r\nЗнчДата = Дата(2012, 01, 01);"
          },
          {
            "name": "Преобразование сложных типов",
            "type": "template",
            "content": "//создаем список типов, в которые требуется преобразовывать\r\nСписокТипов = Новый Массив();\r\nСписокТипов.Добавить(Тип(\"\"СправочникСсылка.Справочник1\"\"));\r\nТипы = Новый ОписаниеТипов(СписокТипов);\r\n\r\n//преобразование\r\nЗнч = Типы.ПривестиЗначение(Стр);"
          }
        ]
      },
      {
        "name": "Форматирование значений",
        "type": "folder",
        "children": [
          {
            "name": "Формат даты и числа по правилам различных стран",
            "type": "template",
            "content": "L = КраткоеНаименованиеНужнойСтраны\r\n//> 28.03.2012 14:21:32\r\nФормат( ТекущаяДата(), «L=ru»)\r\n//> 3/28/2012 2:21:24 PM\r\nФормат( ТекущаяДата(), «L=en»)\r\n//> 28/03/2012 14:22:08\r\nФормат( ТекущаяДата(), «L=fr»)\r\n"
          },
          {
            "name": "Формат даты",
            "type": "template",
            "content": "ДФ = \"\"дмг чмс\"\"   \r\n\r\n//Расшифровка частей даты:\r\n//    д день\r\n//      o маленькая «д»\r\n//      o может быть указана от 1 до 4 раз\r\n//    М месяц\r\n//      o большая «М»\r\n//      o может быть указана от 1 до 4 раз\r\n//    г год\r\n//      o маленькая «г»\r\n//      o может быть указана 1 или 2 или 4 раза\r\n//    ч часы\r\n//      o маленькая «ч» 12ти часовой формат\r\n//      o большая «Ч» 24х часовой формат\r\n//      o может быть указана 1 или 2 раза\r\n//    м минуты\r\n//      o маленькая «м»\r\n//      o может быть указана 1 или 2 раза\r\n//    с секунды\r\n//      o маленькая «с»\r\n//      o может быть указана 1 или 2 раза\r\n//    вв отображение AM/PM для 12ти часового формата\r\n//    к квартал. \r\n\r\n//> 28.03.2012 02:44:44\r\nФормат(ТекущаяДата(), \"\"ДФ=\"\"\"\"дд.ММ.гггг чч:мм:сс\"\"\"\"\"\")\r\n//> 3/28/2012 2:44:44 PM\r\nФормат(ТекущаяДата(), \"\"ДФ=\"\"\"\" М / д /гггг ч:м:с вв\"\"\"\"\"\")\r\n//> 28/03/2012 02:44:44\r\nФормат(ТекущаяДата(), \"\"ДФ=\"\"\"\"дд/ММ/гггг чч:мм:сс\"\"\"\"\"\")\r\n//> среда, 28 марта 2012\r\nФормат(ТекущаяДата(), \"\"ДФ=\"\"\"\"дддд, дд ММММ гггг\"\"\"\"\"\")   \r\n\r\nДата = '20050101200103'; // 01 января 2005 года 20:01:03\r\n \r\n    // год\r\n    Формат(Дата, \"\"ДФ=г\"\"); // 5\r\n    Формат(Дата, \"\"ДФ=гг\"\"); // 05\r\n    Формат(Дата, \"\"ДФ=гггг\"\"); // 2005\r\n \r\n    // номер квартала\r\n    Формат(Дата, \"\"ДФ=к\"\"); // 1\r\n \r\n    // месяц\r\n    Формат(Дата, \"\"ДФ=М\"\"); // 1\r\n    Формат(Дата, \"\"ДФ=ММ\"\"); // 01\r\n    Формат(Дата, \"\"ДФ=МММ\"\"); // янв.\r\n    Формат(Дата, \"\"ДФ=ММММ\"\"); // Январь\r\n \r\n    // день\r\n    Формат(Дата, \"\"ДФ=д\"\"); // 1\r\n    Формат(Дата, \"\"ДФ=дд\"\"); // 01\r\n    Формат(Дата, \"\"ДФ=ддд\"\"); // Сб\r\n    Формат(Дата, \"\"ДФ=дддд\"\"); // суббота\r\n \r\n    // час\r\n    Формат(Дата, \"\"ДФ=ч\"\"); // 8\r\n    Формат(Дата, \"\"ДФ=чч\"\"); // 08\r\n    Формат(Дата, \"\"ДФ=Ч\"\"); // 20\r\n    Формат(Дата, \"\"ДФ=ЧЧ\"\"); // 20\r\n \r\n    // минута\r\n    Формат(Дата, \"\"ДФ=м\"\"); // 1\r\n    Формат(Дата, \"\"ДФ=мм\"\"); // 01\r\n \r\n    // секунда\r\n    Формат(Дата, \"\"ДФ=с\"\"); // 3\r\n    Формат(Дата, \"\"ДФ=сс\"\"); // 03\r\n\t\r\n\t//локальный формат даты при выводе\r\n\tФормат(Дата, \"\"ДЛФ=Д\"\"); // 01.01.2005\r\n    Формат(Дата, \"\"ДЛФ=ДД\"\"); // 1 января 2005 г.\r\n    Формат(Дата, \"\"ДЛФ=В\"\"); // 20:01:03\r\n    Формат(Дата, \"\"ДЛФ=ДДВ\"\"); // 1 января 2005 г. 20:01:03\r\n    Формат(Дата, \"\"ДЛФ=ДВ\"\"); // 01.01.2005 20:01:03"
          },
          {
            "name": "Формат числа",
            "type": "template",
            "content": "//группировка «ЧГ»\r\nСтрЧисло = Строка(22300500)\r\n//> 22 300 500\r\nФормат(22300500, \"\"ЧГ=0\"\")\r\n//>22300500 //вообще убрали нули\r\nФормат(22300500, \"\"ЧГ=6\"\")\r\n//> 22 300500 //сделали группировку только миллионов\r\n\r\n// оругление  «ЧДЦ»\r\nФормат(3.535353, \"\"ЧДЦ=\"\"\"\"2\"\"\"\"\"\")\r\n//> 3,54\r\n\r\n//символ-разделитель целой и дробной части «ЧРД» \r\nФормат(3.535353, \"\"ЧРД=\"\"\"\".\"\"\"\"\"\")\r\n//> 3.535353\r\n\r\n//вместо числа 0 «ЧН»\r\nФормат(0, \"\"ЧН=\"\"\"\"<не заполнено>\"\"\"\"\"\")\r\n//> <не заполнено>\r\n\r\n//ЧЦ (ND)     устанавливает общую длину представления числа (целой и дробной частей вместе взятых).\r\n              //При этом исходное число округляется в соответствии с общепринятыми правилами округления (0.5 как 1).\r\n\t\t\t  //Если этот параметр задан, то для отображения дробной части числа обязательно указание следующего\r\n\t\t\t  //параметра ЧДЦ, иначе дробная часть отображаться не будет.      \r\n\t\t\t  \"\"ЧЦ=15\"\"\r\n//ЧДЦ (NFD)\t  устанавливает длину дробной части представления числа. Исходное число округляется \r\n              //при этом в соответствии с общепринятыми правилами округления (0.5 как 1).\t\t  \r\n\t\t\t  \"\"ЧДЦ=2\"\"\r\n\t\t\t  \r\n//ЧС (NS)\t  устанавливает сдвиг разрядов: положительный — деление, отрицательный — умножение. Иными словами, \r\n              //исходное число будет умножено или поделено на 10 в степени n, где n — значение параметра \r\n\r\n//ЧРД (NDS)\t  устанавливает символ-разделитель целой и дробной части\r\n              \"\"ЧРД=.\"\"\r\n\r\n//ЧРГ (NGS)\t  устанавливает символ-разделитель триад целой части числа. Если в качестве разделителя использовать пустую строку,\r\n              //то в этом случае разделителем будет символ неразрывного пробела\r\n\t\t\t  \"\"ЧРГ=\"\"\r\n\r\n//ЧН (NZ)\t  устанавливает представление для нулевого значения числа. По умолчанию число 0 представляется в виде пустой строки. \r\n\t          //Если задано только имя параметра, а значение не задано, то число 0 выводится как есть.\r\n\t\t\t  //Внимание! Для числовых полей ввода этот параметр игнорируется\r\n\t\t\t  \"\"ЧН=\"\"\r\n\t\t\t  \r\n//ЧВН (NLZ)\t  определяет вывод лидирующих нулей для числа: если параметр задан, \r\n              //лидирующие нули выводятся; если не задан — не выводятся\t\r\n\t\t\t  \"\"ЧВН=\"\"  \r\n\r\n//ЧГ (NG)\t  определяет порядок группировки разрядов числа.\r\n              //В качестве значения указываются числа, через запятую, \r\n\t\t\t  //обозначающие количество группируемых разрядов справа налево. \r\n\t\t\t  //Имеют смысл только два первых числа. Первое из них указывает\r\n\t\t\t  //первичную группировку, которая будет использована для наименее\r\n\t\t\t  //значимых разрядов целой части числа. Если второе число не указано, \r\n\t\t\t  //то будут сгруппированы только наименее значимые разряды. \r\n\t\t\t  //Если в качестве второго числа задан 0, то для всех разрядов целой\r\n\t\t\t  //части числа будет применено значение указанное для первичной группировки. \r\n\t\t\t  //Если в качестве второго числа используется значение, отличное от 0, \r\n\t\t\t  //то это значение будет использовано для группировки всех разрядов, \r\n\t\t\t  //кроме уже сгруппированных наименее значимых.\t\t\t  \r\n\t\t\t  \"\"ЧГ=3,0\"\"\r\n\t\t\t  \r\n//ЧО (NN)\t  определяет код представления отрицательных чисел. Возможные варианты:\r\n              //0\tпредставление отрицательных чисел в скобках: -1 как (1)\r\n              //1\tстандартное представление отрицательных чисел: -1 как -1\r\n              //2\tстандартное представление отрицательных чисел минус через пробел: -1 как — 1\r\n              //3\tпредставление отрицательных чисел с суффиксом: -1 как 1-\r\n              //4\tпредставление отрицательных чисел с суффиксом через пробел: -1 как 1 —\r\n              \"\"ЧО=1\"\"\r\n\t\t\t  \r\n//ЧФ (NF)\t  задает шаблон форматирования числа. Позиция исходного числа, отформатированного \r\n              //с учетом остальных параметров, указывается символом Ч. Остальные символы выводятся как есть.\r\n\t\t\t  //Символы, находящиеся между двойными или одинарными кавычками выводятся как есть\r\n              \"\"ЧФ='Ч тыс'\"\"\r\n"
          }
        ]
      },
      {
        "name": "Определение типа и сравнение типов",
        "type": "template",
        "content": "Если ТипЗнч(Переменная) = Тип(\"\"ИмяТипа\"\") Тогда\r\n\t// пишем тут \r\nКонецЕсли\t \r\n\r\n//Базовые типы\r\nЕсли ТипЗнч(Знч) = Тип(\"\"Число\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"Строка\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"Дата\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"Булево\"\") Тогда\r\nКонецЕсли; \r\n//Типы базы данных\r\nЗнч = Справочники.Организации.ПустаяСсылка();\r\nЕсли ТипЗнч(Знч) = Тип(\"\"СправочникСсылка.Организации\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"СправочникОбъект.Организации\"\") Тогда\r\nИначеЕсли ТипЗнч(Знч) = Тип(\"\"ДокументСсылка.ПоступлениеТоваров\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"ДокументОбъект.ПоступлениеТоваров\"\") Тогда\r\nКонецЕсли;\r\r\n\r\nЕсли ТипЗнч(Знч) = Тип(\"\"РегистрСведенийСписок.ИмяРегистра\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"РегистрНакопленияНаборЗаписей.ИмяРегистра\"\") Тогда\r\nКонецЕсли \r\n//Типы 1С\r\nЕсли ТипЗнч(Знч) = Тип(\"\"Массив\"\") Тогда\r\nИначеЕсли Знч = Тип(\"\"СписокЗначений\"\") Тогда\r\nКонецЕсли;\r\n"
      },
      {
        "name": "Определение значения ссылочного типа",
        "type": "template",
        "content": "Значение = Справочники.Организации.ПустаяСсылка();\r\nЕсли Справочники.ТипВсеСсылки().Содержит(ТипЗнч(Значение)) Тогда\r\n//это справочник\r\nИначеЕсли Документы.ТипВсеСсылки().Содержит( ТипЗнч(Значение)) Тогда\r\n//это документ\r\nКонецЕсли;"
      },
      {
        "name": "Работа с типами в запросе",
        "type": "folder",
        "children": [
          {
            "name": "Способ1",
            "type": "template",
            "content": " \"\"ВЫБРАТЬ\r\n| ВЫБОР\r\n| КОГДА ТИПЗНАЧЕНИЯ(Организация) = ТИП(Справочник.Организации)\r\n| ТОГДА Организация\r\n| ИНАЧЕ NULL\r\n| КОНЕЦ КАК Организация\r\n|ИЗ\r\n| Документ.ПоступлениеТоваров КАК ПоступлениеТоваров\"\""
          },
          {
            "name": "Способ2",
            "type": "template",
            "content": "\"\"ВЫБРАТЬ\r\n| ВЫБОР\r\n| КОГДА Организация ССЫЛКА Справочник.Организации\r\n| ТОГДА Организация\r\n| ИНАЧЕ NULL\r\n| КОНЕЦ КАК Организация\r\n|ИЗ\r\n| Документ.ПоступлениеТоваров КАК ПоступлениеТоваров\"\""
          }
        ]
      }
    ]
  },
  {
    "name": "Хранилище значений",
    "type": "folder",
    "children": [
      {
        "name": "Пример работы с Хранилищем значений",
        "type": "template",
        "content": "//Создаем значение\r\nЗнч = Новый ТаблицаЗначений(); \r\n//Помещаем значение в хранилище значений:\r\nХранилище = Новый ХранилищеЗначения(Знч, Новый СжатиеДанных(9));     \r\n// 9 - степень сжатия, это мах - значение \r\r\n// сохраняем значение в БД\r\nСправочникСсылка = Справочники.Хранилище.СоздатьЭлемент();\r\nСправочникСсылка.ХранилищеЗначения = Хранилище;\r\nСправочникСсылка.Записать();\r\n\r\n//Пример с сохранением файла в БД\r\nНастройки = Новый Структура();\r\nНастройки.Вставить(\"\"ПоУмолчанию\"\", Истина);\r\nНастройки.Вставить(\"\"Наименование\"\", \"\"Наименование1\"\");\r\nХранилище = Новый ХранилищеЗначения(Настройки, Новый \r\nСжатиеДанных(9));\r\nЗначениеВФайл(\"\"C:\\\"\", Хранилище);\r\n\r\n//Пример – сохранение значения из файла:\r//Значение - картинка из файла\r\nФайл = Новый Картинка(\"\"C:\\ФайлКартинки.jpg\"\");\r\nХранилище = Новый ХранилищеЗначения(Файл, Новый \r\nСжатиеДанных(9));\r\n//Значение - произвольный файл\r\nФайл = Новый ДвоичныеДанные(\"\"C:\\ИсполняемыйФайл.exe\"\");\r\nХранилище = Новый ХранилищеЗначения(Файл, Новый \r\nСжатиеДанных(9));\r\n//Значение - текстовый файл\r\nФайл = Новый ЧтениеТекста(\"\"C:\\ТекстовыйФайл.txt\"\");\r\nТекстовыеДанные = Файл.Прочитать();\r\nХранилище = Новый ХранилищеЗначения(ТекстовыеДанные, Новый \r\nСжатиеДанных(9));\r\r\n\r\n//Распаковка значений из хранилища значений\r\nЗнч = Хранилище.Получить();\r\nЕсли Знч = Неопределено Тогда\r\nСообщить(\"\"Ошибка получения значения из хранилища\"\");\r\nКонецЕсли"
      },
      {
        "name": "Сохранение в Хранилище Значений",
        "type": "folder",
        "children": [
          {
            "name": "Таблица значений",
            "type": "template",
            "content": "// *** 1.Пример (Таблица значений):\r\n   ЗначенияТЗ = Новый ТаблицаЗначений(); // Создание значения \"\"ТЗ\"\"\r\n\r\n   // Вставка в хранилище значений\r\n   Хранилище_Зн = Новый ХранилищеЗначения(ЗначенияТЗ, Новый СжатиеДанных(9));// \"\"9\"\" - макс.степень сжатия\r\n\r\n   // Сохранение значения в реквизит объекта конфигурации (тип: ХранилищеЗначения)\r\n   СправочникСтранаСсылка = Справочники.Страны.НайтиПоНаименованию(\"\"Испания\"\");\r\n   Если Не СправочникСтранаСсылка.Пустая() Тогда\r\n       // Изменим и запишем численность жителей в стране\r\n       СтранаИспания = СправочникСтранаСсылка.ПолучитьОбъект();\r\n       СтранаИспания.ХранилищеЗначения = Хранилище_Зн;\r\n       СтранаИспания.Записать();\r\n   КонецЕсли;"
          },
          {
            "name": "Табличный документ",
            "type": "template",
            "content": "   // *** 2.Пример (Табличный документ):\r\n   ЗначенияТабДок=Новый ТабличныйДокумент;\r\n   ЗначенияТабДок.Вывести(ЭлементыФормы.ПолеТабличногоДокумента1);\r\n   Хранилище_ТабДок=Новый ХранилищеЗначения(ЗначенияТабДок);"
          },
          {
            "name": "Структура",
            "type": "template",
            "content": "// *** 3.Пример (Структура):\r\n   ЗначенияСтр = Новый Структура(); // Создание значения \"\"Структура\"\"\r\n   ЗначенияСтр.Вставить(\"\"Код\"\", \"\"34\"\");\r\n   ЗначенияСтр.Вставить(\"\"Наименование\"\", \"\"Испания\"\");\r\n   ЗначенияСтр.Вставить(\"\"Описание\"\", \"\"Европейская страна, расположенная на Пиренейском полуострове\"\");\r\n   ЗначенияСтр.Вставить(\"\"Население\"\", 46600000);\r\n   // Вставка в хранилище значений\r\n   Хранилище_Стр = Новый ХранилищеЗначения(ЗначенияСтр, Новый СжатиеДанных(9));// \"\"9\"\" - макс.степень сжатия\r\n   ЗначениеВФайл(\"\"D:\\import\\\"\", Хранилище_Стр); // Сохранение значения в файл"
          },
          {
            "name": "Любой файл",
            "type": "template",
            "content": "// *** 4.Пример (Любой файл) :\r\n   ФайлДвоичныеДанные = Новый ДвоичныеДанные(\"\"D:\\import\\КлиентБанк_РБ.exe\"\");\r\n   Хранилище_Файл = Новый ХранилищеЗначения(ФайлДвоичныеДанные, Новый СжатиеДанных(0));// \"\"0\"\" - без сжатия"
          },
          {
            "name": "Файл картинка",
            "type": "template",
            "content": " // 5.Пример (Файл картинка) :\r\n   ФайлФото = Новый Картинка(\"\"D:\\import\\ФотоСотрудника.png\"\");\r\n   Хранилище_Фото = Новый ХранилищеЗначения(ФайлФото, Новый СжатиеДанных(5));// \"\"5\"\" - средн.степень сжатия\r\n"
          },
          {
            "name": "Текстовый файл",
            "type": "template",
            "content": "// *** 6.Пример (Текстовый файл) :\r\n   ФайлТекст = Новый ЧтениеТекста(\"\"D:\\import\\Война_и_мир.txt\"\");\r\n   ТекстИзФайла = ФайлТекст.Прочитать();\r\n   Хранилище_Текст = Новый ХранилищеЗначения(ТекстИзФайла, Новый СжатиеДанных(1));// \"\"1\"\" - мин.степень сжатия"
          },
          {
            "name": "Отчет/обработка 1С",
            "type": "template",
            "content": "// *** 7.Пример (Отчет/обработка 1С) :\r\n   Хранилище_Epf = Новый ХранилищеЗначения(Новый ДвоичныеДанные(\"\"D:\\import\\Otchet_realizacija_2020.epf\"\", СтепеньСжатия));\r\n"
          }
        ]
      },
      {
        "name": "Восстановление из Хранилище Значений",
        "type": "folder",
        "children": [
          {
            "name": "Процедура ВосстановлениеИзХранилищеЗначений()",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ВосстановлениеИзХранилищеЗначений();\r\n\r\n    ИмяФайла = \"\"D:\\import\\Война_и_мир.txt\"\";\r\n\r\n    // Двоичные данные можно восстановить из хранилища значения методом Получить и записать в файл методом Записать()\r\n    Если ТипЗнч(РеквизитХранилище) = Тип(\"\"ДвоичныеДанные\"\") Тогда\r\n\r\n        // Хранилище.Получить()<>Неопределено Тогда // Процедура извлекает данные из хранилища (требует времени)\r\n        // Для больших объемов данных рекомендуется использовать доп.реквизит (Например: Булево) Содержит данные - Истина\r\n        ДанныеХранилища = РеквизитХранилище.Получить();\r\n        Если ДанныеХранилища = Неопределено Тогда\r\n            Сообщить(\"\"Ошибка получения данных из хранилища значений 1С\"\");\r\n        КонецЕсли;\r\n        ДанныеХранилища.Записать(ИмяФайла); // Записываем восстановленые данные в файл\r\n\r\n        // Восстановление Табличного документа\r\n        ЭлементыФормы.ПолеТабличногоДокумента1.Вывести(ДанныеХранилища);\r\n\r\n        // Восстановление и запуск Отчета/обработки 1С\r\n        ИмяФайла_Epf = \"\"D:\\import\\Otchet_realizacija_2020.epf\"\";\r\n        ДвоичныеДанные = РеквизитХранилище.Получить();\r\n        ДвоичныеДанные.Записать(ИмяФайла_Epf);\r\n        Epf = ВнешниеОбработки.Создать(ИмяФайла_Epf);\r\n        Epf.ПолучитьФорму().Открыть();\r\n\r\n    Иначе\r\n        ДанныеХранилища = РеквизитХранилище;\r\n    КонецЕсли;\r\n\r\n    // Файлы зарегистрированного типа (doc, xls, pdf, jpg, txt, exe...)\r\n    ЗапуститьПриложение(ИмяФайла);\r\n\r\nКонецПроцедуры"
          }
        ]
      },
      {
        "name": "Очистка реквизита Хранилище Значений",
        "type": "template",
        "content": "&НаКлиенте\r\nПроцедура ОчисткаРеквизитаХранилищеЗначений();\r\n\r\n    РеквизитХранилище = Неопределено;\r\n\r\nКонецПроцедуры"
      },
      {
        "name": "Проверка значения Хранилище Значений",
        "type": "template",
        "content": "&НаКлиенте\r\nПроцедура ПроверкаЗначенияХранилищеЗначений();\r\n\r\n    Значение = РеквизитХранилище.Получить();\r\n    Если Значение <> Неопределено Тогда\r\n        Если ТипЗнч(Значение) = Тип(\"\"Строка\"\") Тогда\r\n            Сообщить(\"\"Это строка\"\");\r\n        ИначеЕсли ТипЗнч(Значение) = Тип(\"\"Картинка\"\") Тогда\r\n            Сообщить(\"\"Это фотография (картинка)\"\");\r\n        КонецЕсли;\r\n    КонецЕсли;\r\n\r\nКонецПроцедуры"
      },
      {
        "name": "Готовые Решения",
        "type": "folder",
        "children": [
          {
            "name": "Загрузка файла (скан подписи/печати для документов) в хранилище значения",
            "type": "template",
            "content": "&НаКлиенте\r\nПроцедура ЗагрузитьФайлСПодписью(Команда) // кнопка на форме\r\n\r\n    ФильтрФорматов =\r\n   \"\"Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|\"\"\r\n    +\"\"*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|\"\"\r\n    + \"\"Формат PNG (*.png)|*.png|\"\"\r\n    + \"\"Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|\"\"\r\n    + \"\"Формат GIF (*.gif)|*.gif|\"\"\r\n    + \"\"Формат TIFF (*.tif)|*.tif|\"\"\r\n    + \"\"Формат BMP (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|\"\"\r\n    + \"\"Формат ICON (*.ico)|*.ico|\"\"\r\n    + \"\"Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|\"\";\r\n\r\n    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(\"\"Выберите картинку с подписью\"\", Ложь, ФильтрФорматов);\r\n\r\n    ОписаниеОповещения = Новый ОписаниеОповещения(\"\"ПослеЗакрытияДиалогаВыбораПодписи\"\", ЭтаФорма);\r\n    // Описание оповещение будет вызвана после помещения файла во временное хранилище\r\n\r\n    НачатьПомещениеФайлаНаСервер(ОписаниеОповещения,,,, ПараметрыДиалога, УникальныйИдентификатор); // c 8.3.15\r\n    // Асинх.метод НачатьПомещениеФайлаНаСервер() возвращает результат и доп.параметры.\r\n    // Результат - переменная (с типом ОписаниеФайла)\r\n    // Доп.параметры - в примере пустые\r\n\r\nКонецПроцедуры\r\n\r\n &НаКлиенте\r\nПроцедура ПослеЗакрытияДиалогаВыбораПодписи(ОписаниеФайла, ДопПараметры) Экспорт\r\n\r\n    Если ОписаниеФайла.ПомещениеФайлаОтменено Тогда\r\n        Возврат;\r\n    КонецЕсли;\r\n\r\n    АдресХранилища = ОписаниеФайла.Адрес; // АдресХранилища - реквизит формы\r\n\r\nКонецПроцедуры\r\n\r\n &НаСервере\r\nПроцедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)\r\n\r\n    // Получаем файл из временного хранилища и кладём его в реквизит (с типом ХранилищеЗначения)\r\n    Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда // АдресХранилища - реквизит формы\r\n        ТекущийОбъект.Подпись = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилища));\r\n    КонецЕсли;\r\n\r\nКонецПроцедуры"
          },
          {
            "name": "Замена файла в хранилище значения",
            "type": "template",
            "content": "&НаСервере\r\nПроцедура ЗаменаФайлаВХранилище() Экспорт\r\n\r\n    НазваниеФайла = \"\"Война_и_мир\"\";\r\n    ИмяФайла = \"\"D:\\import\\\"\"+НазваниеФайла+\"\".txt\"\";\r\n\r\n    Хранилище_Файл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла));\r\n\r\n    Текущая_книга = Справочники.Книги.НайтиПоНаименованию(НазваниеФайла);\r\n    Если Текущая_книга.Пустая() Тогда\r\n         Сообщить(\"\"Книга \"\"+НазваниеФайла+\"\" в базе данных 1С не найдена!\"\");\r\n    Иначе // Найдена - меняем!\r\n        Справочник_Книга = Текущая_книга.ПолучитьОбъект();\r\n        Справочник_Книга.Хранилище = Хранилище_Файл;\r\n        Справочник_Книга.Записать();\r\n    КонецЕсли;\r\n\r\nКонецПроцедуры"
          }
        ]
      }
    ]
  },
  {
    "name": "Метаданные",
    "type": "folder",
    "children": [
      {
        "name": "Метаданные конфигурации",
        "type": "folder",
        "children": [
          {
            "name": "Пример Выбор всех документов в список значений",
            "type": "template",
            "content": "спДокументовКонфигурации = Новый СписокЗначений(); //сюда будем сохранять список\r\n//Метаданные - глобальная переменная, которая дает доступ ко всем метаданным конфигурации\r\n//Метаданные.Документы - коллекция документов конфигурации\r\nДля каждого Документ из Метаданные.Документы Цикл\r\n   //Документ - это метаданные документа (каждого, так как мы обходим их в цикле)\r\n   //.Имя - наименование документа так, как оно задано в конфигурации\r\n   //.Синоним - \"\"человеческое\"\" наименование документа, которое отображается пользователю\r\n   //список значений может хранить значение (имя документа) и \"\"представление для пользователя\"\" (как раз - синоним документа) \r\n   спДокументовКонфигурации.Добавить( Документ.Имя, Документ.Синоним );\r\nКонецЦикла;\r\n//даем возможность пользователю выбрать из списка нужный документ\r\nэлДокумент = спДокументовКонфигурации.ВыбратьЭлемент();\r\n//если пользователь нажал \"\"Отмена\"\", то результатом выбора будет значение НЕОПРЕДЕЛЕНО, иначе результатом будет - выбранный элемент\r\nЕсли элДокумент <> Неопределено Тогда\r\n    //в .Значение списка значений мы записывали имя документа \"\"как в конфигурации\"\"\r\n\t//создадим новый документ с таким именем, напомним - к документам можно обращаться Документы.ИмяДокумента или Документы[ИмяДокумента]\r\n   обДокумент = Документы[элДокумент.Значение].СоздатьДокумент();\r\n   //ДокументОбъект.ПолучитьФорму() - возвращает форму с указанным именем, а если имя не указано - то форму \"\"по\u0002умолчанию\"\"\r\n   обДокумент.ПолучитьФорму().Открыть();\r\nКонецЕсли;"
          },
          {
            "name": "Список всех документов через запрос",
            "type": "template",
            "content": "ТекстЗапроса = \"\"\"\";\r\nДля каждого Документ из Метаданные.Документы Цикл\r\n//несколько запросов объединяются друг с другом строкой \"\"ОБЪЕДИНИТЬ ВСЕ\"\"\r\n//если это не первая итерация цикла, то нужно добавить объединение запросов\r\n   Если не ПустаяСтрока(ТекстЗапроса) Тогда\r\n        ТекстЗапроса = ТекстЗапроса + \"\"\r\n        |\r\n        | ОБЪЕДИНИТЬ ВСЕ\r\n        | \"\";\r\n\tКонецЕсли;\r\n\t\r\n//добавляем имя документа\r\n//вид документа - добавляем строкой, выведем пользователю синоним метаданных\r\n//момент времени - используем для сортировки документов (подробнее см. \"\"Момент времени\"\")\r\n//ссылка - для обращения потом к документу\r\n//ограничим по периоду, так как если много документов - получение списка может занять слишком много ресурсов\r\n//обратите внимание - если в конфигурации много видов документов, то запрос работать не будет - так как существует \r\n//ограничение на кол-во таблиц в одном запросе\r\n//в этом случае нужно прописать разбиение запроса на пакеты по N документов и объединение результатов серии запросов в одной таблице\t\r\n    ТекстЗапроса = ТекстЗапроса + \"\"\r\n    |ВЫБРАТЬ\r\n    | \"\"\"\"\"\" + Документ.Синоним + \"\"\"\"\"\" КАК ВидДокумента,\r\n    | Дата,\r\n    | Номер,\r\n    | МоментВремени,\r\n    | Ссылка\r\n    |ИЗ\r\n    | Документ.\"\" + Документ.Имя + \"\"\r\n    |ГДЕ\r\n    | Дата между &НачалоПериода И &ОкончаниеПериода\"\";\r\nКонецЦикла;\t\r\n\r\n//добавим сортировку\r\nТекстЗапроса = ТекстЗапроса + \"\"\r\n       |УПОРЯДОЧИТЬ ПО \r\n       | МоментВремени\"\";\r\nЗапрос = Новый Запрос(ТекстЗапроса);\r\n//параметры запроса - период - текущий месяц\r\nЗапрос.УстановитьПараметр(\"\"НачалоПериода\"\", НачалоМесяца(ТекущаяДата()));\r\nЗапрос.УстановитьПараметр(\"\"ОкончаниеПериода\"\", КонецМесяца(ТекущаяДата()));\r\n//в нашем примере просто покажем результат пользователю\r\n//аккуратно - если в базе много документов, то показ результатов займет много времени\r\nЗапрос.Выполнить().Выгрузить().ВыбратьСтроку(); \r\n"
          },
          {
            "name": "Получить метаданные объекта",
            "type": "template",
            "content": "// Получение метаданных объекта\r\nПроцедура ПолучитьМетаданныеОбъекта(Объект)\r\n    // Создаем ссылку на метаданные объекта\r\n    СсылкаНаМетаданные = Метаданные.НайтиПоТипу(Объект);\r\n    \r\n    // Проверяем, найдены ли метаданные\r\n    Если СсылкаНаМетаданные <> Неопределено Тогда\r\n        // Выводим название объекта\r\n        Сообщить(\"\"Название объекта: \"\" + СсылкаНаМетаданные.Название);\r\n        \r\n        // Выводим описание объекта\r\n        Сообщить(\"\"Описание объекта: \"\" + СсылкаНаМетаданные.Описание);\r\n        \r\n        // Выводим список полей объекта\r\n        Сообщить(\"\"Список полей объекта:\"\");\r\n        Для Каждого Поле Из СсылкаНаМетаданные.Реквизиты Цикл\r\n            Сообщить(Поле.Название);\r\n        КонецЦикла;\r\n    Иначе\r\n        Сообщить(\"\"Метаданные объекта не найдены\"\");\r\n    КонецЕсли;\r\nКонецПроцедуры"
          },
          {
            "name": "Структура метаданных конфигурации (пример оформления интерфейса обработки с использованием макета)",
            "type": "template",
            "content": "//В данном примере создается форма МояОбработкаФорма, которая содержит макет.\r\n//В макет добавляются элементы, такие как текстовый объект ТекстМетаданных, \r\n//который будет выводить структуру метаданных конфигурации, и кнопка КнопкаЗакрыть для закрытия формы. \r\n//После добавления элементов в макет, форма открывается модально с помощью метода ОткрытьМодально().\r\nФорма = Новый Форма(\"\"МояОбработкаФорма\"\");\r\nФорма.Текст = \"\"Структура метаданных конфигурации\"\";\r\nФорма.Размеры = Новый Размеры(400, 300);\r\nФорма.Макет = Новый Макет();\r\nФорма.Макет.РасположениеЭлементов = РасположениеЭлементов.Вертикаль;\r\nФорма.Макет.Отступ = 10;\r\n\r\n// Добавление элементов в макет\r\nТекстМетаданных = Новый Текст(\"\"ТекстМетаданных\"\");\r\nТекстМетаданных.Текст = \"\"Здесь будет выводиться структура метаданных конфигурации\"\";\r\nТекстМетаданных.АвтоРазмер = Истина;\r\nФорма.Макет.Добавить(ТекстМетаданных);\r\n\r\nКнопкаЗакрыть = Новый Кнопка(\"\"КнопкаЗакрыть\"\");\r\nКнопкаЗакрыть.Текст = \"\"Закрыть\"\";\r\nКнопкаЗакрыть.АвтоРазмер = Истина;\r\nКнопкаЗакрыть.ОбработчикНажатия = Процедура()\r\n    Форма.Закрыть();\r\nКонецПроцедуры;\r\nФорма.Макет.Добавить(КнопкаЗакрыть);\r\n\r\nФорма.ОткрытьМодально();"
          },
          {
            "name": "Вывести структуру метаданных спомощью запроса",
            "type": "template",
            "content": "Процедура ВывестиСтруктуруМетаданных()\r\n    Запрос = Новый Запрос;\r\n    Запрос.Текст = \"\"\r\n    |    ВЫБРАТЬ\r\n    |        КлассыМетаданных.Имя,\r\n    |        КлассыМетаданных.Наименование,\r\n    |        КлассыМетаданных.Родитель,\r\n    |        КлассыМетаданных.Вид\r\n    |    ИЗ\r\n    |        ИнформационнаяБаза.Метаданные.КлассыМетаданных КАК КлассыМетаданных\r\n    |    ГДЕ\r\n    |        НЕ КлассыМетаданных.ПометкаУдаления\r\n    |    УПОРЯДОЧИТЬ ПО\r\n    |        КлассыМетаданных.Имя\"\";\r\n    \r\n    Результат = Запрос.Выполнить();\r\n    \r\n    Если Результат.Пустой() Тогда\r\n        Сообщить(\"\"Структура метаданных пуста\"\");\r\n    Иначе\r\n        Пока Результат.Следующий() Цикл\r\n            Сообщить(Результат.Имя + \"\", \"\" + Результат.Наименование + \"\", \"\" + Результат.Родитель + \"\", \"\" + Результат.Вид);\r\n        КонецЦикла;\r\n    КонецЕсли;\r\nКонецПроцедуры"
          },
          {
            "name": "Вывести структуру метаданных спомощью запроса(2)",
            "type": "template",
            "content": "//В данном примере мы создаем запрос, который выбирает все объекты метаданных типа \"\"Объект\"\". \r\n//Затем мы проходим по результатам запроса и выводим информацию о каждом объекте. \r\n//Для каждого объекта мы также вызываем функцию `ПолучитьСтруктуруРеквизитов`, \r\n//которая возвращает структуру реквизитов объекта. Затем мы выводим информацию о каждом реквизите.\r\n\r\nПроцедура ВывестиСтруктуруМетаданных()\r\n    Запрос = Новый Запрос;\r\n    Запрос.Текст = \"\"\r\n       | ВЫБРАТЬ\r\n       |     Метаданные.Ссылка КАК Ссылка,\r\n       |     Метаданные.Имя КАК Имя,\r\n       |     Метаданные.Тип.Имя КАК Тип\r\n       | ИЗ\r\n       |     Метаданные.Объекты КАК Метаданные\r\n       | ГДЕ\r\n       |     Метаданные.Тип.Имя = 'Объект'\"\";\r\n    Результат = Запрос.Выполнить();\r\n    \r\n    Если Результат.Пустой() Тогда\r\n        Сообщить(\"\"Не найдены метаданные объектов\"\");\r\n    Иначе\r\n        Пока Результат.Следующий() Цикл\r\n            Ссылка = Результат.Ссылка;\r\n            Имя = Результат.Имя;\r\n            Тип = Результат.Тип;\r\n            \r\n            Сообщить(\"\"Объект: \"\" + Имя + \"\", Тип: \"\" + Тип);\r\n            \r\n            // Получение структуры реквизитов объекта\r\n            СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(Ссылка);\r\n            \r\n            // Вывод структуры реквизитов\r\n            Для Каждого Реквизит Из СтруктураРеквизитов Цикл\r\n                Сообщить(\"\"Реквизит: \"\" + Реквизит.Имя + \"\", Тип: \"\" + Реквизит.Тип);\r\n            КонецЦикла;\r\n        КонецЕсли;\r\n    КонецПроцедуры\r\n\r\nФункция ПолучитьСтруктуруРеквизитов(Ссылка) Экспорт\r\n    СтруктураРеквизитов = Новый Структура;\r\n    Метаданные = Метаданные.НайтиПоСсылке(Ссылка);\r\n    \r\n    Если Метаданные <> Неопределено Тогда\r\n        Для Каждого Реквизит Из Метаданные.Реквизиты Цикл\r\n            СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Имя);\r\n        КонецЦикла;\r\n    КонецЕсли;\r\n    \r\n    Возврат СтруктураРеквизитов;\r\nКонецФункции"
          },
          {
            "name": "Очищение Реквезитов и Табличных частей объектов",
            "type": "template",
            "content": "Для Каждого Реквизит Из Контрагент. Метаданные().Реквизиты Цикл\r\n    Контрагент[ Реквизит. Имя] = Неопределено ;\r\nКонецЦикла ;\r\nДля Каждого ТаблЧасть Из Контрагент. Метаданные().ТабличныеЧасти Цикл\r\n    Контрагент[ТаблЧасть.Имя].Очистить();\r\nКонецЦикла ;\r\n\r\nКонтрагент.Записать() ;"
          }
        ]
      },
      {
        "name": "Метаданные объекта",
        "type": "folder",
        "children": [
          {
            "name": "проверка на наличие реквизитов с типом «Справочник.Организация» в документе и обнуление значения этих реквизитов",
            "type": "template",
            "content": "//ДокументОбъект - документ, полученный на изменение или \r\nсоздание\r\n//аналогичным образом можно работать со ссылками, например: \r\nДокументСсылка = \r\nДокумент.ИмяДокумента.ПустаяСсылка().Метаданные()\r\nДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();\r\n//цикл по реквизитам\r\nДля каждого Реквизит из ДокументОбъект.Метаданные().Реквизиты Цикл\r\n    //у каждого реквизита может быть как один, так и несколько типов, подробнее см. \"\"ОписаниеТипов\"\"\r\n    мТипов = Реквизит.Тип.Типы();\r\n   //проверяем по каждому типу - тот ли это нужный нам?\r\n   Для каждого Тип из мТипов Цикл\r\n      Если Тип = Тип(\"\"СправочникСсылка.Организации\"\") Тогда\r\n         //обнуляем реквизит с этим именем в документе\r\n         //для \"\"обнуления\"\" можно приравнивать его к Неопределено, \r\n         //по факту значение будет установлено не Неопределено, а \"\"пустое значение\"\" типа реквизита \r\n         //Неопределено только если у реквизита несколько типов\r\n         ДокументОбъект[Реквизит.Имя] = Неопределено;\r\n      КонецЕсли;\r\n   КонецЦикла;\r\nКонецЦикла;\r\n//цикл по табличным частям\r\nДля каждого ТабЧасть из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл\r\n     //в табличной части тоже реквизиты (колонки таб.части)\r\n     Для каждого Реквизит из ТабЧасть.Реквизиты Цикл\r\n        //здесь аналогично\r\n        мТипов = Реквизит.Тип.Типы();\r\n        Для каждого Тип из мТипов Цикл\r\n           Если Тип = Тип(\"\"СправочникСсылка.Организации\"\") Тогда\r\n               //так как это таб.часть, то мы должны пройтись по всем строкам этой тач. части\r\n               Для каждого Строка из ДокументОбъект[ТабЧасть.Имя] Цикл\r\n                   Строка[Реквизит.Имя] = Неопределено;\r\n               КонецЦикла;\r\n           КонецЕсли;\r\n        КонецЦикла;\r\n     КонецЦикла;\r\nКонецЦикла"
          }
        ]
      }
    ]
  },
  {
    "name": "Запросы",
    "type": "folder",
    "children": [
      {
        "name": "Преобразование выборки запроса в структуру",
        "type": "template",
        "content": ""
      },
      {
        "name": "Ст_ЗапросыКонкатенация",
        "type": "template",
        "content": " Разделитель =\r\n\"\"\r\n|;\r\n|/////////////////////////////////////////////////////////////\r\n|\"\";\r\n\r\nТекстыЗапросовПакета = Новый Массив;\r\n\r\nТекстЗапроса =\r\n\"\"ВЫБРАТЬ\r\n| Упаковки.Ссылка КАК Ссылка\r\n|ИЗ\r\n| Справочник.Упаковки КАК Упаковки\"\";\r\n\r\nТекстыЗапросовПакета.Добавить(ТекстЗапроса);\r\n\r\nТекстЗапроса =\r\n\"\"ВЫБРАТЬ\r\n| Номенклатура.Ссылка КАК Ссылка\r\n|ИЗ\r\n| Справочник.Номенклатура КАК Номенклатура\"\";\r\n\r\nТекстыЗапросовПакета.Добавить(ТекстЗапроса);\r\nТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"
      },
      {
        "name": "Ст_ЗапросыРазыменнованныеПолей",
        "type": "template",
        "content": " Запрос.Текст = \"\"ВЫБРАТЬ РАЗРЕШЕННЫЕ\r\n|\tВЫБОР\r\n|\t\tКОГДА Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг\r\n|\t\t\tТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РеализацияТоваровУслуг).Номер\r\n|\t\tКОГДА Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента\r\n|\t\t\tТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказКлиента).Номер\r\n|\tКОНЕЦ КАК Номер,\r\n|\tВЫБОР\r\n|\t\tКОГДА Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг\r\n|\t\t\tТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата\r\n|\t\tКОГДА Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента\r\n|\t\t\tТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказКлиента).Дата\r\n|\tКОНЕЦ КАК Дата,\r\n|\tПродажи.ВРезерве КАК ВРезерве,\r\n|\tПродажи.КОтгрузке КАК КОтгрузке\r\n|ИЗ\r\n|\tРегистрНакопления.ТоварыКОтгрузке КАК Продажи\r\n|ГДЕ\r\n|\t(Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг\r\n|\t\t\tИЛИ Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента)\"\";"
      },
      {
        "name": "Условия сравнения и проверки в Запросах. Отбор не заполненного значения",
        "type": "template",
        "content": "Запрос.Текст =\r\n    \"\"ВЫБРАТЬ \r\n    |    усЕдиницыХранения.Ссылка\r\n    |ИЗ\r\n    |    Справочник.усЕдиницыХранения КАК усЕдиницыХранения\"\"\r\n\r\n    // Пример 1. сравнение с не заполненным булевым значением:\r\n    |ГДЕ\r\n    |     усЕдиницыХранения.РазрешитьОтборИзРезервнойЗоны = Ложь\r\n\r\n    // Пример 2. но если это булево определено, то лучше так: // условие на отрицательное булево:\r\n    |ГДЕ\r\n    |     НЕ усЕдиницыХранения.РазрешитьОтборИзРезервнойЗоны\r\n\r\n    // Пример 3. выборка по условию не заполненного поля, имеющего тип \"\"справочник конкретного типа\"\"\r\n    |ГДЕ\r\n    |    усЕдиницыХранения.АктивнаяОбластьОтбора = ЗНАЧЕНИЕ(Справочник.усОбластиОтбора.ПустаяСсылка)\r\n\r\n    // Пример 3а. выборка по условию не заполненного поля, имеющего тип \"\"документ конкретного типа\"\"\r\n    |ГДЕ\r\n    |    НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент.ПустаяСсылка)\r\n\r\n    // Пример 3б. выборка по условию не заполненного поля, имеющего тип \"\"документы разных типов\"\" (составное поле)\r\n    |ГДЕ\r\n    |    (НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент1.ПустаяСсылка)\r\n    |    ИЛИ НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент2.ПустаяСсылка)\r\n    |    ИЛИ ...(и т.д. - последовательно перечисляем условия для всех возможных типов этого составного поля))\r\n\r\n    // Пример 4. или наоборот, если нужно выбрать заполненное значение типа \"\"строка\"\", то поможет условие:\r\n    |ГДЕ\r\n    |    усЕдиницыХранения.Наименование > \"\"\"\"\"\"\"\"\r\n\r\n    // Пример 5. если нужно выбрать документы конкретного типа, при составном типе данных, например в регистре \"\"ВыполняемыеЗадания\"\" ресурс \"\"Задание\"\" имеет составной тип, среди значений которого возможен документ \"\"Отбор\"\"\r\n    |ГДЕ\r\n    |    ВЫРАЗИТЬ(РегистрСведенийВыполняемыеЗадания.Задание КАК Документ.Отбор) ССЫЛКА Документ.Отбор\r\n\r\n    // Пример 5а. Еще аналогичный пример, когда нужно выбрать документы конкретного типа\r\n    |\tВЫБОР\r\n    |\t\tКОГДА ВЫРАЗИТЬ(агСоответствиеДокументов.ДокументБУ КАК Документ.ПоступлениеТоваровУслуг) ССЫЛКА Документ.ПоступлениеТоваровУслуг\r\n    |\t\t\tТОГДА \"\"\"\"ПоступлениеТоваровУслуг\"\"\"\"\r\n    |\t\tКОГДА ВЫРАЗИТЬ(агСоответствиеДокументов.ДокументБУ КАК Документ.РеализацияТоваровУслуг) ССЫЛКА Документ.РеализацияТоваровУслуг\r\n    |\t\t\tТОГДА \"\"\"\"РеализацияТоваровУслуг\"\"\"\"\r\n    |\t\tИНАЧЕ \"\"\"\"\"\"\"\"\r\n    |\tКОНЕЦ КАК ВидДокумента\r\n\r\n    // Пример 6. выбор по условию не определенного значения:\r\n    |ГДЕ\r\n    |    СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО\r\n\r\n    // Пример 7. выбор по виду движения \"\"Приход\"\" регистра накопления, \"\"Расход\"\" - аналогично):\r\n    |ГДЕ\r\n    |    РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)\r\n\r\n    // Пример 8. Как в запросе указать, что выполнять запрос не нужно (например, нужно программно в зависимости от какого-то\r\n    // условия вернуть пустой результат запроса - \r\n    // Запрос.Текст = СтрЗаменить(Запрос.Текст, \"\"ГДЕ Док.Ссылка = &ДокументСсылка\"\", \"\"ГДЕ ЛОЖЬ\"\");).\r\n    // Для этого достаточно добавить условие \"\"Где Ложь\"\".\r\n    // Кстати, независимо от объема запрашиваемых в выборке данных, такой запрос будет выполнен мгновенно.\r\n    |ГДЕ ЛОЖЬ\r\n\r\n    // Пример 9. Проверка на то, что результат выполнения запроса содержит данные:\r\n    Если НЕ Запрос.Выполнить().Пустой() Тогда\r\n\r\n    // Пример 10. выбор по условию не заполненной даты:\r\n    |ГДЕ\r\n    |    тбСтроки.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)   "
      },
      {
        "name": "Сравнение двух таблиц в запросе",
        "type": "template",
        "content": "\"\"ВЫБРАТЬ\r\n|\tТ1.Номенклатура КАК Номенклатура,\r\n|\tТ1.Характеристика КАК Характеристика,\r\n|\tТ1.Количество КАК Количество\r\n|ИЗ\r\n|\tТаблица1 КАК Т1\r\n|\t\tЛЕВОЕ СОЕДИНЕНИЕ Таблица2 КАК Т2\r\n|\t\tПО Т1.Номенклатура = Т2.Номенклатура\r\n|\t\t\tИ Т1.Характеристика = Т2.Характеристика\r\n|ГДЕ\r\n|\tТ2.Количество ЕСТЬ NULL\r\n|\r\n|ОБЪЕДИНИТЬ ВСЕ\r\n|\r\n|ВЫБРАТЬ\r\n|\tТ2.Номенклатура,\r\n|\tТ2.Характеристика,\r\n|\tТ2.Количество\r\n|ИЗ\r\n|\tТаблица2 КАК Т2\r\n|\t\tЛЕВОЕ СОЕДИНЕНИЕ Таблица1 КАК Т1\r\n|\t\tПО Т2.Номенклатура = Т1.Номенклатура\r\n|\t\t\tИ Т2.Характеристика = Т1.Характеристика\r\n|ГДЕ\r\n|\tТ1.Количество ЕСТЬ NULL\r\n|\r\n|ОБЪЕДИНИТЬ ВСЕ\r\n|\r\n|ВЫБРАТЬ\r\n|\tТ1.Номенклатура,\r\n|\tТ1.Характеристика,\r\n|\tТ1.Количество - Т2.Количество\r\n|ИЗ\r\n|\tТаблица1 КАК Т1\r\n|\t\tВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица2 КАК Т2\r\n|\t\tПО Т1.Номенклатура = Т2.Номенклатура\r\n|\t\t\tИ Т1.Характеристика = Т2.Характеристика\"\""
      },
      {
        "name": "синтаксис оператора проверки совпадений",
        "type": "folder",
        "children": [
          {
            "name": "Форма оператора В для проверки совпадения с одним из перечисленных <Выражение> [НЕ] В  ( <Список значений> | <Массив значений> ) ",
            "type": "template",
            "content": "  \"\"Выбрать\r\n  | \tСправочник.Номенклатура.Наименование\r\n  |\tГде\r\n  | \tСправочник.Номенклатура.Родитель.Наименование\r\n  | \t\tВ (\"\"\"\"Бытовая техника\"\"\"\",\"\"\"\"Оргтехника\"\"\"\")\"\"\r\n  \r\n"
          },
          {
            "name": "Форма оператора В для проверки принадлежности по иерархии <Выражение> [НЕ] В ИЕРАРХИИ  ( <Выражение> | <Список значений> | <Массив значений> )",
            "type": "template",
            "content": "// В качестве параметра Группа в запрос передается ссылка\r\n// на какую-либо группу справочника Номенклатура.\r\n\"\"Выбрать\r\n|   Справочник.Номенклатура.Наименование\r\n|Где\r\n|   Справочник.Номенклатура.Ссылка В ИЕРАРХИИ (&Группа)\"\"  \r\n\r\n//еще пример\r\n\r\n\"\"Выбрать\r\n|   Справочник.Номенклатура.Наименование\r\n|Где\r\n|   Справочник.Номенклатура.Ссылка В ИЕРАРХИИ\r\n|   (\r\n|      ВЫБРАТЬ\r\n|         Справочник.Номенклатура.Ссылка\r\n|      ГДЕ\r\n|         Справочник.Номенклатура.Наименование = \"\"\"\"Одежда\"\"\"\")\"\"\r\n"
          },
          {
            "name": "Форма оператора В для проверки совпадения значения с одним из результата запроса <Выражение> [НЕ] В [ИЕРАРХИИ] ( <Описание запроса> )",
            "type": "template",
            "content": "// Выбрать названия товаров, которые присутствовали в расходных накладных\r\n\"\"ВЫБРАТЬ\r\n|   Товары.Наименование\r\n|ИЗ\r\n|   Справочник.Товары КАК Товары\r\n|ГДЕ\r\n|   Товары.Ссылка В\r\n|     (\r\n|      ВЫБРАТЬ\r\n|         РасхНаклСостав.Товар\r\n|      ИЗ\r\n|         Документ.РасхНакл.Состав КАК РасхНаклСостав\r\n|     )\"\"  \r\n\r\n// еще пример\r\n\r\n// Выбрать названия товаров, которые присутствовали в расходных накладных\r\n\"\"ВЫБРАТЬ\r\n|   Товары.Наименование\r\n|ИЗ\r\n|   Справочник.Товары КАК Товары\r\n|ГДЕ\r\n|   Товары.Ссылка НЕ В\r\n|     (\r\n|      ВЫБРАТЬ\r\n|         РасхНаклСостав.Товар\r\n|      ИЗ\r\n|         Документ.РасхНакл.Состав КАК РасхНаклСостав\r\n|     )\"\"\r\n\r\n// еще пример \r\n// Выбрать названия товаров, которые присутствовали в расходных накладных\r\n\"\"ВЫБРАТЬ\r\n|   Товары.Наименование\r\n|ИЗ\r\n|   Справочник.Товары КАК Товары\r\n|ГДЕ\r\n|   Товары.Ссылка В\r\n|     (\r\n|      ВЫБРАТЬ\r\n|         РасхНаклСостав.Товар\r\n|      ИЗ\r\n|         Документ.РасхНакл.Состав КАК РасхНаклСостав\r\n|      ГДЕ\r\n|         РасхНаклСостав.Товар = Товары.Ссылка\r\n|     )\"\""
          },
          {
            "name": "(<Выражение>[, <Выражение> [, …]]) [НЕ] В  ( <Описание запроса> )",
            "type": "template",
            "content": "//Поиск дублей элементов справочника по набору полей\r\n\"\"ВЫБРАТЬ\r\n|    Номенклатура.Ссылка\r\n|ИЗ\r\n|    Справочник.Номенклатура КАК Номенклатура\r\n|    ГДЕ (Ссылка.Код,Ссылка.Наименование,1) НЕ В (ВЫБРАТЬ\r\n|                                                      Номенклатура.Код,\r\n|                                                      Номенклатура.Наименование,\r\n|                                                      СУММА(1) КАК Флаг\r\n|                                                  ИЗ\r\n|                                                    Справочник.Номенклатура КАК Номенклатура\r\n|                                                \r\n|                                                  СГРУППИРОВАТЬ ПО\r\n|                                                    Номенклатура.Наименование,\r\n|                                                    Номенклатура.Код)\"\""
          }
        ]
      }
    ]
  },
  {
    "name": "Транзакции",
    "type": "folder",
    "children": [
      {
        "name": "Ст_ТранзакцияЯвная",
        "type": "template",
        "content": "НачатьТранзакцию();\r\nПопытка\r\n    БлокировкаДанных = Новый БлокировкаДанных;\r\n    ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(\"\"Документ.ПриходнаяНакладная\"\");\r\n    ЭлементБлокировкиДанных.УстановитьЗначение(\"\"Ссылка\"\", СсылкаДляОбработки);\r\n    ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;\r\n    БлокировкаДанных.Заблокировать();\r\n\r\n    // ... // чтение или запись данных\r\n\r\n    ДокументОбъект.Записать();\r\n\r\n    ЗафиксироватьТранзакцию(); // Пишем всегда перед словом Исключение\r\nИсключение\r\n    ОтменитьТранзакцию(); // Пишем сразу после слова Исключение\r\n    ПодробноеПредставлениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());\r\n    ЗаписьЖурналаРегистрации(НСтр(\"\"ru = 'Выполнение операции'\"\"), // записывать в ЖР с ВызватьИсключение не нужно\r\n        УровеньЖурналаРегистрации.Ошибка,                        // без ВызватьИсключение пишем в ЖР\r\n        ,\r\n        ,\r\n        СтрШаблон(НСтр(\"\" ru = '%1'\"\"), ПодробноеПредставлениеОбОшибке));\r\n\r\n    ВызватьИсключение; // есть внешняя транзакция\r\n\r\nКонецПопытки;"
      }
    ]
  },
  {
    "name": "Безопасность",
    "type": "folder",
    "children": [
      {
        "name": "Ст_БезовасностьПОВызовЧерезОткрытыеИнтерфейсы",
        "type": "template",
        "content": "   // В частности, перед программным открытием документов Microsoft Word и Microsoft Excel \r\n// через COM следует запрещать исполнение макросов. \r\n// Иначе это может привести к выполнению вредоносных макросов (вирусов),\r\n// если таковые присутствуют в документе.\r\n// НЕПРАВИЛЬНО открывать документ Microsoft Word по умолчанию:\r\nОбъектWord = Новый COMОбъект(\"\"Word.Application\"\");\r\nДокумент = ОбъектWord.Documents.Open(ИмяФайла);\r\n// ПРАВИЛЬНО открывать документ Microsoft Word с отключением макросов:\r\nОбъектWord = Новый COMОбъект(\"\"Word.Application\"\");\r\nОбъектWord.WordBasic.DisableAutoMacros(1);\r\nДокумент = ОбъектWord.Documents.Open(ИмяФайла);\r\n// ПРАВИЛЬНО открывать документ Microsoft Excel с отключением макросов:\r\nОбъектExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\nОбъектExcel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3\r\nДокумент = ОбъектExcel.Workbooks.Open(ИмяФайла);\r\n// Проверку наличия подписи макросов в документах Microsoft Word можно реализовать так:\r\nОбъектWord = Новый COMОбъект(\"\"Word.Application\"\");\r\nОбъектWord.WordBasic.DisableAutoMacros(1); // Отключить автозапуск\r\nДокумент = ОбъектWord.Documents.Open(ФайлДокумента);\r\nЕсли Документ.VBASigned Тогда\r\n\tОбъектWord.WordBasic.DisableAutoMacros(0); // Включить автозапуск\r\n\tДокумент.RunAutoMacro(2); // wdAutoOpen = 2\r\nИначе\r\n\tДокумент.Close();\r\n\tВызватьИсключение НСтр(\"\" ru = 'Документ не подписан. Открытие отменено.'\"\");\r\nКонецЕсли;\r\n// Проверку наличия подписи макросов в документах Microsoft Excel можно реализовать так:\r\nОбъектExcel = Новый COMОбъект(\"\"Excel.Application\"\");\r\nИсходныйУровеньБезопасности = ОбъектExcel.AutomationSecurity;\r\nОбъектExcel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3\r\nДокумент = ОбъектExcel.Workbooks.Open(ФайлДокумента);\r\nОбъектExcel.AutomationSecurity = ИсходныйУровеньБезопасности;\r\nЕсли Документ.VBASigned Тогда\r\n\tДокумент.Close();\r\n\tДокумент = ОбъектExcel.Workbooks.Open(ФайлДокумента);\r\nИначе\r\n\tДокумент.Close();\r\n\tВызватьИсключение НСтр(\"\" ru = 'Документ не подписан. Открытие отменено.'\"\");\r\nКонецЕсли;"
      }
    ]
  },
  {
    "name": "Блокировки",
    "type": "folder",
    "children": [
      {
        "name": "Ст_БлокировкаОтветственноеЧтение",
        "type": "template",
        "content": "// Неправильно:\r\n// 1. Прочитать регистр сведений\r\nЗапрос = Новый Запрос(\r\n\"\"ВЫБРАТЬ РАЗРЕШЕННЫЕ\r\n| ЗаметкиПоПредмету.КоличествоЗаметок КАК КоличествоЗаметок\r\n|ИЗ\r\n| РегистрСведений.ЗаметкиПоПредмету КАК ЗаметкиПоПредмету\r\n|ГДЕ\r\n| ЗаметкиПоПредмету.Предмет = &Предмет\"\");\r\nЗапрос.УстановитьПараметр(\"\"Предмет\"\", ПредметЗаметок);\r\nВыборка = Запрос.Выполнить().Выбрать();\r\nКоличествоЗаметок = 0;\r\nЕсли Выборка.Следующий() Тогда\r\n\tКоличествоЗаметок = Выборка.КоличествоЗаметок;\r\nКонецЕсли;\r\n// 2. Записать в регистр сведений\r\nНаборЗаписей = РегистрыСведений.ЗаметкиПоПредмету.СоздатьНаборЗаписей();\r\nНаборЗаписей.Отбор.Предмет.Установить(ПредметЗаметок);\r\nНоваяЗапись = НаборЗаписей.Добавить();\r\nНоваяЗапись.Предмет = ПредметЗаметок;\r\nНоваяЗапись.КоличествоЗаметок = КоличествоЗаметок + 1;\r\nНаборЗаписей.Записать();\r\n\r\n// Правильно:\r\n// 1. Начать транзакцию для пакета из двух операций чтения и записи регистра\r\nНачатьТранзакцию();\r\nПопытка\r\n\t// 2. Установить исключительную блокировку на интересующий диапазон записей регистра,\r\n\t// для того чтобы гарантировать, что в момент записи количество заметок не изменилось с момента чтения в каком-либо другом сеансе.\r\n\tБлокировкаДанных = Новый БлокировкаДанных;\r\n\tЭлементБлокировкиДанных = БлокировкаДанных.Добавить(\"\"РегистрСведений.ЗаметкиПоПредмету\"\");\r\n\tЭлементБлокировкиДанных.УстановитьЗначение(\"\"Предмет\"\", ПредметЗаметок);\r\n\tЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;\r\n\tБлокировкаДанных.Заблокировать();\r\n\t// 3. Прочитать регистр сведений\r\n\tЗапрос = Новый Запрос(\r\n\t\"\"ВЫБРАТЬ РАЗРЕШЕННЫЕ\r\n\t| ЗаметкиПоПредмету.КоличествоЗаметок КАК КоличествоЗаметок\r\n\t|ИЗ\r\n\t| РегистрСведений.ЗаметкиПоПредмету КАК ЗаметкиПоПредмету\r\n\t|ГДЕ\r\n\t| ЗаметкиПоПредмету.Предмет = &Предмет\"\");\r\n\tЗапрос.УстановитьПараметр(\"\"Предмет\"\", ПредметЗаметок);\r\n\tВыборка = Запрос.Выполнить().Выбрать();\r\n\tКоличествоЗаметок = 0;\r\n\tЕсли Выборка.Следующий() Тогда\r\n\t\tКоличествоЗаметок = Выборка.КоличествоЗаметок;\r\n\tКонецЕсли;\r\n\t// 4. Записать в регистр сведений\r\n\tНаборЗаписей = РегистрыСведений.ЗаметкиПоПредмету.СоздатьНаборЗаписей();\r\n\tНаборЗаписей.Отбор.Предмет.Установить(ПредметЗаметок);\r\n\tНоваяЗапись = НаборЗаписей.Добавить();\r\n\tНоваяЗапись.Предмет = ПредметЗаметок;\r\n\tНоваяЗапись.КоличествоЗаметок = КоличествоЗаметок + 1;\r\n\tНаборЗаписей.Записать();\r\n\tЗафиксироватьТранзакцию(); // Пишем всегда перед словом Исключение\r\nИсключение\r\n\t// 5. Если при установке блокировки возникла исключительная ситуация из-за того, что регистр уже заблокирован в другом сеансе (или по другим причинам),\r\n\t// отменить транзакцию и записать сведения об ошибке в журнал регистрации.\r\n\tОтменитьТранзакцию(); // Пишем сразу после слова Исключение\r\n\tПодробноеПредставлениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());\r\n        ЗаписьЖурналаРегистрации(НСтр(\"\" ru = 'Заметки'\"\", ОбщегоНазначения.КодОсновногоЯзыка()),       // записывать в ЖР с ВызватьИсключение не нужно \r\n\t    УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон(НСтр(\"\" ru = '%1'\"\"), ПодробноеПредставлениеОбОшибке)); // без ВызватьИсключение пишем в ЖР\r\n\tВызватьИсключение; // есть внешняя транзакция\r\nКонецПопытки;"
      }
    ]
  },
  {
    "name": "JSON",
    "type": "folder",
    "children": [
      {
        "name": "Чтение JSON (Строка JSON >> Структура)",
        "type": "template",
        "content": "// Функция - Простое чтение JSON\r\n// Функция преобразует строку JSON  в структура 1С\r\n// Параметры:\r\n//  Данные\t - \tСтрока - Строка в формате JS\r\n// \r\n// Возвращаемое значение:\r\n//  Структура - Результат преоборазования\r\n//\r\nФункция ПростоеЧтениеJSON(Данные)\r\n\t\r\n\tЧтениеJSON = Новый ЧтениеJSON;\r\n\tЧтениеJSON.УстановитьСтроку(Данные);  \t\t\r\n\tВозврат ПрочитатьJSON(ЧтениеJSON);\r\n\t\r\nКонецФункции"
      },
      {
        "name": "Запись JSON (Структура >> Строка JSON)",
        "type": "template",
        "content": "Процедура ТестЗаписиJSON()\r\n\r\n\tДанные = Новый Структура();\r\n\tДанные.Вставить(\"\"date\"\",ТекущаяДата());\r\n\tДанные.Вставить(\"\"base\"\",\"\"RUB\"\"); \r\n\tРезультат = ПростаяЗаписьJSON(Данные);\t\r\n\r\nКонецПроцедуры\r\n\r\n\r\nФункция ПростаяЗаписьJSON(Данные)\r\n\t\r\n\tЗаписьJSON = Новый ЗаписьJSON;\t\t\t\r\n\tЗаписьJSON.УстановитьСтроку();\r\n\tЗаписатьJSON(ЗаписьJSON,Данные);\t\t\t\r\n\tВозврат ЗаписьJSON.Закрыть();  \r\n\t\r\nКонецФункции\r\n\r\n//{\r\n//\"\"date\"\": \"\"2021-02-13T13:46:17\"\",\r\n//\"\"base\"\": \"\"RUB\"\"\r\n//}"
      },
      {
        "name": "Чтение JSON с преобразованием типов (Строка >> Структура JSON)",
        "type": "template",
        "content": "// https://www.cbr-xml-daily.ru/latest.js\r\n\r\nПроцедура ЗапроситьКурсыВалют()\r\n\t\r\n\tHTTPСоединение = Новый HTTPСоединение(\"\"www.cbr-xml-daily.ru\"\");\r\n\tHTTPЗапрос = Новый HTTPЗапрос(\"\"latest.js\"\"); \r\n\tHTTPЗапрос.Заголовки.Вставить(\"\"Content-type\"\", \"\"application/json\"\");\t\r\n\t\r\n\t//GET Запрос\r\n\tЗапрос = HTTPСоединение.Получить(HTTPЗапрос);\r\n\tРезультат = ЧтениеJSON(Запрос.ПолучитьТелоКакСтроку());\r\n\r\nКонецПроцедуры\r\n\r\nФункция ЧтениеJSON(Данные)\r\n\t\r\n\tЧтениеJSON = Новый ЧтениеJSON;\r\n    ЧтениеJSON.УстановитьСтроку(Данные);  \t\t\r\n\tВозврат ПрочитатьJSON(ЧтениеJSON,,,,\"\"ФункцияВосстановленияJSON\"\", ЭтотОбъект);\r\n\t\r\nКонецФункции\r\n\r\n\r\nФункция ФункцияВосстановленияJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт\r\n\t\r\n\tЕсли СтрНайти(Свойство,\"\"date\"\") > 0  Тогда // В название свойства есть Дата\r\n\t\tВозврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);\r\n\tИначеЕсли Свойство = \"\"base\"\" Тогда\r\n\t\tВозврат Справочники.Валюты.НайтиПоНаименованию(Значение);\t\r\n\tКонецЕсли;      \r\n\t\r\nКонецФункции   \r\n\r\n\r\n//{\r\n//    \"\"date\"\": \"\"2021-02-13\"\",\r\n//    \"\"timestamp\"\": 1613174400,\r\n//    \"\"base\"\": \"\"RUB\"\",\r\n//    \"\"rates\"\": {\r\n//        \"\"AUD\"\": 0.017483,\r\n//        ....\r\n//        \"\"USD\"\": 0.013525,\r\n//        \"\"EUR\"\": 0.01116\r\n//    }\r\n//}"
      },
      {
        "name": "Запись JSON с преобразованием типов (Структура >> Строка JSON)",
        "type": "template",
        "content": " Процедура ТестЗаписиJSON()\r\n\r\n\tДанные = Новый Структура();\r\n\tДанные.Вставить(\"\"date\"\",ТекущаяДата());\r\n\tДанные.Вставить(\"\"base\"\",Константы.ВалютаРегламентированногоУчета.Получить()); \r\n\tРезультат = ЗаписьJSON(Данные);\t\r\n\r\nКонецПроцедуры\r\n\r\nФункция ЗаписьJSON(Данные)\r\n\t\r\n\tЗаписьJSON = Новый ЗаписьJSON;\t\t\t\r\n\tЗаписьJSON.УстановитьСтроку();\r\n\tНастройкиJSON = Новый НастройкиСериализацииJSON;\r\n\tНастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;\r\n\tНастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;\r\n\tЗаписатьJSON(ЗаписьJSON,Данные,НастройкиJSON,\"\"ФункцияПреобразованияJSON\"\", ЭтотОбъект);\t\t\t\r\n\tВозврат ЗаписьJSON.Закрыть();  \r\n\t\r\nКонецФункции\r\n\r\nФункция ФункцияПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт\r\n\t\r\n\tЕсли ТипЗнч(Значение) = Тип(\"\"СправочникСсылка.Валюты\"\")  Тогда\t\t\r\n\t\tВозврат СокрЛП(Значение.Наименование);\t\r\n\tКонецЕсли; \r\n\t\r\nКонецФункции"
      },
      {
        "name": "Пример функции упаковки в JSON из регистра сведений ШтрихКод ",
        "type": "template",
        "content": "Функция ПолучитьНоменклатуру()Экспорт\r\n\t\r\n\tЗапрос = Новый Запрос;\r\n\tЗапрос.Текст = \r\n\t\"\"ВЫБРАТЬ\r\n\t|\tШтрихкоды.Штрихкод КАК barcode,\r\n\t|\tШтрихкоды.Номенклатура.Код КАК cod,\r\n\t|\tШтрихкоды.Номенклатура.Наименование КАК name,\r\n\t|\tШтрихкоды.Номенклатура.Артикул КАК articul\r\n\t|ИЗ\r\n\t|\tРегистрСведений.Штрихкоды КАК Штрихкоды\"\";\r\n\t\r\n\tРезультат = Запрос.Выполнить();\r\n\tВыборка = Результат.Выбрать();\r\n\tМассив = Новый Массив;\r\n\tПока Выборка.Следующий()Цикл\r\n\t\tСтруктура = Новый Структура(\"\"barcode, cod, name, articul\"\");\r\n\t\tЗаполнитьЗначенияСвойств(Структура, Выборка);\r\n\t\tМассив.Добавить(Структура);\r\n\tКонецЦикла;\r\n\t\r\n\tЗаписьJSON = Новый ЗаписьJSON;\r\n\tЗаписьJSON.УстановитьСтроку();\r\n\tЗаписатьJSON(ЗаписьJSON, Массив);\r\n\t\r\n\tСтрокаJSON = ЗаписьJSON.Закрыть();\r\n\tВозврат СтрокаJSON;\r\n\t\r\n\r\nКонецФункции"
      }
    ]
  },
  {
    "name": "Встроенные Функции",
    "type": "folder",
    "children": [
      {
        "name": "Использование генератора случайных чисел - Random",
        "type": "template",
        "content": "НачальноеЧисло = 167;\r\nГСЧ = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);\r\nСлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 1000);"
      },
      {
        "name": "Функция Random",
        "type": "template",
        "content": "Функция Рандом() Экспорт\r\n   UID=Новый УникальныйИдентификатор();\r\n   UID = СтрЗаменить(UID,\"\"-\"\",\"\"\"\");\r\n   Значение = \"\"\"\";\r\n   Для Н=1 По СтрДлина(UID) Цикл\r\n      Симв = Сред(UID,Н,1);\r\n      Значение = Значение+Прав(КодСимвола(Симв),1);\r\n   КонецЦикла;\r\n   Возврат Число(\"\"0.\"\"+Значение);\r\nКонецФункции   "
      },
      {
        "name": "Функция Random2",
        "type": "template",
        "content": "Функция Ранд(Парам=0)\r\n    Если Парам<>0 Тогда\r\n        Случай=Парам;\r\n    КонецЕсли;\r\n    Если Число(Случай)=0 Тогда\r\n        Случай=Число(СтрЗаменить(\"\"\"\"+ТекущееВремя(),\"\":\"\",\"\"\"\"));\r\n        Случай=(16807*Случай)%2147483647;\r\n    КонецЕсли;\r\n    Случай=(16807*Случай)%2147483647;\r\n    Случай=макс(Случай,-Случай);\r\n    Возврат(Случай/2147483647);\r\nКонецФункции   "
      }
    ]
  },
  {
    "name": "Работа с операционной системой",
    "type": "folder",
    "children": [
      {
        "name": "Запустить внешнюю программу",
        "type": "template",
        "content": "//ЗапуститьПриложение(СтрокаКоманды, [ТекущийКаталог], [ДождатьсяЗавершения], [КодВозврата])\r\n\r\nЗапуститьПриложение(\r\n        \"\"calc.exe\"\",\r\n        \"\"\"\", // текущий каталог для запускаемого приложения\r\n        Ложь, // дожидаться завершения работы запущенного приложения\r\n        КодВозврата // сюда попадёт код, возвращаемый программой\r\n);"
      },
      {
        "name": "Запустить файл с проверкой",
        "type": "template",
        "content": "//открывает web-страницу с помощью браузера \"\"по-умолчанию\"\"\r\nЗапуститьПриложение(\"\"C:\\temp\\test.html\"\");\r\n//открывает pdf-файл на просмотр\r\nФайлPDF = Новый Файл(\"\"C:\\test.pdf\"\");\r\nЕсли ФайлPDF.Существует() Тогда\r\n\tЗапуститьПриложение(ФайлPDF.ПолноеИмя);\r\nКонецЕсли;"
      }
    ]
  }
]